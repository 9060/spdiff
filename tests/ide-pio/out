Setting abstraction level: 7
Setting abstraction level for subterms: 7
Reading specification file
Spec. file is: ide_spec
Parsed two: ali14xx.c.orig, ali14xx.c
Parsed two: dtc2278.c.orig, dtc2278.c
Parsed two: ht6560b.c.orig, ht6560b.c
Reading file pairs
Reading file pair ht6560b.c.orig ht6560b.c
Reading file pair dtc2278.c.orig dtc2278.c
Reading file pair ali14xx.c.orig ali14xx.c
Creating patches for each file-pair
...Frequent subterms found:
ident(NULL)
ident(pio)
ident(drive)
ident(ide_get_best_pio_mode)
Making changesets
@@ counting : 1
unabs solutions
[[
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]
	¶
]]
[[
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]
	¶
]]
[[
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]]
	¶
]]
[[
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]]
	¶
]]
[[
sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]] ==> sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]
	¶
]]
[[
{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]
	¶
]]
[[
def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]] ==> def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]]
	¶
]]
[[
prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
starting abstraction
minimal term size: 6
renumbering metas
abstracting the following solution now
[[
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]
	¶
]]
of size  :::: 6

with result :::::
call[meta(X5),meta(X4),meta(X3),meta(X2),ident(NULL)] ==> call[meta(X5),meta(X4),meta(X3),meta(X2)]
call[meta(X5),meta(X4),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X5),meta(X4),ident(pio),meta(X2)]
call[meta(X5),ident(drive),meta(X3),meta(X2),ident(NULL)] ==> call[meta(X5),ident(drive),meta(X3),meta(X2)]
call[meta(X5),ident(drive),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X5),ident(drive),ident(pio),meta(X2)]
call[ident(ide_get_best_pio_mode),meta(X4),meta(X3),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X4),meta(X3),meta(X2)]
call[ident(ide_get_best_pio_mode),meta(X4),ident(pio),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X4),ident(pio),meta(X2)]
call[ident(ide_get_best_pio_mode),ident(drive),meta(X3),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X3),meta(X2)]
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X2)]
	#no of abstracted update: 8
abstracting the following solution now
[[
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]
	¶
]]
of size  :::: 9

with result :::::
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]
	#no of abstracted update: 1
abstracting the following solution now
[[
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]]
	¶
]]
of size  :::: 10

with result :::::
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]]
	¶
]]
of size  :::: 118

with result :::::
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]]
	#no of abstracted update: 1
abstracting the following solution now
[[
sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]] ==> sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]
	¶
]]
of size  :::: 130

with result :::::
sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]] ==> sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]
	¶
]]
of size  :::: 134

with result :::::
{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]] ==> def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]]
	¶
]]
of size  :::: 149

with result :::::
def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]] ==> def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
of size  :::: 436

with result :::::
prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	#no of abstracted update: 1
flattening lists
filtering
@@ counting : 2
unabs solutions
[[
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]
	¶
]]
[[
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]
	¶
]]
[[
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]]
	¶
]]
[[
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]
	¶
]]
[[
def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]] ==> def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]]
	¶
]]
[[
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
starting abstraction
minimal term size: 6
renumbering metas
abstracting the following solution now
[[
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]
	¶
]]
of size  :::: 6

with result :::::
call[meta(X5),meta(X4),meta(X3),meta(X2),ident(NULL)] ==> call[meta(X5),meta(X4),meta(X3),meta(X2)]
call[meta(X5),meta(X4),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X5),meta(X4),ident(pio),meta(X2)]
call[meta(X5),ident(drive),meta(X3),meta(X2),ident(NULL)] ==> call[meta(X5),ident(drive),meta(X3),meta(X2)]
call[meta(X5),ident(drive),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X5),ident(drive),ident(pio),meta(X2)]
call[ident(ide_get_best_pio_mode),meta(X4),meta(X3),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X4),meta(X3),meta(X2)]
call[ident(ide_get_best_pio_mode),meta(X4),ident(pio),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X4),ident(pio),meta(X2)]
call[ident(ide_get_best_pio_mode),ident(drive),meta(X3),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X3),meta(X2)]
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X2)]
	#no of abstracted update: 8
abstracting the following solution now
[[
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]
	¶
]]
of size  :::: 9

with result :::::
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]
	#no of abstracted update: 1
abstracting the following solution now
[[
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]]
	¶
]]
of size  :::: 10

with result :::::
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]
	¶
]]
of size  :::: 59

with result :::::
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]] ==> def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]]
	¶
]]
of size  :::: 75

with result :::::
def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]] ==> def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
of size  :::: 187

with result :::::
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	#no of abstracted update: 1
flattening lists
filtering
@@ counting : 3
unabs solutions
[[
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]
	¶
]]
[[
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]
	¶
]]
[[
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]]
	¶
]]
[[
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]
	¶
]]
[[
def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]] ==> def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]]
	¶
]]
[[
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
starting abstraction
minimal term size: 6
renumbering metas
abstracting the following solution now
[[
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]
	¶
]]
of size  :::: 6

with result :::::
call[meta(X5),meta(X4),meta(X3),meta(X2),ident(NULL)] ==> call[meta(X5),meta(X4),meta(X3),meta(X2)]
call[meta(X5),meta(X4),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X5),meta(X4),ident(pio),meta(X2)]
call[meta(X5),ident(drive),meta(X3),meta(X2),ident(NULL)] ==> call[meta(X5),ident(drive),meta(X3),meta(X2)]
call[meta(X5),ident(drive),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X5),ident(drive),ident(pio),meta(X2)]
call[ident(ide_get_best_pio_mode),meta(X4),meta(X3),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X4),meta(X3),meta(X2)]
call[ident(ide_get_best_pio_mode),meta(X4),ident(pio),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X4),ident(pio),meta(X2)]
call[ident(ide_get_best_pio_mode),ident(drive),meta(X3),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X3),meta(X2)]
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X2)]
	#no of abstracted update: 8
abstracting the following solution now
[[
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]
	¶
]]
of size  :::: 9

with result :::::
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]
	#no of abstracted update: 1
abstracting the following solution now
[[
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]]
	¶
]]
of size  :::: 10

with result :::::
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]
	¶
]]
of size  :::: 177

with result :::::
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]] ==> def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]]
	¶
]]
of size  :::: 193

with result :::::
def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]] ==> def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]]
	#no of abstracted update: 1
abstracting the following solution now
[[
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
of size  :::: 299

with result :::::
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	#no of abstracted update: 1
flattening lists
filtering
Done
@@@@@@@@@@@@@@@
[[
call[meta(X0),meta(X1),meta(X2),meta(X3),ident(NULL)] ==> call[meta(X0),meta(X1),meta(X2),meta(X3)]
	¶
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
	¶
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
	¶
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
	¶
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
	¶
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]
	¶
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]]
	¶
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]
	¶
def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]] ==> def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]]
	¶
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO),ident(NULL)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),NCP(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(inReg),funtype[fulltype[typec(N/H)],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],st_return[call[ident(inb),ident(dataPort)]]]],def[fname(outReg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(outb_p),ident(reg),ident(regPort)]],estmt[call[ident(outb_p),ident(data),ident(dataPort)]]]],def[fname(ali14xx_tune_drive),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),ident(ALI_MAX_PIO)]]],estmt[assign[simple_assi(=),ident(time1),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(time2),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(param3),assign[simple_assi(=),ident(param1),binary[aop(/),binary[aop(+),binary[aop(*),ident(time2),ident(bus_speed)],const_i(999)],const_i(1000)]]]],estmt[assign[simple_assi(=),ident(param4),assign[simple_assi(=),ident(param2),binary[aop(-),binary[aop(/),binary[aop(+),binary[aop(*),ident(time1),ident(bus_speed)],const_i(999)],const_i(1000)],ident(param1)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(param3),const_i(8)]],estmt[assign[op_assi(+=),ident(param4),const_i(8)]]],estmt(NONE)],estmt[call[ident(printk),const(N/H),->expr[ident(drive),ident(name)],ident(pio),ident(time1),ident(time2),ident(param1),ident(param2),ident(param3),ident(param4)]],estmt[assign[simple_assi(=),ident(driveNum),binary[aop(+),binary[aop(N/H),->expr[call[ident(HWIF),ident(drive)],ident(index)],const_i(1)],.expr[.expr[->expr[ident(drive),ident(select)],ident(b)],ident(unit)]]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(outb_p),ident(regOn),ident(basePort)]],estmt[call[ident(outReg),ident(param1),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg1)]]],estmt[call[ident(outReg),ident(param2),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg2)]]],estmt[call[ident(outReg),ident(param3),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg3)]]],estmt[call[ident(outReg),ident(param4),.expr[array_a[ident(regTab),ident(driveNum)],ident(reg4)]]],estmt[call[ident(outb_p),ident(regOff),ident(basePort)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]]],NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
[[
call[meta(X0),meta(X1),meta(X2),meta(X3),ident(NULL)] ==> call[meta(X0),meta(X1),meta(X2),meta(X3)]
	¶
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
	¶
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
	¶
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
	¶
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
	¶
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]
	¶
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]]
	¶
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]
	¶
def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]] ==> def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]]
	¶
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4),ident(NULL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],def[fname(sub22),funtype[fulltype[ctype[btype(void)]],param[reg(),name(b),fulltype[ctype[btype[itype(char)]]]],param[reg(),name(c),fulltype[ctype[btype[itype(char)]]]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(b),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],estmt[call[ident(outb_p),ident(c),const_i(0xb4)]],estmt[call[ident(inb),const_i(0x3f6)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(outb_p),const_i(7),const_i(0xb0)]],estmt[call[ident(inb),const_i(0x3f6)]],statem(N/H)],estmt(NONE)]]]]],def[fname(tune_dtc2278),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(4)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(sub22),const_i(1),const_i(0xc3)]],estmt[call[ident(sub22),const_i(0),const_i(0xa0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]]],{}stmt[stmt(NOP)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(io_32bit)],const_i(1)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[call[ident(HWIF),ident(drive)],ident(drives)],expr(N/H)],ident(io_32bit)],const_i(1)]]]],NCP(N/H),decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
[[
call[meta(X0),meta(X1),meta(X2),meta(X3),ident(NULL)] ==> call[meta(X0),meta(X1),meta(X2),meta(X3)]
	¶
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
	¶
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
	¶
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
	¶
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
	¶
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
	¶
assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]] ==> assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]
	¶
estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]] ==> estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]]
	¶
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]]
	¶
sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]] ==> sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]
	¶
{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]
	¶
def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]] ==> def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]]
	¶
prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5),ident(NULL)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[define(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(asm),inc_elem(io.h)],define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ht6560b_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(local_irq_save),ident(flags)]],estmt[assign[simple_assi(=),ident(select),call[ident(HT_CONFIG),ident(drive)]]],estmt[assign[simple_assi(=),ident(timing),call[ident(HT_TIMING),ident(drive)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(current_select),ident(select)]],estmt[assign[simple_assi(=),ident(current_timing),ident(timing)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(select),ident(HT_PREFETCH_MODE)]],estmt(NONE)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(outb),ident(select),ident(HT_CONFIG_PORT)]],estmt[call[ident(outb),ident(timing),ident(IDE_SELECT_REG)]],estmt[expr(N/H)],estmt[call[ident(printk),const_s(ht6560b: %s: select=%#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(select),ident(timing)]]],estmt(NONE)],estmt[call[ident(local_irq_restore),ident(flags)]]]],NCP(N/H),def[fname(ht_pio2timings),funtype[fulltype[typec(N/H)],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[ident(pio),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(pio),call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),const_i(5)]]],estmt[assign[simple_assi(=),ident(cycle_time),call[ident(ide_pio_cycle_time),ident(drive),ident(pio)]]],estmt[assign[simple_assi(=),ident(active_time),.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(active_time)]]],estmt[assign[simple_assi(=),ident(recovery_time),binary[aop(-),binary[aop(-),ident(cycle_time),ident(active_time)],.expr[array_a[ident(ide_pio_timings),ident(pio)],ident(setup_time)]]]],estmt[assign[simple_assi(=),ident(active_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(active_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],estmt[assign[simple_assi(=),ident(recovery_cycles),binary[aop(/),binary[aop(+),binary[aop(*),ident(recovery_time),ident(bus_speed)],const_i(999)],const_i(1000)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(2)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(active_cycles),const_i(15)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(recovery_cycles),const_i(0)]],estmt(NONE)],estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=%d recovery=%d (%dns) active=%d (%dns)\n),->expr[ident(drive),ident(name)],ident(pio),ident(recovery_cycles),ident(recovery_time),ident(active_cycles),ident(active_time)]],st_return[expr(N/H)]],{}stmt[estmt[call[ident(printk),const_s(ht6560b: drive %s setting pio=0\n),->expr[ident(drive),ident(name)]]],st_return[ident(HT_TIMING_DEFAULT)]]]]],def[fname(ht_set_prefetch),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],sel_if[ident(state),{}stmt[estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(t)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(1)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(unmask)],const_i(0)]]],{}stmt[estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(drive),ident(no_unmask)],const_i(0)]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s prefetch mode %sabled\n),->expr[ident(drive),ident(name)],condexpr3[ident(state),const_s(en),const_s(dis)]]]]],def[fname(tune_ht6560b),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(timing),call[ident(ht_pio2timings),ident(drive),ident(pio)]]],estmt[call[ident(spin_lock_irqsave),&expr[ident(ide_lock)],ident(flags)]],estmt[assign[op_assi(&=),->expr[ident(drive),ident(drive_data)],const_i(0xff00)]],estmt[assign[op_assi(|=),->expr[ident(drive),ident(drive_data)],ident(timing)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(ide_lock)],ident(flags)]],estmt[call[ident(printk),const_s(ht6560b: drive %s tuned to pio mode %#x timing=%#x\n),->expr[ident(drive),ident(name)],ident(pio),ident(timing)]]]],decl(N/H),mtop(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
	¶
]]
"Real" db mining starting
printing
Folding itemsets: 255
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),ident(pio),meta(X0)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),ident(drive),meta(X0),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2),ident(NULL)] ==> call[ident(ide_get_best_pio_mode),meta(X0),meta(X1),meta(X2)]
 ¶ 
{{{
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),ident(pio),meta(X1),ident(NULL)] ==> call[meta(X0),ident(drive),ident(pio),meta(X1)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[meta(X0),ident(drive),meta(X1),meta(X2),ident(NULL)] ==> call[meta(X0),ident(drive),meta(X1),meta(X2)]
 ¶ 
{{{
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[meta(X0),meta(X1),ident(pio),meta(X2),ident(NULL)] ==> call[meta(X0),meta(X1),ident(pio),meta(X2)]
 ¶ 
{{{
call[meta(X0),meta(X1),meta(X2),meta(X3),ident(NULL)] ==> call[meta(X0),meta(X1),meta(X2),meta(X3)]
 ¶ 
}}}
