--- /home/julia/linux-2.6/drivers/atm/idt77252.c	2007-07-20 17:45:45.000000000 +0200
+++ /tmp/cocci-output-12985-0f5621-idt77252.c	2007-07-23 15:01:05.000000000 +0200
@@ -1170,8 +1170,8 @@
 			}
 			sb = rpp->first;
 			for (i = 0; i < rpp->count; i++) {
-				memcpy(skb_put(skb, sb->len),
-				       sb->data, sb->len);
+				
+				       skb_copy_from_linear_data(sb, skb_put(skb,sb->len), sb->len);
 				sb = sb->next;
 			}
 
--- /home/julia/linux-2.6/drivers/ieee1394/eth1394.c	2007-07-20 17:45:46.000000000 +0200
+++ /tmp/cocci-output-12985-a74a85-eth1394.c	2007-07-23 15:02:29.000000000 +0200
@@ -1595,7 +1595,8 @@
 
 	/* Get rid of the fake eth1394 header, but first make a copy.
 	 * We might need to rebuild the header on tx failure. */
-	memcpy(&hdr_buf, skb->data, sizeof(hdr_buf));
+	
+	skb_copy_from_linear_data(skb, &hdr_buf, sizeof(hdr_buf));
 	skb_pull(skb, ETH1394_HLEN);
 
 	proto = hdr_buf.h_proto;

 
--- /home/julia/linux-2.6/drivers/net/3c527.c	2007-06-02 22:32:19.000000000 +0200
+++ /tmp/cocci-output-12985-e31f6d-3c527.c	2007-07-23 15:05:43.000000000 +0200
@@ -1184,8 +1184,8 @@
 				}
 
 				skb_reserve(skb,2);
-				memcpy(skb_put(skb, length),
-				       lp->rx_ring[rx_ring_tail].skb->data, length);
+				
+				       skb_copy_from_linear_data(lp->rx_ring[rx_ring_tail].skb, skb_put(skb,length), length);
 			}
 
 			skb->protocol=eth_type_trans(skb,dev);
--- /home/julia/linux-2.6/drivers/net/3c59x.c	2007-07-12 08:07:00.000000000 +0200
+++ /tmp/cocci-output-12985-8cf603-3c59x.c	2007-07-23 15:05:44.000000000 +0200
@@ -2493,9 +2493,8 @@
 				skb_reserve(skb, 2);	/* Align IP on 16 byte boundaries */
 				pci_dma_sync_single_for_cpu(VORTEX_PCI(vp), dma, PKT_BUF_SZ, PCI_DMA_FROMDEVICE);
 				/* 'skb_put()' points to the start of sk_buff data area. */
-				memcpy(skb_put(skb, pkt_len),
-					   vp->rx_skbuff[entry]->data,
-					   pkt_len);
+				
+					   skb_copy_from_linear_data(vp->rx_skbuff[entry], skb_put(skb,pkt_len), pkt_len);
 				pci_dma_sync_single_for_device(VORTEX_PCI(vp), dma, PKT_BUF_SZ, PCI_DMA_FROMDEVICE);
 				vp->rx_copy++;
 			} else {
--- /home/julia/linux-2.6/drivers/net/fealnx.c	2007-07-20 17:45:48.000000000 +0200
+++ /tmp/cocci-output-12985-3d4b62-fealnx.c	2007-07-23 15:06:38.000000000 +0200
@@ -1731,8 +1731,8 @@
 					np->cur_rx->skbuff->data, pkt_len);
 				skb_put(skb, pkt_len);
 #else
-				memcpy(skb_put(skb, pkt_len),
-					np->cur_rx->skbuff->data, pkt_len);
+				
+					skb_copy_from_linear_data(np->cur_rx->skbuff, skb_put(skb,pkt_len), pkt_len);
 #endif
 				pci_dma_sync_single_for_device(np->pci_dev,
 							       np->cur_rx->buffer,
--- /home/julia/linux-2.6/drivers/net/rrunner.c	2007-07-12 08:07:00.000000000 +0200
+++ /tmp/cocci-output-12985-9f37b4-rrunner.c	2007-07-23 15:07:22.000000000 +0200
@@ -995,8 +995,8 @@
 								    pkt_len,
 								    PCI_DMA_FROMDEVICE);
 
-					memcpy(skb_put(skb, pkt_len),
-					       rx_skb->data, pkt_len);
+					
+					       skb_copy_from_linear_data(rx_skb, skb_put(skb,pkt_len), pkt_len);
 
 					pci_dma_sync_single_for_device(rrpriv->pci_dev,
 								       desc->addr.addrlo,
--- /home/julia/linux-2.6/drivers/net/tulip/interrupt.c	2007-07-20 17:45:51.000000000 +0200
+++ /tmp/cocci-output-12985-becb2f-interrupt.c	2007-07-23 15:08:00.000000000 +0200
@@ -201,9 +201,8 @@
                                                         pkt_len);
                                        skb_put(skb, pkt_len);
 #else
-                                       memcpy(skb_put(skb, pkt_len),
-                                              tp->rx_buffers[entry].skb->data,
-                                              pkt_len);
+                                       
+                                              skb_copy_from_linear_data(tp->rx_buffers[entry].skb, skb_put(skb,pkt_len), pkt_len);
 #endif
                                        pci_dma_sync_single_for_device(tp->pdev,
 								      tp->rx_buffers[entry].mapping,
@@ -424,9 +423,8 @@
 						 pkt_len);
 				skb_put(skb, pkt_len);
 #else
-				memcpy(skb_put(skb, pkt_len),
-				       tp->rx_buffers[entry].skb->data,
-				       pkt_len);
+				
+				       skb_copy_from_linear_data(tp->rx_buffers[entry].skb, skb_put(skb,pkt_len), pkt_len);
 #endif
 				pci_dma_sync_single_for_device(tp->pdev,
 							       tp->rx_buffers[entry].mapping,
--- /home/julia/linux-2.6/drivers/net/wan/farsync.c	2007-07-20 17:45:52.000000000 +0200
+++ /tmp/cocci-output-12985-046492-farsync.c	2007-07-23 15:08:16.000000000 +0200
@@ -1427,8 +1427,8 @@
 					dev->trans_start = jiffies;
 				} else {
 					/* Or do it through dma */
-					memcpy(card->tx_dma_handle_host,
-					       skb->data, skb->len);
+					
+					       skb_copy_from_linear_data(skb, card->tx_dma_handle_host, skb->len);
 					card->dma_port_tx = port;
 					card->dma_len_tx = skb->len;
 					card->dma_txpos = port->txpos;
--- /home/julia/linux-2.6/drivers/net/wireless/libertas/if_usb.c	2007-06-26 07:21:45.000000000 +0200
+++ /tmp/cocci-output-12985-527b36-if_usb.c	2007-07-23 15:08:33.000000000 +0200
@@ -480,8 +480,8 @@
 	}
 
 	if (cardp->bootcmdresp == 0) {
-		memcpy (&bootcmdresp, skb->data + IPFIELD_ALIGN_OFFSET,
-			sizeof(bootcmdresp));
+		
+			skb_copy_from_linear_data_offset(skb, IPFIELD_ALIGN_OFFSET, &bootcmdresp, sizeof(bootcmdresp));
 		if (le16_to_cpu(cardp->udev->descriptor.bcdDevice) < 0x3106) {
 			kfree_skb(skb);
 			if_usb_submit_rx_urb_fwload(priv);
@@ -519,8 +519,8 @@
 		return;
 	}
 
-	memcpy(syncfwheader, skb->data + IPFIELD_ALIGN_OFFSET,
-			sizeof(struct fwsyncheader));
+	
+			skb_copy_from_linear_data_offset(skb, IPFIELD_ALIGN_OFFSET, syncfwheader, sizeof(struct fwsyncheader));
 
 	if (!syncfwheader->cmd) {
 		/*
--- /home/julia/linux-2.6/drivers/net/bfin_mac.c	2007-07-20 17:45:47.000000000 +0200
+++ /tmp/cocci-output-12985-56d9bd-bfin_mac.c	2007-07-23 15:09:06.000000000 +0200
@@ -553,8 +553,8 @@
 	} else {
 		*((unsigned short *)(current_tx_ptr->packet)) =
 		    (unsigned short)(skb->len);
-		memcpy((char *)(current_tx_ptr->packet + 2), skb->data,
-		       (skb->len));
+		
+		       skb_copy_from_linear_data(skb, (current_tx_ptr->packet+2), (skb->len));
 		current_tx_ptr->desc_a.start_addr =
 		    (unsigned long)current_tx_ptr->packet;
 		if (current_tx_ptr->status.status_word != 0)
--- /home/julia/linux-2.6/drivers/net/netxen/netxen_nic_main.c	2007-07-20 17:45:50.000000000 +0200
+++ /tmp/cocci-output-12985-eea4e3-netxen_nic_main.c	2007-07-23 15:09:18.000000000 +0200
@@ -1159,8 +1159,8 @@
 		hwdesc = &hw->cmd_desc_head[producer];
 
 		/* copy the first 64 bytes */
-		memcpy(((void *)hwdesc) + 2,
-		       (void *)(skb->data), first_hdr_len);
+		
+		       skb_copy_from_linear_data(skb, ((void *)hwdesc)+2, first_hdr_len);
 		producer = get_next_index(producer, max_tx_desc_count);
 
 		if (more_hdr) {
--- /home/julia/linux-2.6/drivers/net/ps3_gelic_net.c	2007-07-12 08:07:00.000000000 +0200
+++ /tmp/cocci-output-12985-5e89ba-ps3_gelic_net.c	2007-07-23 15:09:20.000000000 +0200
@@ -663,7 +663,8 @@
 	if (skb->len < GELIC_NET_VLAN_POS)
 		return -EINVAL;
 
-	memcpy(&descr->vlan, skb->data, GELIC_NET_VLAN_POS);
+	
+	skb_copy_from_linear_data(skb, &descr->vlan, GELIC_NET_VLAN_POS);
 	if (card->vlan_index != -1) {
 		descr->vlan.h_vlan_proto = htons(ETH_P_8021Q); /* vlan 0x8100*/
 		descr->vlan.h_vlan_TCI = htons(card->vlan_id[card->vlan_index]);
--- /home/julia/linux-2.6/drivers/s390/net/claw.c	2007-07-20 17:45:56.000000000 +0200
+++ /tmp/cocci-output-12985-51b51f-claw.c	2007-07-23 15:09:51.000000000 +0200
@@ -442,8 +442,8 @@
 		new_skb->cb[1] = 'P'; /* every skb on queue has pack header */
 		while ((pk_ind) && (held_skb != NULL)) {
 			if (held_skb->len+so_far <= p_env->write_size-8) {
-				memcpy(skb_put(new_skb,held_skb->len),
-					held_skb->data,held_skb->len);
+				
+					skb_copy_from_linear_data(held_skb, skb_put(new_skb,held_skb->len), held_skb->len);
 				privptr->stats.tx_packets++;
 				so_far += held_skb->len;
 				pkt_cnt++;
--- /home/julia/linux-2.6/drivers/s390/net/ctcmain.c	2007-06-02 22:32:27.000000000 +0200
+++ /tmp/cocci-output-12985-630a76-ctcmain.c	2007-07-23 15:09:52.000000000 +0200
@@ -2237,8 +2237,8 @@
 				ctc_clear_busy(ch->netdev);
 				return -ENOMEM;
 			} else {
-				memcpy(skb_put(nskb, skb->len),
-				       skb->data, skb->len);
+				
+				       skb_copy_from_linear_data(skb, skb_put(nskb,skb->len), skb->len);
 				atomic_inc(&nskb->users);
 				atomic_dec(&skb->users);
 				dev_kfree_skb_irq(skb);
--- /home/julia/linux-2.6/drivers/s390/net/netiucv.c	2007-06-26 07:21:45.000000000 +0200
+++ /tmp/cocci-output-12985-5b7737-netiucv.c	2007-07-23 15:09:54.000000000 +0200
@@ -1171,8 +1171,8 @@
 				return rc;
 			} else {
 				skb_reserve(nskb, NETIUCV_HDRLEN);
-				memcpy(skb_put(nskb, skb->len),
-				       skb->data, skb->len);
+				
+				       skb_copy_from_linear_data(skb, skb_put(nskb,skb->len), skb->len);
 			}
 			copied = 1;
 		}
--- /home/julia/linux-2.6/net/bluetooth/cmtp/capi.c	2007-06-02 22:32:44.000000000 +0200
+++ /tmp/cocci-output-12985-ce7b54-capi.c	2007-07-23 15:18:05.000000000 +0200
@@ -242,9 +242,8 @@
 			}
 
 			if (!info && ctrl) {
-				memcpy(&ctrl->profile,
-					skb->data + CAPI_MSG_BASELEN + 11,
-					sizeof(capi_profile));
+				
+					skb_copy_from_linear_data_offset(skb, CAPI_MSG_BASELEN + 11, &ctrl->profile, sizeof(capi_profile));
 				session->state = BT_CONNECTED;
 				capi_ctr_ready(ctrl);
 			}
--- /home/julia/linux-2.6/net/irda/irlap_frame.c	2007-07-20 17:46:06.000000000 +0200
+++ /tmp/cocci-output-12985-7ecd6c-irlap_frame.c	2007-07-23 15:18:53.000000000 +0200
@@ -1251,7 +1251,8 @@
 
 	/* Copy info */
 	info = skb_put(tx_skb, cmd->len);
-	memcpy(info, cmd->data, cmd->len);
+	
+	skb_copy_from_linear_data(cmd, info, cmd->len);
 
 	/* Return to sender */
 	irlap_wait_min_turn_around(self, &self->qos_tx);
--- /home/julia/linux-2.6/net/iucv/af_iucv.c	2007-07-20 17:46:06.000000000 +0200
+++ /tmp/cocci-output-12985-e101f2-af_iucv.c	2007-07-23 15:19:26.000000000 +0200
@@ -989,7 +989,8 @@
 		if (!nskb)
 			return -ENOMEM;
 
-		memcpy(nskb->data, skb->data + copied, size);
+		
+		skb_copy_from_linear_data_offset(skb, copied, nskb->data, size);
 		copied += size;
 		dataleft -= size;
 
--- /home/julia/linux-2.6/net/mac80211/ieee80211.c	2007-07-20 17:46:06.000000000 +0200
+++ /tmp/cocci-output-12985-b00e7e-ieee80211.c	2007-07-23 15:19:29.000000000 +0200
@@ -552,7 +552,8 @@
 		skb_reserve(frag, tx->local->tx_headroom +
 				  IEEE80211_ENCRYPT_HEADROOM);
 		fhdr = (struct ieee80211_hdr *) skb_put(frag, hdrlen);
-		memcpy(fhdr, first->data, hdrlen);
+		
+		skb_copy_from_linear_data(first, fhdr, hdrlen);
 		if (i == num_fragm - 2)
 			fhdr->frame_control &= cpu_to_le16(~IEEE80211_FCTL_MOREFRAGS);
 		fhdr->seq_ctrl = cpu_to_le16(seq | ((i + 1) & IEEE80211_SCTL_FRAG));
@@ -1772,29 +1773,37 @@
 		   sdata->type == IEEE80211_IF_TYPE_VLAN)) {
 		fc |= IEEE80211_FCTL_FROMDS;
 		/* DA BSSID SA */
-		memcpy(hdr.addr1, skb->data, ETH_ALEN);
+		
+		skb_copy_from_linear_data(skb, hdr.addr1, ETH_ALEN);
 		memcpy(hdr.addr2, dev->dev_addr, ETH_ALEN);
-		memcpy(hdr.addr3, skb->data + ETH_ALEN, ETH_ALEN);
+		
+		skb_copy_from_linear_data_offset(skb, ETH_ALEN, hdr.addr3, ETH_ALEN);
 		hdrlen = 24;
 	} else if (sdata->type == IEEE80211_IF_TYPE_WDS) {
 		fc |= IEEE80211_FCTL_FROMDS | IEEE80211_FCTL_TODS;
 		/* RA TA DA SA */
 		memcpy(hdr.addr1, sdata->u.wds.remote_addr, ETH_ALEN);
 		memcpy(hdr.addr2, dev->dev_addr, ETH_ALEN);
-		memcpy(hdr.addr3, skb->data, ETH_ALEN);
-		memcpy(hdr.addr4, skb->data + ETH_ALEN, ETH_ALEN);
+		
+		skb_copy_from_linear_data(skb, hdr.addr3, ETH_ALEN);
+		
+		skb_copy_from_linear_data_offset(skb, ETH_ALEN, hdr.addr4, ETH_ALEN);
 		hdrlen = 30;
 	} else if (sdata->type == IEEE80211_IF_TYPE_STA) {
 		fc |= IEEE80211_FCTL_TODS;
 		/* BSSID SA DA */
 		memcpy(hdr.addr1, sdata->u.sta.bssid, ETH_ALEN);
-		memcpy(hdr.addr2, skb->data + ETH_ALEN, ETH_ALEN);
-		memcpy(hdr.addr3, skb->data, ETH_ALEN);
+		
+		skb_copy_from_linear_data_offset(skb, ETH_ALEN, hdr.addr2, ETH_ALEN);
+		
+		skb_copy_from_linear_data(skb, hdr.addr3, ETH_ALEN);
 		hdrlen = 24;
 	} else if (sdata->type == IEEE80211_IF_TYPE_IBSS) {
 		/* DA SA BSSID */
-		memcpy(hdr.addr1, skb->data, ETH_ALEN);
-		memcpy(hdr.addr2, skb->data + ETH_ALEN, ETH_ALEN);
+		
+		skb_copy_from_linear_data(skb, hdr.addr1, ETH_ALEN);
+		
+		skb_copy_from_linear_data_offset(skb, ETH_ALEN, hdr.addr2, ETH_ALEN);
 		memcpy(hdr.addr3, sdata->u.sta.bssid, ETH_ALEN);
 		hdrlen = 24;
 	} else {
@@ -3473,7 +3482,8 @@
 		}
 	}
 	while ((skb = __skb_dequeue(&entry->skb_list))) {
-		memcpy(skb_put(rx->skb, skb->len), skb->data, skb->len);
+		
+		skb_copy_from_linear_data(skb, skb_put(rx->skb,skb->len), skb->len);
 		dev_kfree_skb(skb);
 	}
 
--- /home/julia/linux-2.6/net/mac80211/wep.c	2007-06-02 22:32:46.000000000 +0200
+++ /tmp/cocci-output-12985-2cf79e-wep.c	2007-07-23 15:19:32.000000000 +0200
@@ -261,7 +261,8 @@
 		return -1;
 
 	/* Prepend 24-bit IV to RC4 key */
-	memcpy(rc4key, skb->data + hdrlen, 3);
+	
+	skb_copy_from_linear_data_offset(skb, hdrlen, rc4key, 3);
 
 	/* Copy rest of the WEP key (the secret part) */
 	memcpy(rc4key + 3, key->key, key->keylen);
