Spec. file is: specfile
Parsed two: inode.c.orig, inode.c.new
Parsed two: mconsole_kern.c.orig, mconsole_kern.c.new
Comment
Parsed two: mtdsuper.c.orig, mtdsuper.c.new
Parsed two: mntpt.c.orig, mntpt.c.new
Parsed two: block_dev.c.orig, block_dev.c.new
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Reading file pair block_dev.c.orig block_dev.c.new
Reading file pair mntpt.c.orig mntpt.c.new
Reading file pair mtdsuper.c.orig mtdsuper.c.new
Reading file pair mconsole_kern.c.orig mconsole_kern.c.new
Reading file pair inode.c.orig inode.c.new
[Main] Common subterms: [Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(fcntl.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(kmod.h)],includeN[inc_elem(linux),inc_elem(major.h)],includeN[inc_elem(linux),inc_elem(smp_lock.h)],includeN[inc_elem(linux),inc_elem(highmem.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(blkpg.h)],includeN[inc_elem(linux),inc_elem(buffer_head.h)],includeN[inc_elem(linux),inc_elem(writeback.h)],includeN[inc_elem(linux),inc_elem(mpage.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(uio.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(log2.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(internal.h)],decl(N/H),def[fname(BDEV_I),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(container_of),exp:ident(inode),argtype(N/H),exp:ident(vfs_inode)]]]],def[fname(I_BDEV),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)]]]],mtop(N/H),def[fname(max_block),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sz),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp[grammar(binary_arith),aop(>>),exp:ident(sz),exp:ident(sizebits)]]]],estmt(NONE)],st_return[exp:ident(retval)]]],def[fname(kill_bdev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],ident(nrpages)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bh_lrus)]],estmt[exp[grammar(call),exp:ident(truncate_inode_pages),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],exp:const:int(0)]]]],def[fname(set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(PAGE_SIZE)],exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(512)]],exp:??(N/H)],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(call),exp:ident(bdev_hardsect_size),exp:ident(bdev)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(sb_set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(call),exp:ident(set_blocksize),exp[grammar(record_ptr),exp:ident(sb),ident(s_bdev)],exp:ident(size)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],st_return[exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)]]]],mtop(N/H),def[fname(sb_min_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(minsize)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(minsize)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sb_set_blocksize),exp:ident(sb),exp:ident(size)]]]],mtop(N/H),def[fname(blkdev_get_block),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(iblock),exp[grammar(call),exp:ident(max_block),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],st_return[exp:const:int(0)]]],def[fname(blkdev_get_blocks),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(iblock),exp:ident(max_blocks)],exp:ident(end_block)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp[grammar(binary_arith),aop(-),exp:ident(end_block),exp:ident(iblock)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp:const:int(0)]]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_size)],exp[grammar(binary_arith),aop(<<),exp:ident(max_blocks),exp[grammar(record_ptr),exp:ident(inode),ident(i_blkbits)]]]],sel_if[exp:ident(max_blocks),estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[exp[grammar(call),exp:ident(blockdev_direct_IO_no_locking),exp:ident(rw),exp:ident(iocb),exp:ident(inode),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)],exp:ident(iov),exp:ident(offset),exp:ident(nr_segs),exp:ident(blkdev_get_blocks),exp:ident(NULL)]]]],def[fname(blk_end_aio),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bio),fulltype[typec(N/H)]],param[reg(),name(error),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(bio_data_dir),exp:ident(bio)],exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_check_pages_dirty),exp:ident(bio)]],{}stmt[estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]]]],sel_if[exp:ident(error),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:const:int(0)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],define(N/H),decl(N/H),define(N/H),def[fname(blk_get_page),funtype[fulltype[typec(N/H)],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(count),fulltype[typec(N/H)]],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp[grammar(record_ptr),exp:ident(pvec),ident(nr)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(PAGES_SPANNED),exp:ident(addr),exp:ident(count)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(min),exp:ident(nr_pages),exp:ident(VEC_SIZE)]]],estmt[exp[grammar(call),exp:ident(down_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_user_pages),exp:ident(current),exp[grammar(record_ptr),exp:ident(current),ident(mm)],exp:ident(addr),exp:ident(nr_pages),exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],exp:const:int(0),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(up_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(nr)],exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp:const:int(0)]]],estmt(NONE)],st_return[exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)]]]],def[fname(blk_unget_page),funtype[fulltype[ctype[btype(void)]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)],exp:ident(page)]]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(nr)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(idx)],exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(pos),exp:ident(blocksize_mask)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(pos),exp:ident(nbytes)],exp:ident(size)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:ident(pos)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:ident(nbytes)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(atomic_set),exp:ident(bio_count),exp:const:int(1)]],while[exp:ident(nbytes),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(binary_arith),aop(/),exp[grammar(binary_arith),aop(-),exp[grammar(binary_arith),aop(+),exp:ident(nbytes),exp:ident(PAGE_SIZE)],exp:const:int(1)],exp:ident(PAGE_SIZE)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(max),exp:ident(nvec),exp[grammar(binary_arith),aop(-),exp:ident(nr_segs),exp:ident(seg)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(min),exp:ident(nvec),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bio),exp[grammar(call),exp:ident(bio_alloc),exp:ident(GFP_KERNEL),exp:ident(nvec)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_end_io)],exp:ident(blk_end_aio)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_private)],exp:ident(iocb)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_sector)],exp[grammar(binary_arith),aop(>>),exp:ident(pos),exp:ident(blkbits)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:ident(cur_off)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(count),exp:ident(cur_len)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp:ident(count)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(blk_get_page),exp:ident(addr),exp:ident(count),exp:ident(rw),exp:&ref:exp:ident(pvec)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)]],statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(bio_add_page),exp:ident(bio),exp:ident(page),exp:ident(cur_len),exp:ident(cur_off)],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(pos),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(addr),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(count),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(nbytes),exp:ident(cur_len)]],sel_if[exp:ident(count),statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:ident(nr_segs)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(iov),exp:ident(seg)],ident(iov_len)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(&),exp:ident(addr),exp:ident(blocksize_mask)],exp[grammar(binary_arith),aop(&),exp:ident(count),exp:ident(blocksize_mask)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(call),exp:ident(min),exp:ident(count),exp:ident(nbytes)]]],statem(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(blk_unget_page),exp:ident(page),exp:&ref:exp:ident(pvec)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_set_pages_dirty),exp:ident(bio)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(atomic_inc),exp:ident(bio_count)]],estmt[exp[grammar(call),exp:ident(submit_bio),exp:ident(rw),exp:ident(bio)]]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)]]],estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_pos)],exp:ident(nbytes)]],estmt[exp[grammar(call),exp:ident(blk_run_address_space),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)]]],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp:ident(nbytes),exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)],statem(N/H),estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(atomic_read),exp:ident(bio_count)],exp:const:int(1)],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]],estmt(NONE)],statem(N/H)]],def[fname(blkdev_writepage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(wbc),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_write_full_page),exp:ident(page),exp:ident(blkdev_get_block),exp:ident(wbc)]]]],def[fname(blkdev_readpage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_read_full_page),exp:ident(page),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_begin),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(pagep),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(pagep),exp:ident(NULL)]],st_return[exp[grammar(call),exp:ident(block_write_begin),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(flags),exp:ident(pagep),exp:ident(fsdata),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_end),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(copied),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(block_write_end),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(copied),exp:ident(page),exp:ident(fsdata)]]],estmt[exp[grammar(call),exp:ident(unlock_page),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],st_return[exp:ident(ret)]]],def[fname(block_llseek),funtype[fulltype[typec(N/H)],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(origin),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(bd_inode)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:ident(size)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)],exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],st_return[exp:ident(retval)]]],def[fname(block_fsync),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(filp),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(datasync),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(sync_blockdev),exp[grammar(call),exp:ident(I_BDEV),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_mapping)],ident(host)]]]]]],decl(N/H),NCP(N/H),def[fname(bdev_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(bdev_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(bdi),ident(bdev)],ident(bd_inode_backing_dev_info)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(bdev_cachep),exp:ident(bdi)]]]],def[fname(init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(foo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:ident(bdev),exp:const:int(0),exp:sizeof:exp:*ref:exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(mutex_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(sema_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mount_sem)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_inodes)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_list)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(__bd_forget),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_devices)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_bdev)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_data)]]]]],NCP(N/H),decl(N/H),def[fname(bd_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_pseudo),exp:ident(fs_type),exp:const:string(bdev:),exp:&ref:exp:ident(bdev_sops),exp:const:int(0x62646576),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),decl(N/H),NCP(N/H),def[fname(hash),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(MAJOR),exp:ident(dev)],exp[grammar(call),exp:ident(MINOR),exp:ident(dev)]]]]],def[fname(bdev_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]]]],def[fname(bdev_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(bdput),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(iput),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]]]],mtop(N/H),NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),def[fname(bdev_get_kobj),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(dev)],ident(kobj)]]]]]],def[fname(bdev_get_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(holder_dir)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(holder_dir)]]]]]],def[fname(add_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sysfs_create_link),exp:ident(from),exp:ident(to),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],def[fname(del_symlink),funtype[fulltype[ctype[btype(void)]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(sysfs_remove_link),exp:ident(from),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],decl(N/H),def[fname(bd_holder_grab_dirs),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],ident(parent)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)],exp[grammar(call),exp:ident(bdev_get_kobj),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(call),exp:ident(bdev_get_holder),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(1)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:const:int(0)]]],def[fname(bd_holder_release_dirs),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]]],def[fname(alloc_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(kzalloc),exp:sizeof:exp:*ref:exp:ident(bo),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(count)],exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp:ident(kobj)]],st_return[exp:ident(bo)]]],def[fname(free_bd_holder),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp:ident(bo)]]]],def[fname(find_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(add_bd_holder),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]]],sel_if[exp:ident(err),st_return[exp:ident(err)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(del_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],st_return[exp:ident(err)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bo),ident(list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],st_return[exp:const:int(0)]]],def[fname(del_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(bd_claim_by_kobject),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(alloc_bd_holder),exp:ident(kobj)]]],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(err),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(found),exp[grammar(call),exp:ident(find_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(found),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(err),estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp:ident(NULL)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(free_bd_holder),exp:ident(bo)]],st_return[exp:ident(err)]]],def[fname(bd_release_from_kobject),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(free_bd_holder),exp[grammar(call),exp:ident(del_bd_holder),exp:ident(bdev),exp:ident(kobj)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]]]],def[fname(bd_claim_by_disk),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(bd_claim_by_kobject),exp:ident(bdev),exp:ident(holder),exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]]],mtop(N/H),def[fname(bd_release_from_disk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release_from_kobject),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]],mtop(N/H),def[fname(open_by_devnum),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp:ident(bdev),estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags)]]],estmt(NONE)],st_return[exp[grammar(cond3),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)],exp:ident(bdev)]]]],mtop(N/H),def[fname(check_disk_change),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(__invalidate_device),exp:ident(bdev)],estmt[exp[grammar(call),exp:ident(printk),exp:const:string(VFS: busy inodes on changed media.\n)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],estmt[exp[grammar(call),exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(minors)],exp:const:int(1)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],exp:const:int(1)]],estmt(NONE)],st_return[exp:const:int(1)]]],mtop(N/H),def[fname(bd_set_size),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_size)],exp:ident(size)]],while[exp[grammar(binary_logi),logiop(??),exp:ident(bsize),exp:ident(PAGE_CACHE_SIZE)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp:ident(size),exp:ident(bsize)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(N/H),exp:ident(bsize),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(bsize)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(bsize)]]]]],mtop(N/H),decl(N/H),decl(N/H),def[fname(do_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)]]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(disk),exp[grammar(call),exp:ident(get_gendisk),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_dev)],exp:&ref:exp:ident(part)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(owner),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(owner)]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(disk)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)]],sel_if[exp:??(N/H),{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp[grammar(call),exp:ident(blk_get_backing_dev_info),exp:ident(bdev)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdi),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp:&ref:exp:ident(default_backing_dev_info)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:ident(bdi)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp:ident(disk),exp:ident(bdev)]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(whole),exp[grammar(call),exp:ident(bdget_disk),exp:ident(disk),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:ident(for_part)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(__blkdev_get),exp:ident(whole),exp[grammar(record_ptr),exp:ident(file),ident(f_mode)],exp[grammar(record_ptr),exp:ident(file),ident(f_flags)],exp:const:int(1)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(whole)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(disk),ident(part)],exp[grammar(binary_arith),aop(-),exp:ident(part),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(whole),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp:ident(p),ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(p)]],estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(bdev)]],estmt(NONE)]],estmt(NONE)]]],estmt[exp:??(N/H)],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(call),exp:ident(__blkdev_put),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],statem(N/H),estmt[exp[grammar(call),exp:ident(unlock_kernel)]],sel_if[exp:ident(ret),estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(__blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:&ref:exp:ident(fake_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_dentry),ident(d_inode)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]],st_return[exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:&ref:exp:ident(fake_file),exp:ident(for_part)]]]],def[fname(blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(filp),ident(f_flags)],exp:ident(O_LARGEFILE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdev),exp:ident(NULL)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:ident(filp),exp:const:int(0)]]],sel_if[exp:ident(res),st_return[exp:ident(res)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]],st_return[exp:ident(res)]]],def[fname(__blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],exp:ident(bd_inode),exp:ident(NULL)]]],estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(victim),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],sel_if[exp:ident(victim),estmt[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(victim),exp:const:int(1)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(bdev),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_holder)],exp:ident(filp)],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],def[fname(block_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],ident(host)],exp:ident(file),exp:ident(cmd),exp:ident(arg)]]]],decl(N/H),decl(N/H),def[fname(ioctl_by_bdev),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(KERNEL_DS)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(NULL),exp:ident(cmd),exp:ident(arg)]]],estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(old_fs)]],st_return[exp:ident(res)]]],mtop(N/H),def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]],def[fname(open_bdev_excl),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(holder),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(lookup_bdev),exp:ident(path)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(bdev)],st_return[exp:ident(bdev)],estmt(NONE)],sel_if[exp:??(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(mode),exp:ident(FMODE_WRITE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:const:int(0)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp[grammar(call),exp:ident(bdev_read_only),exp:ident(bdev)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(error),statem(N/H),estmt(NONE)],st_return[exp:ident(bdev)],statem(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]]]],mtop(N/H),def[fname(close_bdev_excl),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],mtop(N/H),def[fname(__invalidate_device),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sb),{}stmt[estmt[exp[grammar(call),exp:ident(shrink_dcache_sb),exp:ident(sb)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(invalidate_inodes),exp:ident(sb)]]],estmt[exp[grammar(call),exp:ident(drop_super),exp:ident(sb)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bdev),exp:ident(bdev)]],st_return[exp:ident(res)]]],mtop(N/H)]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(mtd),inc_elem(super.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],def[fname(get_sb_mtd_compare),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: Match on device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: No match, device %d (\"%s\"), device %d (\"%s\")\n),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(index)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(name)],exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_dev)],exp[grammar(call),exp:ident(MKDEV),exp:ident(MTD_BLOCK_MAJOR),exp[grammar(record_ptr),exp:ident(mtd),ident(index)]]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_aux),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtd),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(sb),exp[grammar(call),exp:ident(sget),exp:ident(fs_type),exp:ident(get_sb_mtd_compare),exp:ident(get_sb_mtd_set),exp:ident(mtd)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(sb)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: New superblock for device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(fill_super),exp:ident(sb),exp:ident(data),exp[grammar(cond3),exp[grammar(binary_arith),aop(&),exp:ident(flags),exp:ident(MS_SILENT)],exp:const:int(1),exp:const:int(0)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(sb),ident(s_umount)]]],estmt[exp[grammar(call),exp:ident(deactivate_super),exp:ident(sb)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(MS_ACTIVE)]],st_return[exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]]],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(get_sb_mtd_nr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtdnr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(0),exp:const:string(MTDSB: Device #%u doesn't appear to exist\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(mtd)]]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]]]],def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],mtop(N/H),def[fname(kill_mtd_super),funtype[fulltype[ctype[btype(void)]],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(generic_shutdown_super),exp:ident(sb)]],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(NULL)]]]],mtop(N/H)]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(|),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(dcache.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(crypto.h)],includeN[inc_elem(linux),inc_elem(fs_stack.h)],includeL[inc_elem(ecryptfs_kernel.h)],def[fname(lock_parent),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(call),exp:ident(dget),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)],exp:ident(I_MUTEX_PARENT)]],st_return[exp:ident(dir)]]],def[fname(unlock_parent),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],def[fname(unlock_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dir)]]]],def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_do_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(ecryptfs_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dir_dentry)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dir_dentry)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_create_underlying_file),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(__FUNCTION__),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(ecryptfs_dentry),exp[grammar(record_ptr),exp:ident(directory_inode),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Failure in ecryptfs_interpose\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),statem(N/H)]],def[fname(grow_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_file),exp:const:int(0),exp:sizeof:exp:ident(fake_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:ident(ecryptfs_dentry)]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(tmp_file_info),exp:const:int(0),exp:sizeof:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_file),exp:&ref:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(lower_file)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_file),exp:ident(zero_virt),exp:const:int(0),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp:ident(ecryptfs_inode),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(ecryptfs_inode)]]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(crypt_stat)],ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_initialize_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ecryptfs_dentry),ident(d_inode)],ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(This is a directory\n)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Initializing crypto context\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_new_file_context),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_metadata),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(grow_file),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)],statem(N/H)]],def[fname(ecryptfs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_do_create),exp:ident(directory_inode),exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:ident(rc)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_WARNING),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_initialize_file),exp:ident(ecryptfs_dentry)]]],statem(N/H)]],def[fname(ecryptfs_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dentry),ident(d_op)],exp:&ref:exp:ident(ecryptfs_dops)]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(1)],exp:??(N/H)],exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(2)],exp:??(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_namelen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:&ref:exp:ident(encoded_name)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_namelen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_namelen)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(encoded_name),exp:ident(encoded_namelen)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(lookup_one_len),exp:ident(encoded_name),exp:ident(lower_dir_dentry),exp[grammar(binary_arith),aop(-),exp:ident(encoded_namelen),exp:const:int(1)]]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_name)]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dentry)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(ERR from lower_dentry\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_mnt),exp[grammar(call),exp:ident(mntget),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(lower_dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_name)],ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_atime),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_private),exp:ident(dentry),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_dentry_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower),exp:ident(dentry),exp:ident(lower_dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower_mnt),exp:ident(dentry),exp:ident(lower_mnt)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(NULL)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(1)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Error interposing\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a directory; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISLNK),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a symlink; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(special_file),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a special file; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page_virt),exp[grammar(call),exp:ident(kmem_cache_zalloc),exp:ident(ecryptfs_header_cache_2),exp:ident(GFP_USER)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Cannot ecryptfs_kmalloc a page\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_set_default_sizes),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_header_region),exp:ident(page_virt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_xattr_region),exp:ident(page_virt),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(mount_crypt_stat),ident(flags)],exp:ident(ECRYPTFS_ENCRYPTED_VIEW_ENABLED)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)],exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(memcpy),exp:&ref:exp:ident(file_size),exp:ident(page_virt),exp:sizeof:exp:ident(file_size)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(be64_to_cpu),exp:ident(file_size)]]]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)]],def[fname(ecryptfs_link),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size_save),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_link),exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_new_dentry),exp:ident(new_dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(new_dentry),ident(d_inode)],exp:ident(file_size_save)]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(new_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(old_dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_unlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_unlink),exp:ident(lower_dir_inode),exp:ident(lower_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp:ident(lower_dir_inode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_ctime)],exp[grammar(record_ptr),exp:ident(dir),ident(i_ctime)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(symname),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mode),exp:ident(S_IALLUGO)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_symlen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp:ident(symname),exp[grammar(call),exp:ident(strlen),exp:ident(symname)],exp:&ref:exp:ident(encoded_symname)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_symlen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_symlen)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_symlink),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(encoded_symname),exp:ident(mode)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_symname)]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mkdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rmdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_delete),exp:ident(lower_dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(unlock_dir),exp:ident(lower_dir_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mknod),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mknod),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode),exp:ident(dev)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rename),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dir),fulltype[typec(N/H)]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(new_dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(call),exp:ident(lock_rename),exp:ident(lower_old_dir_dentry),exp:ident(lower_new_dir_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rename),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(new_dir),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(NULL)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_dir),exp:ident(old_dir)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(old_dir),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(NULL)]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_old_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],st_return[exp:ident(rc)]]],NCP(N/H),NCP(N/H),def[fname(ecryptfs_put_link),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp[grammar(call),exp:ident(nd_get_link),exp:ident(nd)]]]]],def[fname(upper_size_to_lower_size),funtype[fulltype[typec(N/H)],param[reg(),name(crypt_stat),fulltype[typec(N/H)]],param[reg(),name(upper_size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(upper_size),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(num_extents),exp[grammar(binary_arith),aop(>>),exp:ident(upper_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_shift)]]]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(upper_size),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(+=),exp:ident(lower_size),exp[grammar(binary_arith),aop(*),exp:ident(num_extents),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_size)]]]]],estmt(NONE)],st_return[exp:ident(lower_size)]]],def[fname(ecryptfs_truncate),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(new_length),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(eq),exp:ident(new_length),exp:ident(i_size)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_ecryptfs_file),exp:const:int(0),exp:sizeof:exp:ident(fake_ecryptfs_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_ecryptfs_file),ident(f_path)],ident(dentry)],exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_file_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(lower_file)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_length),exp:ident(i_size)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zero),exp[grammar(binary_arith),aop(-),exp:ident(new_length),exp:const:int(1)],exp:const:int(1)]]]],{}stmt[statem(N/H),sel_if[exp:ident(num_zeros),{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(zeros_virt),exp[grammar(call),exp:ident(kzalloc),exp:ident(num_zeros),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zeros_virt),exp:ident(new_length),exp:ident(num_zeros)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(zeros_virt)]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp:ident(inode),exp:ident(new_length)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(inode)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_before_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(i_size)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_after_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(new_length)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(lower_size_after_truncate),exp:ident(lower_size_before_truncate)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],exp:ident(lower_size_after_truncate)]],estmt(NONE)]]],statem(N/H),statem(N/H)]],def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(ia),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_init_crypt_stat),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(S_ISREG),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_metadata),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_truncate),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(ia),ident(ia_size)]]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(ia->ia_valid = [%x]\n),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(rc),exp:const:int(0)],statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp[grammar(binary_arith),aop(|),exp:ident(ATTR_KILL_SUID),exp:ident(ATTR_KILL_SGID)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(notify_change),exp:ident(lower_dentry),exp:ident(ia)]]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_setxattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(setxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size),exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr_lower),funtype[fulltype[typec(N/H)],param[reg(),name(lower_dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(getxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(ecryptfs_getxattr_lower),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)],exp:ident(name),exp:ident(value),exp:ident(size)]]]],def[fname(ecryptfs_listxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(list),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(listxattr)],exp:ident(lower_dentry),exp:ident(list),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_removexattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(removexattr)],exp:ident(lower_dentry),exp:ident(name)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_inode_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(candidate_lower_inode),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:??(N/H)],st_return[exp:const:int(1)],st_return[exp:const:int(0)]]]],def[fname(ecryptfs_inode_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(lower_inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_init_inode),exp:ident(inode),exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H)]
grammar(call) estmt(NONE) simple_assi(=) grammar(assign) statem(N/H) fulltype[typec(N/H)] typec(N/H) reg() fulltype[ctype[btype[itype[sgn(signed),base(int)]]]] ctype[btype[itype[sgn(signed),base(int)]]] btype[itype[sgn(signed),base(int)]] itype[sgn(signed),base(int)] base(int) sgn(signed) fulltype[ctype[btype(void)]] ctype[btype(void)] btype(void) exp:??(N/H) logiop(and) grammar(binary_logi) exp:const:int(0) exp:ident(IS_ERR) ident(mnt) exp:ident(nd) grammar(record_acc) grammar(record_ptr) grammar(binary_arith) ident(dentry) exp:ident(NULL) logiop(eq) exp:const:int(1) grammar(exp) grammar(&ref) logiop(??) aop(+) inc_elem(linux) 
[Main] Constructing all safe parts for 5 term pairs
[Main] Making safe parts for pair 1
prg2[includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(fcntl.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(kmod.h)],includeN[inc_elem(linux),inc_elem(major.h)],includeN[inc_elem(linux),inc_elem(smp_lock.h)],includeN[inc_elem(linux),inc_elem(highmem.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(blkpg.h)],includeN[inc_elem(linux),inc_elem(buffer_head.h)],includeN[inc_elem(linux),inc_elem(writeback.h)],includeN[inc_elem(linux),inc_elem(mpage.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(uio.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(log2.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(internal.h)],decl(N/H),def[fname(BDEV_I),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(container_of),exp:ident(inode),argtype(N/H),exp:ident(vfs_inode)]]]],def[fname(I_BDEV),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)]]]],mtop(N/H),def[fname(max_block),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sz),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp[grammar(binary_arith),aop(>>),exp:ident(sz),exp:ident(sizebits)]]]],estmt(NONE)],st_return[exp:ident(retval)]]],def[fname(kill_bdev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],ident(nrpages)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bh_lrus)]],estmt[exp[grammar(call),exp:ident(truncate_inode_pages),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],exp:const:int(0)]]]],def[fname(set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(PAGE_SIZE)],exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(512)]],exp:??(N/H)],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(call),exp:ident(bdev_hardsect_size),exp:ident(bdev)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(sb_set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(call),exp:ident(set_blocksize),exp[grammar(record_ptr),exp:ident(sb),ident(s_bdev)],exp:ident(size)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],st_return[exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)]]]],mtop(N/H),def[fname(sb_min_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(minsize)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(minsize)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sb_set_blocksize),exp:ident(sb),exp:ident(size)]]]],mtop(N/H),def[fname(blkdev_get_block),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(iblock),exp[grammar(call),exp:ident(max_block),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],st_return[exp:const:int(0)]]],def[fname(blkdev_get_blocks),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(iblock),exp:ident(max_blocks)],exp:ident(end_block)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp[grammar(binary_arith),aop(-),exp:ident(end_block),exp:ident(iblock)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp:const:int(0)]]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_size)],exp[grammar(binary_arith),aop(<<),exp:ident(max_blocks),exp[grammar(record_ptr),exp:ident(inode),ident(i_blkbits)]]]],sel_if[exp:ident(max_blocks),estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[exp[grammar(call),exp:ident(blockdev_direct_IO_no_locking),exp:ident(rw),exp:ident(iocb),exp:ident(inode),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)],exp:ident(iov),exp:ident(offset),exp:ident(nr_segs),exp:ident(blkdev_get_blocks),exp:ident(NULL)]]]],def[fname(blk_end_aio),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bio),fulltype[typec(N/H)]],param[reg(),name(error),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(bio_data_dir),exp:ident(bio)],exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_check_pages_dirty),exp:ident(bio)]],{}stmt[estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]]]],sel_if[exp:ident(error),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:const:int(0)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],define(N/H),decl(N/H),define(N/H),def[fname(blk_get_page),funtype[fulltype[typec(N/H)],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(count),fulltype[typec(N/H)]],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp[grammar(record_ptr),exp:ident(pvec),ident(nr)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(PAGES_SPANNED),exp:ident(addr),exp:ident(count)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(min),exp:ident(nr_pages),exp:ident(VEC_SIZE)]]],estmt[exp[grammar(call),exp:ident(down_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_user_pages),exp:ident(current),exp[grammar(record_ptr),exp:ident(current),ident(mm)],exp:ident(addr),exp:ident(nr_pages),exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],exp:const:int(0),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(up_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(nr)],exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp:const:int(0)]]],estmt(NONE)],st_return[exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)]]]],def[fname(blk_unget_page),funtype[fulltype[ctype[btype(void)]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)],exp:ident(page)]]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(nr)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(idx)],exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(pos),exp:ident(blocksize_mask)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(pos),exp:ident(nbytes)],exp:ident(size)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:ident(pos)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:ident(nbytes)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(atomic_set),exp:ident(bio_count),exp:const:int(1)]],while[exp:ident(nbytes),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(binary_arith),aop(/),exp[grammar(binary_arith),aop(-),exp[grammar(binary_arith),aop(+),exp:ident(nbytes),exp:ident(PAGE_SIZE)],exp:const:int(1)],exp:ident(PAGE_SIZE)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(max),exp:ident(nvec),exp[grammar(binary_arith),aop(-),exp:ident(nr_segs),exp:ident(seg)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(min),exp:ident(nvec),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bio),exp[grammar(call),exp:ident(bio_alloc),exp:ident(GFP_KERNEL),exp:ident(nvec)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_end_io)],exp:ident(blk_end_aio)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_private)],exp:ident(iocb)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_sector)],exp[grammar(binary_arith),aop(>>),exp:ident(pos),exp:ident(blkbits)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:ident(cur_off)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(count),exp:ident(cur_len)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp:ident(count)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(blk_get_page),exp:ident(addr),exp:ident(count),exp:ident(rw),exp:&ref:exp:ident(pvec)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)]],statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(bio_add_page),exp:ident(bio),exp:ident(page),exp:ident(cur_len),exp:ident(cur_off)],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(pos),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(addr),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(count),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(nbytes),exp:ident(cur_len)]],sel_if[exp:ident(count),statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:ident(nr_segs)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(iov),exp:ident(seg)],ident(iov_len)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(&),exp:ident(addr),exp:ident(blocksize_mask)],exp[grammar(binary_arith),aop(&),exp:ident(count),exp:ident(blocksize_mask)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(call),exp:ident(min),exp:ident(count),exp:ident(nbytes)]]],statem(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(blk_unget_page),exp:ident(page),exp:&ref:exp:ident(pvec)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_set_pages_dirty),exp:ident(bio)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(atomic_inc),exp:ident(bio_count)]],estmt[exp[grammar(call),exp:ident(submit_bio),exp:ident(rw),exp:ident(bio)]]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)]]],estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_pos)],exp:ident(nbytes)]],estmt[exp[grammar(call),exp:ident(blk_run_address_space),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)]]],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp:ident(nbytes),exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)],statem(N/H),estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(atomic_read),exp:ident(bio_count)],exp:const:int(1)],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]],estmt(NONE)],statem(N/H)]],def[fname(blkdev_writepage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(wbc),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_write_full_page),exp:ident(page),exp:ident(blkdev_get_block),exp:ident(wbc)]]]],def[fname(blkdev_readpage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_read_full_page),exp:ident(page),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_begin),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(pagep),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(pagep),exp:ident(NULL)]],st_return[exp[grammar(call),exp:ident(block_write_begin),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(flags),exp:ident(pagep),exp:ident(fsdata),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_end),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(copied),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(block_write_end),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(copied),exp:ident(page),exp:ident(fsdata)]]],estmt[exp[grammar(call),exp:ident(unlock_page),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],st_return[exp:ident(ret)]]],def[fname(block_llseek),funtype[fulltype[typec(N/H)],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(origin),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(bd_inode)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:ident(size)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)],exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],st_return[exp:ident(retval)]]],def[fname(block_fsync),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(filp),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(datasync),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(sync_blockdev),exp[grammar(call),exp:ident(I_BDEV),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_mapping)],ident(host)]]]]]],decl(N/H),NCP(N/H),def[fname(bdev_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(bdev_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(bdi),ident(bdev)],ident(bd_inode_backing_dev_info)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(bdev_cachep),exp:ident(bdi)]]]],def[fname(init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(foo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:ident(bdev),exp:const:int(0),exp:sizeof:exp:*ref:exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(mutex_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(sema_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mount_sem)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_inodes)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_list)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(__bd_forget),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_devices)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_bdev)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_data)]]]]],NCP(N/H),decl(N/H),def[fname(bd_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_pseudo),exp:ident(fs_type),exp:const:string(bdev:),exp:&ref:exp:ident(bdev_sops),exp:const:int(0x62646576),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),decl(N/H),NCP(N/H),def[fname(hash),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(MAJOR),exp:ident(dev)],exp[grammar(call),exp:ident(MINOR),exp:ident(dev)]]]]],def[fname(bdev_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]]]],def[fname(bdev_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(bdput),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(iput),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]]]],mtop(N/H),NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),def[fname(bdev_get_kobj),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(dev)],ident(kobj)]]]]]],def[fname(bdev_get_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(holder_dir)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(holder_dir)]]]]]],def[fname(add_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sysfs_create_link),exp:ident(from),exp:ident(to),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],def[fname(del_symlink),funtype[fulltype[ctype[btype(void)]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(sysfs_remove_link),exp:ident(from),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],decl(N/H),def[fname(bd_holder_grab_dirs),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],ident(parent)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)],exp[grammar(call),exp:ident(bdev_get_kobj),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(call),exp:ident(bdev_get_holder),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(1)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:const:int(0)]]],def[fname(bd_holder_release_dirs),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]]],def[fname(alloc_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(kzalloc),exp:sizeof:exp:*ref:exp:ident(bo),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(count)],exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp:ident(kobj)]],st_return[exp:ident(bo)]]],def[fname(free_bd_holder),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp:ident(bo)]]]],def[fname(find_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(add_bd_holder),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]]],sel_if[exp:ident(err),st_return[exp:ident(err)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(del_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],st_return[exp:ident(err)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bo),ident(list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],st_return[exp:const:int(0)]]],def[fname(del_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(bd_claim_by_kobject),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(alloc_bd_holder),exp:ident(kobj)]]],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(err),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(found),exp[grammar(call),exp:ident(find_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(found),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(err),estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp:ident(NULL)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(free_bd_holder),exp:ident(bo)]],st_return[exp:ident(err)]]],def[fname(bd_release_from_kobject),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(free_bd_holder),exp[grammar(call),exp:ident(del_bd_holder),exp:ident(bdev),exp:ident(kobj)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]]]],def[fname(bd_claim_by_disk),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(bd_claim_by_kobject),exp:ident(bdev),exp:ident(holder),exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]]],mtop(N/H),def[fname(bd_release_from_disk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release_from_kobject),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]],mtop(N/H),def[fname(open_by_devnum),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp:ident(bdev),estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags)]]],estmt(NONE)],st_return[exp[grammar(cond3),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)],exp:ident(bdev)]]]],mtop(N/H),def[fname(check_disk_change),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(__invalidate_device),exp:ident(bdev)],estmt[exp[grammar(call),exp:ident(printk),exp:const:string(VFS: busy inodes on changed media.\n)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],estmt[exp[grammar(call),exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(minors)],exp:const:int(1)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],exp:const:int(1)]],estmt(NONE)],st_return[exp:const:int(1)]]],mtop(N/H),def[fname(bd_set_size),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_size)],exp:ident(size)]],while[exp[grammar(binary_logi),logiop(??),exp:ident(bsize),exp:ident(PAGE_CACHE_SIZE)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp:ident(size),exp:ident(bsize)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(N/H),exp:ident(bsize),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(bsize)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(bsize)]]]]],mtop(N/H),decl(N/H),decl(N/H),def[fname(do_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)]]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(disk),exp[grammar(call),exp:ident(get_gendisk),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_dev)],exp:&ref:exp:ident(part)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(owner),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(owner)]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(disk)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)]],sel_if[exp:??(N/H),{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp[grammar(call),exp:ident(blk_get_backing_dev_info),exp:ident(bdev)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdi),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp:&ref:exp:ident(default_backing_dev_info)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:ident(bdi)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp:ident(disk),exp:ident(bdev)]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(whole),exp[grammar(call),exp:ident(bdget_disk),exp:ident(disk),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:ident(for_part)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(__blkdev_get),exp:ident(whole),exp[grammar(record_ptr),exp:ident(file),ident(f_mode)],exp[grammar(record_ptr),exp:ident(file),ident(f_flags)],exp:const:int(1)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(whole)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(disk),ident(part)],exp[grammar(binary_arith),aop(-),exp:ident(part),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(whole),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp:ident(p),ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(p)]],estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(bdev)]],estmt(NONE)]],estmt(NONE)]]],estmt[exp:??(N/H)],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(call),exp:ident(__blkdev_put),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],statem(N/H),estmt[exp[grammar(call),exp:ident(unlock_kernel)]],sel_if[exp:ident(ret),estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(__blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:&ref:exp:ident(fake_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_dentry),ident(d_inode)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]],st_return[exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:&ref:exp:ident(fake_file),exp:ident(for_part)]]]],def[fname(blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(filp),ident(f_flags)],exp:ident(O_LARGEFILE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdev),exp:ident(NULL)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:ident(filp),exp:const:int(0)]]],sel_if[exp:ident(res),st_return[exp:ident(res)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]],st_return[exp:ident(res)]]],def[fname(__blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],exp:ident(bd_inode),exp:ident(NULL)]]],estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(victim),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],sel_if[exp:ident(victim),estmt[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(victim),exp:const:int(1)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(bdev),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_holder)],exp:ident(filp)],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],def[fname(block_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],ident(host)],exp:ident(file),exp:ident(cmd),exp:ident(arg)]]]],decl(N/H),decl(N/H),def[fname(ioctl_by_bdev),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(KERNEL_DS)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(NULL),exp:ident(cmd),exp:ident(arg)]]],estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(old_fs)]],st_return[exp:ident(res)]]],mtop(N/H),def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]],def[fname(open_bdev_excl),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(holder),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(lookup_bdev),exp:ident(path)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(bdev)],st_return[exp:ident(bdev)],estmt(NONE)],sel_if[exp:??(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(mode),exp:ident(FMODE_WRITE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:const:int(0)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp[grammar(call),exp:ident(bdev_read_only),exp:ident(bdev)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(error),statem(N/H),estmt(NONE)],st_return[exp:ident(bdev)],statem(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]]]],mtop(N/H),def[fname(close_bdev_excl),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],mtop(N/H),def[fname(__invalidate_device),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sb),{}stmt[estmt[exp[grammar(call),exp:ident(shrink_dcache_sb),exp:ident(sb)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(invalidate_inodes),exp:ident(sb)]]],estmt[exp[grammar(call),exp:ident(drop_super),exp:ident(sb)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bdev),exp:ident(bdev)]],st_return[exp:ident(res)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(fcntl.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(kmod.h)],includeN[inc_elem(linux),inc_elem(major.h)],includeN[inc_elem(linux),inc_elem(smp_lock.h)],includeN[inc_elem(linux),inc_elem(highmem.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(blkpg.h)],includeN[inc_elem(linux),inc_elem(buffer_head.h)],includeN[inc_elem(linux),inc_elem(writeback.h)],includeN[inc_elem(linux),inc_elem(mpage.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(uio.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(log2.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(internal.h)],decl(N/H),def[fname(BDEV_I),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(container_of),exp:ident(inode),argtype(N/H),exp:ident(vfs_inode)]]]],def[fname(I_BDEV),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)]]]],mtop(N/H),def[fname(max_block),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sz),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp[grammar(binary_arith),aop(>>),exp:ident(sz),exp:ident(sizebits)]]]],estmt(NONE)],st_return[exp:ident(retval)]]],def[fname(kill_bdev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],ident(nrpages)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bh_lrus)]],estmt[exp[grammar(call),exp:ident(truncate_inode_pages),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],exp:const:int(0)]]]],def[fname(set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(PAGE_SIZE)],exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(512)]],exp:??(N/H)],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(call),exp:ident(bdev_hardsect_size),exp:ident(bdev)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(sb_set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(call),exp:ident(set_blocksize),exp[grammar(record_ptr),exp:ident(sb),ident(s_bdev)],exp:ident(size)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],st_return[exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)]]]],mtop(N/H),def[fname(sb_min_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(minsize)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(minsize)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sb_set_blocksize),exp:ident(sb),exp:ident(size)]]]],mtop(N/H),def[fname(blkdev_get_block),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(iblock),exp[grammar(call),exp:ident(max_block),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],st_return[exp:const:int(0)]]],def[fname(blkdev_get_blocks),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(iblock),exp:ident(max_blocks)],exp:ident(end_block)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp[grammar(binary_arith),aop(-),exp:ident(end_block),exp:ident(iblock)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp:const:int(0)]]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_size)],exp[grammar(binary_arith),aop(<<),exp:ident(max_blocks),exp[grammar(record_ptr),exp:ident(inode),ident(i_blkbits)]]]],sel_if[exp:ident(max_blocks),estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[exp[grammar(call),exp:ident(blockdev_direct_IO_no_locking),exp:ident(rw),exp:ident(iocb),exp:ident(inode),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)],exp:ident(iov),exp:ident(offset),exp:ident(nr_segs),exp:ident(blkdev_get_blocks),exp:ident(NULL)]]]],def[fname(blk_end_aio),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bio),fulltype[typec(N/H)]],param[reg(),name(error),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(bio_data_dir),exp:ident(bio)],exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_check_pages_dirty),exp:ident(bio)]],{}stmt[estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]]]],sel_if[exp:ident(error),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:const:int(0)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],define(N/H),decl(N/H),define(N/H),def[fname(blk_get_page),funtype[fulltype[typec(N/H)],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(count),fulltype[typec(N/H)]],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp[grammar(record_ptr),exp:ident(pvec),ident(nr)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(PAGES_SPANNED),exp:ident(addr),exp:ident(count)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(min),exp:ident(nr_pages),exp:ident(VEC_SIZE)]]],estmt[exp[grammar(call),exp:ident(down_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_user_pages),exp:ident(current),exp[grammar(record_ptr),exp:ident(current),ident(mm)],exp:ident(addr),exp:ident(nr_pages),exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],exp:const:int(0),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(up_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(nr)],exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp:const:int(0)]]],estmt(NONE)],st_return[exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)]]]],def[fname(blk_unget_page),funtype[fulltype[ctype[btype(void)]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)],exp:ident(page)]]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(nr)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(idx)],exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(pos),exp:ident(blocksize_mask)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(pos),exp:ident(nbytes)],exp:ident(size)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:ident(pos)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:ident(nbytes)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(atomic_set),exp:ident(bio_count),exp:const:int(1)]],while[exp:ident(nbytes),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(binary_arith),aop(/),exp[grammar(binary_arith),aop(-),exp[grammar(binary_arith),aop(+),exp:ident(nbytes),exp:ident(PAGE_SIZE)],exp:const:int(1)],exp:ident(PAGE_SIZE)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(max),exp:ident(nvec),exp[grammar(binary_arith),aop(-),exp:ident(nr_segs),exp:ident(seg)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(min),exp:ident(nvec),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bio),exp[grammar(call),exp:ident(bio_alloc),exp:ident(GFP_KERNEL),exp:ident(nvec)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_end_io)],exp:ident(blk_end_aio)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_private)],exp:ident(iocb)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_sector)],exp[grammar(binary_arith),aop(>>),exp:ident(pos),exp:ident(blkbits)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:ident(cur_off)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(count),exp:ident(cur_len)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp:ident(count)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(blk_get_page),exp:ident(addr),exp:ident(count),exp:ident(rw),exp:&ref:exp:ident(pvec)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)]],statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(bio_add_page),exp:ident(bio),exp:ident(page),exp:ident(cur_len),exp:ident(cur_off)],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(pos),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(addr),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(count),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(nbytes),exp:ident(cur_len)]],sel_if[exp:ident(count),statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:ident(nr_segs)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(iov),exp:ident(seg)],ident(iov_len)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(&),exp:ident(addr),exp:ident(blocksize_mask)],exp[grammar(binary_arith),aop(&),exp:ident(count),exp:ident(blocksize_mask)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(call),exp:ident(min),exp:ident(count),exp:ident(nbytes)]]],statem(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(blk_unget_page),exp:ident(page),exp:&ref:exp:ident(pvec)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_set_pages_dirty),exp:ident(bio)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(atomic_inc),exp:ident(bio_count)]],estmt[exp[grammar(call),exp:ident(submit_bio),exp:ident(rw),exp:ident(bio)]]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)]]],estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_pos)],exp:ident(nbytes)]],estmt[exp[grammar(call),exp:ident(blk_run_address_space),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)]]],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp:ident(nbytes),exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)],statem(N/H),estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(atomic_read),exp:ident(bio_count)],exp:const:int(1)],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]],estmt(NONE)],statem(N/H)]],def[fname(blkdev_writepage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(wbc),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_write_full_page),exp:ident(page),exp:ident(blkdev_get_block),exp:ident(wbc)]]]],def[fname(blkdev_readpage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_read_full_page),exp:ident(page),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_begin),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(pagep),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(pagep),exp:ident(NULL)]],st_return[exp[grammar(call),exp:ident(block_write_begin),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(flags),exp:ident(pagep),exp:ident(fsdata),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_end),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(copied),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(block_write_end),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(copied),exp:ident(page),exp:ident(fsdata)]]],estmt[exp[grammar(call),exp:ident(unlock_page),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],st_return[exp:ident(ret)]]],def[fname(block_llseek),funtype[fulltype[typec(N/H)],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(origin),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(bd_inode)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:ident(size)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)],exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],st_return[exp:ident(retval)]]],def[fname(block_fsync),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(filp),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(datasync),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(sync_blockdev),exp[grammar(call),exp:ident(I_BDEV),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_mapping)],ident(host)]]]]]],decl(N/H),NCP(N/H),def[fname(bdev_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(bdev_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(bdi),ident(bdev)],ident(bd_inode_backing_dev_info)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(bdev_cachep),exp:ident(bdi)]]]],def[fname(init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(foo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:ident(bdev),exp:const:int(0),exp:sizeof:exp:*ref:exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(mutex_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(sema_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mount_sem)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_inodes)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_list)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(__bd_forget),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_devices)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_bdev)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_data)]]]]],NCP(N/H),decl(N/H),def[fname(bd_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_pseudo),exp:ident(fs_type),exp:const:string(bdev:),exp:&ref:exp:ident(bdev_sops),exp:const:int(0x62646576),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),decl(N/H),NCP(N/H),def[fname(hash),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(MAJOR),exp:ident(dev)],exp[grammar(call),exp:ident(MINOR),exp:ident(dev)]]]]],def[fname(bdev_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]]]],def[fname(bdev_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(bdput),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(iput),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]]]],mtop(N/H),NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),def[fname(bdev_get_kobj),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(dev)],ident(kobj)]]]]]],def[fname(bdev_get_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(holder_dir)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(holder_dir)]]]]]],def[fname(add_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sysfs_create_link),exp:ident(from),exp:ident(to),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],def[fname(del_symlink),funtype[fulltype[ctype[btype(void)]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(sysfs_remove_link),exp:ident(from),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],decl(N/H),def[fname(bd_holder_grab_dirs),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],ident(parent)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)],exp[grammar(call),exp:ident(bdev_get_kobj),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(call),exp:ident(bdev_get_holder),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(1)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:const:int(0)]]],def[fname(bd_holder_release_dirs),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]]],def[fname(alloc_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(kzalloc),exp:sizeof:exp:*ref:exp:ident(bo),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(count)],exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp:ident(kobj)]],st_return[exp:ident(bo)]]],def[fname(free_bd_holder),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp:ident(bo)]]]],def[fname(find_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(add_bd_holder),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]]],sel_if[exp:ident(err),st_return[exp:ident(err)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(del_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],st_return[exp:ident(err)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bo),ident(list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],st_return[exp:const:int(0)]]],def[fname(del_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(bd_claim_by_kobject),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(alloc_bd_holder),exp:ident(kobj)]]],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(err),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(found),exp[grammar(call),exp:ident(find_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(found),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(err),estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp:ident(NULL)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(free_bd_holder),exp:ident(bo)]],st_return[exp:ident(err)]]],def[fname(bd_release_from_kobject),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(free_bd_holder),exp[grammar(call),exp:ident(del_bd_holder),exp:ident(bdev),exp:ident(kobj)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]]]],def[fname(bd_claim_by_disk),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(bd_claim_by_kobject),exp:ident(bdev),exp:ident(holder),exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]]],mtop(N/H),def[fname(bd_release_from_disk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release_from_kobject),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]],mtop(N/H),def[fname(open_by_devnum),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp:ident(bdev),estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags)]]],estmt(NONE)],st_return[exp[grammar(cond3),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)],exp:ident(bdev)]]]],mtop(N/H),def[fname(check_disk_change),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(__invalidate_device),exp:ident(bdev)],estmt[exp[grammar(call),exp:ident(printk),exp:const:string(VFS: busy inodes on changed media.\n)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],estmt[exp[grammar(call),exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(minors)],exp:const:int(1)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],exp:const:int(1)]],estmt(NONE)],st_return[exp:const:int(1)]]],mtop(N/H),def[fname(bd_set_size),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_size)],exp:ident(size)]],while[exp[grammar(binary_logi),logiop(??),exp:ident(bsize),exp:ident(PAGE_CACHE_SIZE)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp:ident(size),exp:ident(bsize)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(N/H),exp:ident(bsize),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(bsize)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(bsize)]]]]],mtop(N/H),decl(N/H),decl(N/H),def[fname(do_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)]]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(disk),exp[grammar(call),exp:ident(get_gendisk),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_dev)],exp:&ref:exp:ident(part)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(owner),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(owner)]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(disk)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)]],sel_if[exp:??(N/H),{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp[grammar(call),exp:ident(blk_get_backing_dev_info),exp:ident(bdev)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdi),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp:&ref:exp:ident(default_backing_dev_info)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:ident(bdi)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp:ident(disk),exp:ident(bdev)]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(whole),exp[grammar(call),exp:ident(bdget_disk),exp:ident(disk),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:ident(for_part)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(__blkdev_get),exp:ident(whole),exp[grammar(record_ptr),exp:ident(file),ident(f_mode)],exp[grammar(record_ptr),exp:ident(file),ident(f_flags)],exp:const:int(1)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(whole)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(disk),ident(part)],exp[grammar(binary_arith),aop(-),exp:ident(part),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(whole),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp:ident(p),ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(p)]],estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(bdev)]],estmt(NONE)]],estmt(NONE)]]],estmt[exp:??(N/H)],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(call),exp:ident(__blkdev_put),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],statem(N/H),estmt[exp[grammar(call),exp:ident(unlock_kernel)]],sel_if[exp:ident(ret),estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(__blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:&ref:exp:ident(fake_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_dentry),ident(d_inode)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]],st_return[exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:&ref:exp:ident(fake_file),exp:ident(for_part)]]]],def[fname(blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(filp),ident(f_flags)],exp:ident(O_LARGEFILE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdev),exp:ident(NULL)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:ident(filp),exp:const:int(0)]]],sel_if[exp:ident(res),st_return[exp:ident(res)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]],st_return[exp:ident(res)]]],def[fname(__blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],exp:ident(bd_inode),exp:ident(NULL)]]],estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(victim),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],sel_if[exp:ident(victim),estmt[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(victim),exp:const:int(1)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(bdev),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_holder)],exp:ident(filp)],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],def[fname(block_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],ident(host)],exp:ident(file),exp:ident(cmd),exp:ident(arg)]]]],decl(N/H),decl(N/H),def[fname(ioctl_by_bdev),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(KERNEL_DS)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(NULL),exp:ident(cmd),exp:ident(arg)]]],estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(old_fs)]],st_return[exp:ident(res)]]],mtop(N/H),def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]],def[fname(open_bdev_excl),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(holder),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(lookup_bdev),exp:ident(path)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(bdev)],st_return[exp:ident(bdev)],estmt(NONE)],sel_if[exp:??(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(mode),exp:ident(FMODE_WRITE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:const:int(0)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp[grammar(call),exp:ident(bdev_read_only),exp:ident(bdev)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(error),statem(N/H),estmt(NONE)],st_return[exp:ident(bdev)],statem(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]]]],mtop(N/H),def[fname(close_bdev_excl),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],mtop(N/H),def[fname(__invalidate_device),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sb),{}stmt[estmt[exp[grammar(call),exp:ident(shrink_dcache_sb),exp:ident(sb)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(invalidate_inodes),exp:ident(sb)]]],estmt[exp[grammar(call),exp:ident(drop_super),exp:ident(sb)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bdev),exp:ident(bdev)]],st_return[exp:ident(res)]]],mtop(N/H)]
[Main] terms that changed: exp:ident(nd) 
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)]
[Diff] resulting abstract updates: 64
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)] ==> sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp:ident(nd) ==> exp[grammar(record_acc),exp:ident(nd),ident(path)]
[Diff] resulting abstract updates: 2
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]] ==> exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]
[Diff] resulting abstract updates: 128
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]
[Diff] resulting abstract updates: 128
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]] ==> def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(fcntl.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(kmod.h)],includeN[inc_elem(linux),inc_elem(major.h)],includeN[inc_elem(linux),inc_elem(smp_lock.h)],includeN[inc_elem(linux),inc_elem(highmem.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(blkpg.h)],includeN[inc_elem(linux),inc_elem(buffer_head.h)],includeN[inc_elem(linux),inc_elem(writeback.h)],includeN[inc_elem(linux),inc_elem(mpage.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(uio.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(log2.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(internal.h)],decl(N/H),def[fname(BDEV_I),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(container_of),exp:ident(inode),argtype(N/H),exp:ident(vfs_inode)]]]],def[fname(I_BDEV),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)]]]],mtop(N/H),def[fname(max_block),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sz),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp[grammar(binary_arith),aop(>>),exp:ident(sz),exp:ident(sizebits)]]]],estmt(NONE)],st_return[exp:ident(retval)]]],def[fname(kill_bdev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],ident(nrpages)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bh_lrus)]],estmt[exp[grammar(call),exp:ident(truncate_inode_pages),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],exp:const:int(0)]]]],def[fname(set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(PAGE_SIZE)],exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(512)]],exp:??(N/H)],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(call),exp:ident(bdev_hardsect_size),exp:ident(bdev)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(sb_set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(call),exp:ident(set_blocksize),exp[grammar(record_ptr),exp:ident(sb),ident(s_bdev)],exp:ident(size)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],st_return[exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)]]]],mtop(N/H),def[fname(sb_min_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(minsize)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(minsize)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sb_set_blocksize),exp:ident(sb),exp:ident(size)]]]],mtop(N/H),def[fname(blkdev_get_block),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(iblock),exp[grammar(call),exp:ident(max_block),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],st_return[exp:const:int(0)]]],def[fname(blkdev_get_blocks),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(iblock),exp:ident(max_blocks)],exp:ident(end_block)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp[grammar(binary_arith),aop(-),exp:ident(end_block),exp:ident(iblock)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp:const:int(0)]]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_size)],exp[grammar(binary_arith),aop(<<),exp:ident(max_blocks),exp[grammar(record_ptr),exp:ident(inode),ident(i_blkbits)]]]],sel_if[exp:ident(max_blocks),estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[exp[grammar(call),exp:ident(blockdev_direct_IO_no_locking),exp:ident(rw),exp:ident(iocb),exp:ident(inode),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)],exp:ident(iov),exp:ident(offset),exp:ident(nr_segs),exp:ident(blkdev_get_blocks),exp:ident(NULL)]]]],def[fname(blk_end_aio),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bio),fulltype[typec(N/H)]],param[reg(),name(error),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(bio_data_dir),exp:ident(bio)],exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_check_pages_dirty),exp:ident(bio)]],{}stmt[estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]]]],sel_if[exp:ident(error),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:const:int(0)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],define(N/H),decl(N/H),define(N/H),def[fname(blk_get_page),funtype[fulltype[typec(N/H)],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(count),fulltype[typec(N/H)]],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp[grammar(record_ptr),exp:ident(pvec),ident(nr)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(PAGES_SPANNED),exp:ident(addr),exp:ident(count)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(min),exp:ident(nr_pages),exp:ident(VEC_SIZE)]]],estmt[exp[grammar(call),exp:ident(down_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_user_pages),exp:ident(current),exp[grammar(record_ptr),exp:ident(current),ident(mm)],exp:ident(addr),exp:ident(nr_pages),exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],exp:const:int(0),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(up_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(nr)],exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp:const:int(0)]]],estmt(NONE)],st_return[exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)]]]],def[fname(blk_unget_page),funtype[fulltype[ctype[btype(void)]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)],exp:ident(page)]]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(nr)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(idx)],exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(pos),exp:ident(blocksize_mask)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(pos),exp:ident(nbytes)],exp:ident(size)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:ident(pos)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:ident(nbytes)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(atomic_set),exp:ident(bio_count),exp:const:int(1)]],while[exp:ident(nbytes),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(binary_arith),aop(/),exp[grammar(binary_arith),aop(-),exp[grammar(binary_arith),aop(+),exp:ident(nbytes),exp:ident(PAGE_SIZE)],exp:const:int(1)],exp:ident(PAGE_SIZE)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(max),exp:ident(nvec),exp[grammar(binary_arith),aop(-),exp:ident(nr_segs),exp:ident(seg)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(min),exp:ident(nvec),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bio),exp[grammar(call),exp:ident(bio_alloc),exp:ident(GFP_KERNEL),exp:ident(nvec)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_end_io)],exp:ident(blk_end_aio)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_private)],exp:ident(iocb)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_sector)],exp[grammar(binary_arith),aop(>>),exp:ident(pos),exp:ident(blkbits)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:ident(cur_off)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(count),exp:ident(cur_len)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp:ident(count)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(blk_get_page),exp:ident(addr),exp:ident(count),exp:ident(rw),exp:&ref:exp:ident(pvec)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)]],statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(bio_add_page),exp:ident(bio),exp:ident(page),exp:ident(cur_len),exp:ident(cur_off)],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(pos),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(addr),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(count),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(nbytes),exp:ident(cur_len)]],sel_if[exp:ident(count),statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:ident(nr_segs)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(iov),exp:ident(seg)],ident(iov_len)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(&),exp:ident(addr),exp:ident(blocksize_mask)],exp[grammar(binary_arith),aop(&),exp:ident(count),exp:ident(blocksize_mask)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(call),exp:ident(min),exp:ident(count),exp:ident(nbytes)]]],statem(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(blk_unget_page),exp:ident(page),exp:&ref:exp:ident(pvec)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_set_pages_dirty),exp:ident(bio)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(atomic_inc),exp:ident(bio_count)]],estmt[exp[grammar(call),exp:ident(submit_bio),exp:ident(rw),exp:ident(bio)]]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)]]],estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_pos)],exp:ident(nbytes)]],estmt[exp[grammar(call),exp:ident(blk_run_address_space),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)]]],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp:ident(nbytes),exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)],statem(N/H),estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(atomic_read),exp:ident(bio_count)],exp:const:int(1)],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]],estmt(NONE)],statem(N/H)]],def[fname(blkdev_writepage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(wbc),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_write_full_page),exp:ident(page),exp:ident(blkdev_get_block),exp:ident(wbc)]]]],def[fname(blkdev_readpage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_read_full_page),exp:ident(page),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_begin),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(pagep),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(pagep),exp:ident(NULL)]],st_return[exp[grammar(call),exp:ident(block_write_begin),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(flags),exp:ident(pagep),exp:ident(fsdata),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_end),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(copied),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(block_write_end),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(copied),exp:ident(page),exp:ident(fsdata)]]],estmt[exp[grammar(call),exp:ident(unlock_page),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],st_return[exp:ident(ret)]]],def[fname(block_llseek),funtype[fulltype[typec(N/H)],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(origin),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(bd_inode)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:ident(size)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)],exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],st_return[exp:ident(retval)]]],def[fname(block_fsync),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(filp),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(datasync),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(sync_blockdev),exp[grammar(call),exp:ident(I_BDEV),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_mapping)],ident(host)]]]]]],decl(N/H),NCP(N/H),def[fname(bdev_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(bdev_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(bdi),ident(bdev)],ident(bd_inode_backing_dev_info)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(bdev_cachep),exp:ident(bdi)]]]],def[fname(init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(foo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:ident(bdev),exp:const:int(0),exp:sizeof:exp:*ref:exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(mutex_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(sema_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mount_sem)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_inodes)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_list)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(__bd_forget),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_devices)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_bdev)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_data)]]]]],NCP(N/H),decl(N/H),def[fname(bd_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_pseudo),exp:ident(fs_type),exp:const:string(bdev:),exp:&ref:exp:ident(bdev_sops),exp:const:int(0x62646576),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),decl(N/H),NCP(N/H),def[fname(hash),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(MAJOR),exp:ident(dev)],exp[grammar(call),exp:ident(MINOR),exp:ident(dev)]]]]],def[fname(bdev_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]]]],def[fname(bdev_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(bdput),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(iput),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]]]],mtop(N/H),NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),def[fname(bdev_get_kobj),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(dev)],ident(kobj)]]]]]],def[fname(bdev_get_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(holder_dir)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(holder_dir)]]]]]],def[fname(add_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sysfs_create_link),exp:ident(from),exp:ident(to),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],def[fname(del_symlink),funtype[fulltype[ctype[btype(void)]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(sysfs_remove_link),exp:ident(from),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],decl(N/H),def[fname(bd_holder_grab_dirs),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],ident(parent)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)],exp[grammar(call),exp:ident(bdev_get_kobj),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(call),exp:ident(bdev_get_holder),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(1)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:const:int(0)]]],def[fname(bd_holder_release_dirs),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]]],def[fname(alloc_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(kzalloc),exp:sizeof:exp:*ref:exp:ident(bo),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(count)],exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp:ident(kobj)]],st_return[exp:ident(bo)]]],def[fname(free_bd_holder),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp:ident(bo)]]]],def[fname(find_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(add_bd_holder),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]]],sel_if[exp:ident(err),st_return[exp:ident(err)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(del_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],st_return[exp:ident(err)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bo),ident(list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],st_return[exp:const:int(0)]]],def[fname(del_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(bd_claim_by_kobject),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(alloc_bd_holder),exp:ident(kobj)]]],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(err),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(found),exp[grammar(call),exp:ident(find_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(found),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(err),estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp:ident(NULL)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(free_bd_holder),exp:ident(bo)]],st_return[exp:ident(err)]]],def[fname(bd_release_from_kobject),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(free_bd_holder),exp[grammar(call),exp:ident(del_bd_holder),exp:ident(bdev),exp:ident(kobj)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]]]],def[fname(bd_claim_by_disk),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(bd_claim_by_kobject),exp:ident(bdev),exp:ident(holder),exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]]],mtop(N/H),def[fname(bd_release_from_disk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release_from_kobject),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]],mtop(N/H),def[fname(open_by_devnum),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp:ident(bdev),estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags)]]],estmt(NONE)],st_return[exp[grammar(cond3),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)],exp:ident(bdev)]]]],mtop(N/H),def[fname(check_disk_change),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(__invalidate_device),exp:ident(bdev)],estmt[exp[grammar(call),exp:ident(printk),exp:const:string(VFS: busy inodes on changed media.\n)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],estmt[exp[grammar(call),exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(minors)],exp:const:int(1)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],exp:const:int(1)]],estmt(NONE)],st_return[exp:const:int(1)]]],mtop(N/H),def[fname(bd_set_size),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_size)],exp:ident(size)]],while[exp[grammar(binary_logi),logiop(??),exp:ident(bsize),exp:ident(PAGE_CACHE_SIZE)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp:ident(size),exp:ident(bsize)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(N/H),exp:ident(bsize),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(bsize)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(bsize)]]]]],mtop(N/H),decl(N/H),decl(N/H),def[fname(do_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)]]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(disk),exp[grammar(call),exp:ident(get_gendisk),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_dev)],exp:&ref:exp:ident(part)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(owner),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(owner)]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(disk)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)]],sel_if[exp:??(N/H),{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp[grammar(call),exp:ident(blk_get_backing_dev_info),exp:ident(bdev)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdi),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp:&ref:exp:ident(default_backing_dev_info)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:ident(bdi)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp:ident(disk),exp:ident(bdev)]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(whole),exp[grammar(call),exp:ident(bdget_disk),exp:ident(disk),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:ident(for_part)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(__blkdev_get),exp:ident(whole),exp[grammar(record_ptr),exp:ident(file),ident(f_mode)],exp[grammar(record_ptr),exp:ident(file),ident(f_flags)],exp:const:int(1)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(whole)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(disk),ident(part)],exp[grammar(binary_arith),aop(-),exp:ident(part),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(whole),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp:ident(p),ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(p)]],estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(bdev)]],estmt(NONE)]],estmt(NONE)]]],estmt[exp:??(N/H)],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(call),exp:ident(__blkdev_put),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],statem(N/H),estmt[exp[grammar(call),exp:ident(unlock_kernel)]],sel_if[exp:ident(ret),estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(__blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:&ref:exp:ident(fake_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_dentry),ident(d_inode)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]],st_return[exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:&ref:exp:ident(fake_file),exp:ident(for_part)]]]],def[fname(blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(filp),ident(f_flags)],exp:ident(O_LARGEFILE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdev),exp:ident(NULL)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:ident(filp),exp:const:int(0)]]],sel_if[exp:ident(res),st_return[exp:ident(res)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]],st_return[exp:ident(res)]]],def[fname(__blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],exp:ident(bd_inode),exp:ident(NULL)]]],estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(victim),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],sel_if[exp:ident(victim),estmt[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(victim),exp:const:int(1)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(bdev),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_holder)],exp:ident(filp)],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],def[fname(block_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],ident(host)],exp:ident(file),exp:ident(cmd),exp:ident(arg)]]]],decl(N/H),decl(N/H),def[fname(ioctl_by_bdev),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(KERNEL_DS)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(NULL),exp:ident(cmd),exp:ident(arg)]]],estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(old_fs)]],st_return[exp:ident(res)]]],mtop(N/H),def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]],def[fname(open_bdev_excl),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(holder),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(lookup_bdev),exp:ident(path)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(bdev)],st_return[exp:ident(bdev)],estmt(NONE)],sel_if[exp:??(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(mode),exp:ident(FMODE_WRITE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:const:int(0)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp[grammar(call),exp:ident(bdev_read_only),exp:ident(bdev)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(error),statem(N/H),estmt(NONE)],st_return[exp:ident(bdev)],statem(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]]]],mtop(N/H),def[fname(close_bdev_excl),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],mtop(N/H),def[fname(__invalidate_device),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sb),{}stmt[estmt[exp[grammar(call),exp:ident(shrink_dcache_sb),exp:ident(sb)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(invalidate_inodes),exp:ident(sb)]]],estmt[exp[grammar(call),exp:ident(drop_super),exp:ident(sb)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bdev),exp:ident(bdev)]],st_return[exp:ident(res)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(fcntl.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(kmod.h)],includeN[inc_elem(linux),inc_elem(major.h)],includeN[inc_elem(linux),inc_elem(smp_lock.h)],includeN[inc_elem(linux),inc_elem(highmem.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(blkpg.h)],includeN[inc_elem(linux),inc_elem(buffer_head.h)],includeN[inc_elem(linux),inc_elem(writeback.h)],includeN[inc_elem(linux),inc_elem(mpage.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(uio.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(log2.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(internal.h)],decl(N/H),def[fname(BDEV_I),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(container_of),exp:ident(inode),argtype(N/H),exp:ident(vfs_inode)]]]],def[fname(I_BDEV),funtype[fulltype[typec(N/H)],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)]]]],mtop(N/H),def[fname(max_block),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sz),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp[grammar(binary_arith),aop(>>),exp:ident(sz),exp:ident(sizebits)]]]],estmt(NONE)],st_return[exp:ident(retval)]]],def[fname(kill_bdev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],ident(nrpages)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bh_lrus)]],estmt[exp[grammar(call),exp:ident(truncate_inode_pages),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)],exp:const:int(0)]]]],def[fname(set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(PAGE_SIZE)],exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(512)]],exp:??(N/H)],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(call),exp:ident(bdev_hardsect_size),exp:ident(bdev)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(sb_set_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(call),exp:ident(set_blocksize),exp[grammar(record_ptr),exp:ident(sb),ident(s_bdev)],exp:ident(size)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(size)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(size)]]],st_return[exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)]]]],mtop(N/H),def[fname(sb_min_blocksize),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:ident(minsize)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(minsize)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sb_set_blocksize),exp:ident(sb),exp:ident(size)]]]],mtop(N/H),def[fname(blkdev_get_block),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(iblock),exp[grammar(call),exp:ident(max_block),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],st_return[exp:const:int(0)]]],def[fname(blkdev_get_blocks),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(iblock),fulltype[typec(N/H)]],param[reg(),name(bh),fulltype[typec(N/H)]],param[reg(),name(create),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(iblock),exp:ident(max_blocks)],exp:ident(end_block)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp[grammar(binary_arith),aop(-),exp:ident(end_block),exp:ident(iblock)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],{}stmt[sel_if[exp:ident(create),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(max_blocks),exp:const:int(0)]]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_blocknr)],exp:ident(iblock)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bh),ident(b_size)],exp[grammar(binary_arith),aop(<<),exp:ident(max_blocks),exp[grammar(record_ptr),exp:ident(inode),ident(i_blkbits)]]]],sel_if[exp:ident(max_blocks),estmt[exp[grammar(call),exp:ident(set_buffer_mapped),exp:ident(bh)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[exp[grammar(call),exp:ident(blockdev_direct_IO_no_locking),exp:ident(rw),exp:ident(iocb),exp:ident(inode),exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)],exp:ident(iov),exp:ident(offset),exp:ident(nr_segs),exp:ident(blkdev_get_blocks),exp:ident(NULL)]]]],def[fname(blk_end_aio),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bio),fulltype[typec(N/H)]],param[reg(),name(error),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(bio_data_dir),exp:ident(bio)],exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_check_pages_dirty),exp:ident(bio)]],{}stmt[estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]]]],sel_if[exp:ident(error),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_nbytes)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:const:int(0)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],define(N/H),decl(N/H),define(N/H),def[fname(blk_get_page),funtype[fulltype[typec(N/H)],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(count),fulltype[typec(N/H)]],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp[grammar(record_ptr),exp:ident(pvec),ident(nr)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(PAGES_SPANNED),exp:ident(addr),exp:ident(count)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nr_pages),exp[grammar(call),exp:ident(min),exp:ident(nr_pages),exp:ident(VEC_SIZE)]]],estmt[exp[grammar(call),exp:ident(down_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_user_pages),exp:ident(current),exp[grammar(record_ptr),exp:ident(current),ident(mm)],exp:ident(addr),exp:ident(nr_pages),exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],exp:const:int(0),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(up_read),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(current),ident(mm)],ident(mmap_sem)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(nr)],exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pvec),ident(idx)],exp:const:int(0)]]],estmt(NONE)],st_return[exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)]]]],def[fname(blk_unget_page),funtype[fulltype[ctype[btype(void)]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(pvec),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pvec),ident(page)],exp:??(N/H)],exp:ident(page)]]]],def[fname(blkdev_direct_IO),funtype[fulltype[typec(N/H)],param[reg(),name(rw),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(iocb),fulltype[typec(N/H)]],param[reg(),name(iov),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(nr_segs),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(nr)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(pvec),ident(idx)],exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(pos),exp:ident(blocksize_mask)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(+),exp:ident(pos),exp:ident(nbytes)],exp:ident(size)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:ident(pos)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)],exp:ident(nbytes)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(atomic_set),exp:ident(bio_count),exp:const:int(1)]],while[exp:ident(nbytes),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(binary_arith),aop(/),exp[grammar(binary_arith),aop(-),exp[grammar(binary_arith),aop(+),exp:ident(nbytes),exp:ident(PAGE_SIZE)],exp:const:int(1)],exp:ident(PAGE_SIZE)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(max),exp:ident(nvec),exp[grammar(binary_arith),aop(-),exp:ident(nr_segs),exp:ident(seg)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(nvec),exp[grammar(call),exp:ident(min),exp:ident(nvec),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bio),exp[grammar(call),exp:ident(bio_alloc),exp:ident(GFP_KERNEL),exp:ident(nvec)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_bdev)],exp[grammar(call),exp:ident(I_BDEV),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_end_io)],exp:ident(blk_end_aio)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_private)],exp:ident(iocb)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bio),ident(bi_sector)],exp[grammar(binary_arith),aop(>>),exp:ident(pos),exp:ident(blkbits)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:ident(cur_off)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(count),exp:ident(cur_len)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur_len),exp:ident(count)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(blk_get_page),exp:ident(addr),exp:ident(count),exp:ident(rw),exp:&ref:exp:ident(pvec)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)]],statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(bio_add_page),exp:ident(bio),exp:ident(page),exp:ident(cur_len),exp:ident(cur_off)],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(pos),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(addr),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(count),exp:ident(cur_len)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(nbytes),exp:ident(cur_len)]],sel_if[exp:ident(count),statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:??(N/H),exp:ident(nr_segs)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(iov),exp:ident(seg)],ident(iov_len)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(&),exp:ident(addr),exp:ident(blocksize_mask)],exp[grammar(binary_arith),aop(&),exp:ident(count),exp:ident(blocksize_mask)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp[grammar(call),exp:ident(min),exp:ident(count),exp:ident(nbytes)]]],statem(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(blk_unget_page),exp:ident(page),exp:&ref:exp:ident(pvec)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rw),exp:ident(READ)],estmt[exp[grammar(call),exp:ident(bio_set_pages_dirty),exp:ident(bio)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(atomic_inc),exp:ident(bio_count)]],estmt[exp[grammar(call),exp:ident(submit_bio),exp:ident(rw),exp:ident(bio)]]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(nbytes),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_left)]]],estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(iocb),ident(ki_pos)],exp:ident(nbytes)]],estmt[exp[grammar(call),exp:ident(blk_run_address_space),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)]]],sel_if[exp[grammar(call),exp:ident(atomic_dec_and_test),exp:ident(bio_count)],estmt[exp[grammar(call),exp:ident(aio_complete),exp:ident(iocb),exp:ident(nbytes),exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)],statem(N/H),estmt[exp[grammar(call),exp:ident(bio_release_pages),exp:ident(bio)]],estmt[exp[grammar(call),exp:ident(bio_put),exp:ident(bio)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(atomic_read),exp:ident(bio_count)],exp:const:int(1)],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]],estmt(NONE)],statem(N/H)]],def[fname(blkdev_writepage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(wbc),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_write_full_page),exp:ident(page),exp:ident(blkdev_get_block),exp:ident(wbc)]]]],def[fname(blkdev_readpage),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(block_read_full_page),exp:ident(page),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_begin),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(pagep),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(pagep),exp:ident(NULL)]],st_return[exp[grammar(call),exp:ident(block_write_begin),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(flags),exp:ident(pagep),exp:ident(fsdata),exp:ident(blkdev_get_block)]]]],def[fname(blkdev_write_end),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(mapping),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(copied),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(page),fulltype[typec(N/H)]],param[reg(),name(fsdata),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(block_write_end),exp:ident(file),exp:ident(mapping),exp:ident(pos),exp:ident(len),exp:ident(copied),exp:ident(page),exp:ident(fsdata)]]],estmt[exp[grammar(call),exp:ident(unlock_page),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],st_return[exp:ident(ret)]]],def[fname(block_llseek),funtype[fulltype[typec(N/H)],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(origin),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(i_size_read),exp:ident(bd_inode)]]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp:ident(size)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(offset),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_pos)],exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(retval),exp:ident(offset)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bd_inode),ident(i_mutex)]]],st_return[exp:ident(retval)]]],def[fname(block_fsync),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(filp),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(datasync),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(sync_blockdev),exp[grammar(call),exp:ident(I_BDEV),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_mapping)],ident(host)]]]]]],decl(N/H),NCP(N/H),def[fname(bdev_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(bdev_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(bdi),ident(bdev)],ident(bd_inode_backing_dev_info)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(bdev_cachep),exp:ident(bdi)]]]],def[fname(init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(foo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:ident(bdev),exp:const:int(0),exp:sizeof:exp:*ref:exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(mutex_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(sema_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mount_sem)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_inodes)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_list)]]],estmt[exp[grammar(call),exp:ident(INIT_LIST_HEAD),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(__bd_forget),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del_init),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_devices)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_bdev)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mapping)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_data)]]]]],NCP(N/H),decl(N/H),def[fname(bd_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_pseudo),exp:ident(fs_type),exp:const:string(bdev:),exp:&ref:exp:ident(bdev_sops),exp:const:int(0x62646576),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),decl(N/H),NCP(N/H),def[fname(hash),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(MAJOR),exp:ident(dev)],exp[grammar(call),exp:ident(MINOR),exp:ident(dev)]]]]],def[fname(bdev_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]]]],def[fname(bdev_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(BDEV_I),exp:ident(inode)],ident(bdev)],ident(bd_dev)],exp:*ref:exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(bdput),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(iput),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]]]],mtop(N/H),NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),def[fname(bdev_get_kobj),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(dev)],ident(kobj)]]]]]],def[fname(bdev_get_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(holder_dir)]]],st_return[exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(holder_dir)]]]]]],def[fname(add_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(sysfs_create_link),exp:ident(from),exp:ident(to),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],def[fname(del_symlink),funtype[fulltype[ctype[btype(void)]],param[reg(),name(from),fulltype[typec(N/H)]],param[reg(),name(to),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(sysfs_remove_link),exp:ident(from),exp[grammar(call),exp:ident(kobject_name),exp:ident(to)]]]]],decl(N/H),def[fname(bd_holder_grab_dirs),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)],exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],ident(parent)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)],exp[grammar(call),exp:ident(bdev_get_kobj),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(call),exp:ident(bdev_get_holder),exp:ident(bdev)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(1)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:const:int(0)]]],def[fname(bd_holder_release_dirs),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)]]]]],def[fname(alloc_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(kzalloc),exp:sizeof:exp:*ref:exp:ident(bo),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(count)],exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp:ident(kobj)]],st_return[exp:ident(bo)]]],def[fname(free_bd_holder),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp:ident(bo)]]]],def[fname(find_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(add_bd_holder),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(bo),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]]],sel_if[exp:ident(err),st_return[exp:ident(err)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(hdir)],exp[grammar(record_ptr),exp:ident(bo),ident(hdev)]]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(del_symlink),exp[grammar(record_ptr),exp:ident(bo),ident(sdir)],exp[grammar(record_ptr),exp:ident(bo),ident(sdev)]]],st_return[exp:ident(err)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bo),ident(list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_holder_list)]]],st_return[exp:const:int(0)]]],def[fname(del_bd_holder),funtype[fulltype[typec(N/H)],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],def[fname(bd_claim_by_kobject),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp[grammar(call),exp:ident(alloc_bd_holder),exp:ident(kobj)]]],sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(err),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(found),exp[grammar(call),exp:ident(find_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(found),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(add_bd_holder),exp:ident(bdev),exp:ident(bo)]]],sel_if[exp:ident(err),estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bo),exp:ident(NULL)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(free_bd_holder),exp:ident(bo)]],st_return[exp:ident(err)]]],def[fname(bd_release_from_kobject),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(kobj),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(free_bd_holder),exp[grammar(call),exp:ident(del_bd_holder),exp:ident(bdev),exp:ident(kobj)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]]]],def[fname(bd_claim_by_disk),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(holder),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(bd_claim_by_kobject),exp:ident(bdev),exp:ident(holder),exp[grammar(call),exp:ident(kobject_get),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]]],mtop(N/H),def[fname(bd_release_from_disk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(disk),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release_from_kobject),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]],estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(record_ptr),exp:ident(disk),ident(slave_dir)]]]]],mtop(N/H),def[fname(open_by_devnum),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp:ident(bdev),estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags)]]],estmt(NONE)],st_return[exp[grammar(cond3),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)],exp:ident(bdev)]]]],mtop(N/H),def[fname(check_disk_change),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(__invalidate_device),exp:ident(bdev)],estmt[exp[grammar(call),exp:ident(printk),exp:const:string(VFS: busy inodes on changed media.\n)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],estmt[exp[grammar(call),exp[grammar(record_ptr),exp:ident(bdops),ident(revalidate_disk)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(minors)],exp:const:int(1)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],exp:const:int(1)]],estmt(NONE)],st_return[exp:const:int(1)]]],mtop(N/H),def[fname(bd_set_size),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_size)],exp:ident(size)]],while[exp[grammar(binary_logi),logiop(??),exp:ident(bsize),exp:ident(PAGE_CACHE_SIZE)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp:ident(size),exp:ident(bsize)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(N/H),exp:ident(bsize),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_block_size)],exp:ident(bsize)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_blkbits)],exp[grammar(call),exp:ident(blksize_bits),exp:ident(bsize)]]]]],mtop(N/H),decl(N/H),decl(N/H),def[fname(do_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_mapping)]]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(disk),exp[grammar(call),exp:ident(get_gendisk),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_dev)],exp:&ref:exp:ident(part)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(owner),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(owner)]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(disk)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)]],sel_if[exp:??(N/H),{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp[grammar(call),exp:ident(blk_get_backing_dev_info),exp:ident(bdev)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdi),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdi),exp:&ref:exp:ident(default_backing_dev_info)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:ident(bdi)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp:ident(disk),exp:ident(bdev)]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(whole),exp[grammar(call),exp:ident(bdget_disk),exp:ident(disk),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:ident(for_part)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(__blkdev_get),exp:ident(whole),exp[grammar(record_ptr),exp:ident(file),ident(f_mode)],exp[grammar(record_ptr),exp:ident(file),ident(f_flags)],exp:const:int(1)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(whole)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(disk),ident(part)],exp[grammar(binary_arith),aop(-),exp:ident(part),exp:const:int(1)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(whole),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(kobject_get),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp:ident(p),ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(p)]],estmt[exp[grammar(call),exp:ident(bd_set_size),exp:ident(bdev),exp[grammar(binary_arith),aop(<<),exp:??(N/H),exp:const:int(9)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],ident(fops)],ident(open)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(file)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(bdev),ident(bd_invalidated)],estmt[exp[grammar(call),exp:ident(rescan_partitions),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(bdev)]],estmt(NONE)]],estmt(NONE)]]],estmt[exp:??(N/H)],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(call),exp:ident(__blkdev_put),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]],estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],statem(N/H),estmt[exp[grammar(call),exp:ident(unlock_kernel)]],sel_if[exp:ident(ret),estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(__blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_file),ident(f_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:&ref:exp:ident(fake_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(fake_dentry),ident(d_inode)],exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)]]],st_return[exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:&ref:exp:ident(fake_file),exp:ident(for_part)]]]],def[fname(blkdev_get),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_get),exp:ident(bdev),exp:ident(mode),exp:ident(flags),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(filp),ident(f_flags)],exp:ident(O_LARGEFILE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(bdev),exp:ident(NULL)],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(do_open),exp:ident(bdev),exp:ident(filp),exp:const:int(0)]]],sel_if[exp:ident(res),st_return[exp:ident(res)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp:??(N/H),st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]],st_return[exp:ident(res)]]],def[fname(__blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(for_part),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)],exp:ident(for_part)]],estmt[exp[grammar(call),exp:ident(lock_kernel)]],sel_if[exp:ident(for_part),estmt[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(sync_blockdev),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(kill_bdev),exp:ident(bdev)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[sel_if[exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(disk),ident(fops)],ident(release)],exp:ident(bd_inode),exp:ident(NULL)]]],estmt(NONE)]],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(put_disk),exp:ident(disk)]],estmt[exp[grammar(call),exp:ident(module_put),exp:ident(owner)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(bdev)],{}stmt[estmt[exp[grammar(call),exp:ident(kobject_put),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],ident(dev)],ident(kobj)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_part)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_disk)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],ident(i_data)],ident(backing_dev_info)],exp:&ref:exp:ident(default_backing_dev_info)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(bdev),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(victim),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_contains)],exp:ident(NULL)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(unlock_kernel)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bdev),ident(bd_mutex)]]],estmt[exp[grammar(call),exp:ident(bdput),exp:ident(bdev)]],sel_if[exp:ident(victim),estmt[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(victim),exp:const:int(1)]],estmt(NONE)],st_return[exp:ident(ret)]]],def[fname(blkdev_put),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(__blkdev_put),exp:ident(bdev),exp:const:int(0)]]]],mtop(N/H),def[fname(blkdev_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_holder)],exp:ident(filp)],estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],def[fname(block_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(file),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_mapping)],ident(host)],exp:ident(file),exp:ident(cmd),exp:ident(arg)]]]],decl(N/H),decl(N/H),def[fname(ioctl_by_bdev),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(arg),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(KERNEL_DS)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(blkdev_ioctl),exp[grammar(record_ptr),exp:ident(bdev),ident(bd_inode)],exp:ident(NULL),exp:ident(cmd),exp:ident(arg)]]],estmt[exp[grammar(call),exp:ident(set_fs),exp:ident(old_fs)]],st_return[exp:ident(res)]]],mtop(N/H),def[fname(lookup_bdev),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(path_lookup),exp:ident(path),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(bd_acquire),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],statem(N/H),st_return[exp:ident(bdev)],statem(N/H),statem(N/H)]],def[fname(open_bdev_excl),funtype[fulltype[typec(N/H)],param[reg(),name(path),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(holder),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(bdev),exp[grammar(call),exp:ident(lookup_bdev),exp:ident(path)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(bdev)],st_return[exp:ident(bdev)],estmt(NONE)],sel_if[exp:??(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(mode),exp:ident(FMODE_WRITE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(blkdev_get),exp:ident(bdev),exp:ident(mode),exp:const:int(0)]]],sel_if[exp:ident(error),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp[grammar(call),exp:ident(bdev_read_only),exp:ident(bdev)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp[grammar(call),exp:ident(bd_claim),exp:ident(bdev),exp:ident(holder)]]],sel_if[exp:ident(error),statem(N/H),estmt(NONE)],st_return[exp:ident(bdev)],statem(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(error)]]]],mtop(N/H),def[fname(close_bdev_excl),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(bd_release),exp:ident(bdev)]],estmt[exp[grammar(call),exp:ident(blkdev_put),exp:ident(bdev)]]]],mtop(N/H),def[fname(__invalidate_device),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(sb),{}stmt[estmt[exp[grammar(call),exp:ident(shrink_dcache_sb),exp:ident(sb)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(res),exp[grammar(call),exp:ident(invalidate_inodes),exp:ident(sb)]]],estmt[exp[grammar(call),exp:ident(drop_super),exp:ident(sb)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(invalidate_bdev),exp:ident(bdev)]],st_return[exp:ident(res)]]],mtop(N/H)]
[Diff] resulting abstract updates: 1
[Main] Making safe parts for pair 2
prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Main] terms that changed: exp:ident(nd) grammar(record_ptr) 
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 64
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]]
[Diff] resulting abstract updates: 64
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]
[Diff] resulting abstract updates: 96
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]]
[Diff] resulting abstract updates: 96
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 8
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)]
[Diff] resulting abstract updates: 40
[Diff] abstracting concrete update:exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]
[Diff] resulting abstract updates: 160
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 8
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)]
[Diff] resulting abstract updates: 40
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]] ==> exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]] ==> estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]] ==> {}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]] ==> def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Diff] resulting abstract updates: 1
[Main] Making safe parts for pair 3
prg2[includeN[inc_elem(linux),inc_elem(mtd),inc_elem(super.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],def[fname(get_sb_mtd_compare),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: Match on device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: No match, device %d (\"%s\"), device %d (\"%s\")\n),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(index)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(name)],exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_dev)],exp[grammar(call),exp:ident(MKDEV),exp:ident(MTD_BLOCK_MAJOR),exp[grammar(record_ptr),exp:ident(mtd),ident(index)]]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_aux),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtd),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(sb),exp[grammar(call),exp:ident(sget),exp:ident(fs_type),exp:ident(get_sb_mtd_compare),exp:ident(get_sb_mtd_set),exp:ident(mtd)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(sb)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: New superblock for device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(fill_super),exp:ident(sb),exp:ident(data),exp[grammar(cond3),exp[grammar(binary_arith),aop(&),exp:ident(flags),exp:ident(MS_SILENT)],exp:const:int(1),exp:const:int(0)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(sb),ident(s_umount)]]],estmt[exp[grammar(call),exp:ident(deactivate_super),exp:ident(sb)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(MS_ACTIVE)]],st_return[exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]]],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(get_sb_mtd_nr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtdnr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(0),exp:const:string(MTDSB: Device #%u doesn't appear to exist\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(mtd)]]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]]]],def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],mtop(N/H),def[fname(kill_mtd_super),funtype[fulltype[ctype[btype(void)]],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(generic_shutdown_super),exp:ident(sb)]],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(NULL)]]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(mtd),inc_elem(super.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],def[fname(get_sb_mtd_compare),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: Match on device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: No match, device %d (\"%s\"), device %d (\"%s\")\n),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(index)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(name)],exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_dev)],exp[grammar(call),exp:ident(MKDEV),exp:ident(MTD_BLOCK_MAJOR),exp[grammar(record_ptr),exp:ident(mtd),ident(index)]]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_aux),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtd),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(sb),exp[grammar(call),exp:ident(sget),exp:ident(fs_type),exp:ident(get_sb_mtd_compare),exp:ident(get_sb_mtd_set),exp:ident(mtd)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(sb)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: New superblock for device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(fill_super),exp:ident(sb),exp:ident(data),exp[grammar(cond3),exp[grammar(binary_arith),aop(&),exp:ident(flags),exp:ident(MS_SILENT)],exp:const:int(1),exp:const:int(0)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(sb),ident(s_umount)]]],estmt[exp[grammar(call),exp:ident(deactivate_super),exp:ident(sb)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(MS_ACTIVE)]],st_return[exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]]],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(get_sb_mtd_nr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtdnr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(0),exp:const:string(MTDSB: Device #%u doesn't appear to exist\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(mtd)]]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]]]],def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],mtop(N/H),def[fname(kill_mtd_super),funtype[fulltype[ctype[btype(void)]],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(generic_shutdown_super),exp:ident(sb)]],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(NULL)]]]],mtop(N/H)]
[Main] terms that changed: exp:ident(nd) 
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]] ==> exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]
[Diff] resulting abstract updates: 64
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]] ==> exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]] ==> exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]
[Diff] resulting abstract updates: 64
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)] ==> exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)]
[Diff] resulting abstract updates: 64
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)] ==> sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp:ident(nd) ==> exp[grammar(record_acc),exp:ident(nd),ident(path)]
[Diff] resulting abstract updates: 2
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)] ==> exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]] ==> exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]]] ==> estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]] ==> {}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]] ==> def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(mtd),inc_elem(super.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],def[fname(get_sb_mtd_compare),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: Match on device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: No match, device %d (\"%s\"), device %d (\"%s\")\n),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(index)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(name)],exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_dev)],exp[grammar(call),exp:ident(MKDEV),exp:ident(MTD_BLOCK_MAJOR),exp[grammar(record_ptr),exp:ident(mtd),ident(index)]]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_aux),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtd),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(sb),exp[grammar(call),exp:ident(sget),exp:ident(fs_type),exp:ident(get_sb_mtd_compare),exp:ident(get_sb_mtd_set),exp:ident(mtd)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(sb)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: New superblock for device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(fill_super),exp:ident(sb),exp:ident(data),exp[grammar(cond3),exp[grammar(binary_arith),aop(&),exp:ident(flags),exp:ident(MS_SILENT)],exp:const:int(1),exp:const:int(0)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(sb),ident(s_umount)]]],estmt[exp[grammar(call),exp:ident(deactivate_super),exp:ident(sb)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(MS_ACTIVE)]],st_return[exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]]],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(get_sb_mtd_nr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtdnr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(0),exp:const:string(MTDSB: Device #%u doesn't appear to exist\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(mtd)]]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]]]],def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],mtop(N/H),def[fname(kill_mtd_super),funtype[fulltype[ctype[btype(void)]],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(generic_shutdown_super),exp:ident(sb)]],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(NULL)]]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(mtd),inc_elem(super.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],def[fname(get_sb_mtd_compare),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: Match on device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(1)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: No match, device %d (\"%s\"), device %d (\"%s\")\n),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(index)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],ident(name)],exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(_mtd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(mtd)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_dev)],exp[grammar(call),exp:ident(MKDEV),exp:ident(MTD_BLOCK_MAJOR),exp[grammar(record_ptr),exp:ident(mtd),ident(index)]]]],st_return[exp:const:int(0)]]],def[fname(get_sb_mtd_aux),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtd),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(sb),exp[grammar(call),exp:ident(sget),exp:ident(fs_type),exp:ident(get_sb_mtd_compare),exp:ident(get_sb_mtd_set),exp:ident(mtd)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(sb)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: New superblock for device %d (\"%s\")\n),exp[grammar(record_ptr),exp:ident(mtd),ident(index)],exp[grammar(record_ptr),exp:ident(mtd),ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(fill_super),exp:ident(sb),exp:ident(data),exp[grammar(cond3),exp[grammar(binary_arith),aop(&),exp:ident(flags),exp:ident(MS_SILENT)],exp:const:int(1),exp:const:int(0)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(sb),ident(s_umount)]]],estmt[exp[grammar(call),exp:ident(deactivate_super),exp:ident(sb)]],st_return[exp:ident(ret)]],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(sb),ident(s_flags)],exp:ident(MS_ACTIVE)]],st_return[exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(simple_set_mnt),exp:ident(mnt),exp:ident(sb)]]],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(get_sb_mtd_nr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mtdnr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(mtd)],{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(0),exp:const:string(MTDSB: Device #%u doesn't appear to exist\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(PTR_ERR),exp:ident(mtd)]]],estmt(NONE)],st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]]]],def[fname(get_sb_mtd),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fs_type),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(fill_super),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(2),exp:const:string(MTDSB: dev_name \"%s\"\n),exp:ident(dev_name)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(1)],exp:const:other(N/H)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(2)],exp:const:other(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)],exp:const:other(N/H)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd:%%s, name \"%s\"\n),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]],for[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(mtdnr),exp:ident(MAX_MTD_DEVICES)],exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtd),exp[grammar(call),exp:ident(get_mtd_device),exp:ident(NULL),exp:ident(mtdnr)]]],sel_if[exp:??(N/H),{}stmt[sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(get_sb_mtd_aux),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtd),exp:ident(fill_super),exp:ident(mnt)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp:ident(mtd)]]],estmt(NONE)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(4)]]]],sel_if[exp[grammar(call),exp:ident(isdigit),exp[grammar(array_acc),exp:ident(dev_name),exp:const:int(3)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(simple_strtoul),exp[grammar(binary_arith),aop(+),exp:ident(dev_name),exp:const:int(3)],exp:&ref:exp:ident(endptr),exp:const:int(0)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: mtd%%d, mtdnr %d\n),exp:ident(mtdnr)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]]],estmt(NONE)]],estmt(NONE)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(path_lookup),exp:ident(dev_name),exp:ident(LOOKUP_FOLLOW),exp:&ref:exp:ident(nd)]]],estmt[exp[grammar(call),exp:ident(DEBUG),exp:const:int(1),exp:const:string(MTDSB: path_lookup() returned %d, inode %p\n),exp:ident(ret),exp[grammar(cond3),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(NULL)]]],sel_if[exp:ident(ret),st_return[exp:ident(ret)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_flags)],exp:ident(MNT_NODEV)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp:ident(imajor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]],exp:ident(MTD_BLOCK_MAJOR)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mtdnr),exp[grammar(call),exp:ident(iminor),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]]]],estmt[exp[grammar(call),exp:ident(path_release),exp:&ref:exp:ident(nd)]],st_return[exp[grammar(call),exp:ident(get_sb_mtd_nr),exp:ident(fs_type),exp:ident(flags),exp:ident(dev_name),exp:ident(data),exp:ident(mtdnr),exp:ident(fill_super),exp:ident(mnt)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],mtop(N/H),def[fname(kill_mtd_super),funtype[fulltype[ctype[btype(void)]],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(generic_shutdown_super),exp:ident(sb)]],estmt[exp[grammar(call),exp:ident(put_mtd_device),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_mtd)],exp:ident(NULL)]]]],mtop(N/H)]
[Diff] resulting abstract updates: 1
[Main] Making safe parts for pair 4
prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(|),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(|),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Main] terms that changed: exp:ident(nd) 
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)] ==> exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]] ==> exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
[Diff] resulting abstract updates: 128
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
[Diff] resulting abstract updates: 128
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]
[Diff] resulting abstract updates: 192
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]]
[Diff] resulting abstract updates: 192
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]] ==> def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(|),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(|),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Diff] resulting abstract updates: 1
[Main] Making safe parts for pair 5
prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(dcache.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(crypto.h)],includeN[inc_elem(linux),inc_elem(fs_stack.h)],includeL[inc_elem(ecryptfs_kernel.h)],def[fname(lock_parent),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(call),exp:ident(dget),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)],exp:ident(I_MUTEX_PARENT)]],st_return[exp:ident(dir)]]],def[fname(unlock_parent),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],def[fname(unlock_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dir)]]]],def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_do_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(ecryptfs_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dir_dentry)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dir_dentry)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_create_underlying_file),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(__FUNCTION__),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(ecryptfs_dentry),exp[grammar(record_ptr),exp:ident(directory_inode),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Failure in ecryptfs_interpose\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),statem(N/H)]],def[fname(grow_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_file),exp:const:int(0),exp:sizeof:exp:ident(fake_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:ident(ecryptfs_dentry)]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(tmp_file_info),exp:const:int(0),exp:sizeof:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_file),exp:&ref:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(lower_file)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_file),exp:ident(zero_virt),exp:const:int(0),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp:ident(ecryptfs_inode),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(ecryptfs_inode)]]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(crypt_stat)],ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_initialize_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ecryptfs_dentry),ident(d_inode)],ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(This is a directory\n)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Initializing crypto context\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_new_file_context),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_metadata),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(grow_file),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)],statem(N/H)]],def[fname(ecryptfs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_do_create),exp:ident(directory_inode),exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:ident(rc)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_WARNING),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_initialize_file),exp:ident(ecryptfs_dentry)]]],statem(N/H)]],def[fname(ecryptfs_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dentry),ident(d_op)],exp:&ref:exp:ident(ecryptfs_dops)]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(1)],exp:??(N/H)],exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(2)],exp:??(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_namelen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:&ref:exp:ident(encoded_name)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_namelen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_namelen)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(encoded_name),exp:ident(encoded_namelen)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(lookup_one_len),exp:ident(encoded_name),exp:ident(lower_dir_dentry),exp[grammar(binary_arith),aop(-),exp:ident(encoded_namelen),exp:const:int(1)]]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_name)]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dentry)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(ERR from lower_dentry\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_mnt),exp[grammar(call),exp:ident(mntget),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(lower_dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_name)],ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_atime),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_private),exp:ident(dentry),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_dentry_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower),exp:ident(dentry),exp:ident(lower_dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower_mnt),exp:ident(dentry),exp:ident(lower_mnt)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(NULL)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(1)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Error interposing\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a directory; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISLNK),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a symlink; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(special_file),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a special file; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page_virt),exp[grammar(call),exp:ident(kmem_cache_zalloc),exp:ident(ecryptfs_header_cache_2),exp:ident(GFP_USER)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Cannot ecryptfs_kmalloc a page\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_set_default_sizes),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_header_region),exp:ident(page_virt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_xattr_region),exp:ident(page_virt),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(mount_crypt_stat),ident(flags)],exp:ident(ECRYPTFS_ENCRYPTED_VIEW_ENABLED)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)],exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(memcpy),exp:&ref:exp:ident(file_size),exp:ident(page_virt),exp:sizeof:exp:ident(file_size)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(be64_to_cpu),exp:ident(file_size)]]]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)]],def[fname(ecryptfs_link),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size_save),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_link),exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_new_dentry),exp:ident(new_dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(new_dentry),ident(d_inode)],exp:ident(file_size_save)]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(new_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(old_dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_unlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_unlink),exp:ident(lower_dir_inode),exp:ident(lower_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp:ident(lower_dir_inode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_ctime)],exp[grammar(record_ptr),exp:ident(dir),ident(i_ctime)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(symname),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mode),exp:ident(S_IALLUGO)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_symlen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp:ident(symname),exp[grammar(call),exp:ident(strlen),exp:ident(symname)],exp:&ref:exp:ident(encoded_symname)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_symlen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_symlen)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_symlink),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(encoded_symname),exp:ident(mode)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_symname)]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mkdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rmdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_delete),exp:ident(lower_dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(unlock_dir),exp:ident(lower_dir_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mknod),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mknod),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode),exp:ident(dev)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rename),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dir),fulltype[typec(N/H)]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(new_dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(call),exp:ident(lock_rename),exp:ident(lower_old_dir_dentry),exp:ident(lower_new_dir_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rename),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(new_dir),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(NULL)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_dir),exp:ident(old_dir)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(old_dir),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(NULL)]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_old_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],st_return[exp:ident(rc)]]],NCP(N/H),NCP(N/H),def[fname(ecryptfs_put_link),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp[grammar(call),exp:ident(nd_get_link),exp:ident(nd)]]]]],def[fname(upper_size_to_lower_size),funtype[fulltype[typec(N/H)],param[reg(),name(crypt_stat),fulltype[typec(N/H)]],param[reg(),name(upper_size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(upper_size),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(num_extents),exp[grammar(binary_arith),aop(>>),exp:ident(upper_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_shift)]]]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(upper_size),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(+=),exp:ident(lower_size),exp[grammar(binary_arith),aop(*),exp:ident(num_extents),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_size)]]]]],estmt(NONE)],st_return[exp:ident(lower_size)]]],def[fname(ecryptfs_truncate),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(new_length),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(eq),exp:ident(new_length),exp:ident(i_size)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_ecryptfs_file),exp:const:int(0),exp:sizeof:exp:ident(fake_ecryptfs_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_ecryptfs_file),ident(f_path)],ident(dentry)],exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_file_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(lower_file)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_length),exp:ident(i_size)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zero),exp[grammar(binary_arith),aop(-),exp:ident(new_length),exp:const:int(1)],exp:const:int(1)]]]],{}stmt[statem(N/H),sel_if[exp:ident(num_zeros),{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(zeros_virt),exp[grammar(call),exp:ident(kzalloc),exp:ident(num_zeros),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zeros_virt),exp:ident(new_length),exp:ident(num_zeros)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(zeros_virt)]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp:ident(inode),exp:ident(new_length)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(inode)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_before_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(i_size)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_after_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(new_length)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(lower_size_after_truncate),exp:ident(lower_size_before_truncate)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],exp:ident(lower_size_after_truncate)]],estmt(NONE)]]],statem(N/H),statem(N/H)]],def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(ia),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_init_crypt_stat),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(S_ISREG),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_metadata),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_truncate),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(ia),ident(ia_size)]]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(ia->ia_valid = [%x]\n),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(rc),exp:const:int(0)],statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp[grammar(binary_arith),aop(|),exp:ident(ATTR_KILL_SUID),exp:ident(ATTR_KILL_SGID)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(notify_change),exp:ident(lower_dentry),exp:ident(ia)]]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_setxattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(setxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size),exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr_lower),funtype[fulltype[typec(N/H)],param[reg(),name(lower_dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(getxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(ecryptfs_getxattr_lower),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)],exp:ident(name),exp:ident(value),exp:ident(size)]]]],def[fname(ecryptfs_listxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(list),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(listxattr)],exp:ident(lower_dentry),exp:ident(list),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_removexattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(removexattr)],exp:ident(lower_dentry),exp:ident(name)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_inode_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(candidate_lower_inode),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:??(N/H)],st_return[exp:const:int(1)],st_return[exp:const:int(0)]]]],def[fname(ecryptfs_inode_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(lower_inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_init_inode),exp:ident(inode),exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(dcache.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(crypto.h)],includeN[inc_elem(linux),inc_elem(fs_stack.h)],includeL[inc_elem(ecryptfs_kernel.h)],def[fname(lock_parent),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(call),exp:ident(dget),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)],exp:ident(I_MUTEX_PARENT)]],st_return[exp:ident(dir)]]],def[fname(unlock_parent),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],def[fname(unlock_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dir)]]]],def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_do_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(ecryptfs_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dir_dentry)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dir_dentry)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_create_underlying_file),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(__FUNCTION__),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(ecryptfs_dentry),exp[grammar(record_ptr),exp:ident(directory_inode),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Failure in ecryptfs_interpose\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),statem(N/H)]],def[fname(grow_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_file),exp:const:int(0),exp:sizeof:exp:ident(fake_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:ident(ecryptfs_dentry)]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(tmp_file_info),exp:const:int(0),exp:sizeof:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_file),exp:&ref:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(lower_file)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_file),exp:ident(zero_virt),exp:const:int(0),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp:ident(ecryptfs_inode),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(ecryptfs_inode)]]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(crypt_stat)],ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_initialize_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ecryptfs_dentry),ident(d_inode)],ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(This is a directory\n)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Initializing crypto context\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_new_file_context),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_metadata),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(grow_file),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)],statem(N/H)]],def[fname(ecryptfs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_do_create),exp:ident(directory_inode),exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:ident(rc)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_WARNING),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_initialize_file),exp:ident(ecryptfs_dentry)]]],statem(N/H)]],def[fname(ecryptfs_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dentry),ident(d_op)],exp:&ref:exp:ident(ecryptfs_dops)]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(1)],exp:??(N/H)],exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(2)],exp:??(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_namelen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:&ref:exp:ident(encoded_name)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_namelen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_namelen)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(encoded_name),exp:ident(encoded_namelen)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(lookup_one_len),exp:ident(encoded_name),exp:ident(lower_dir_dentry),exp[grammar(binary_arith),aop(-),exp:ident(encoded_namelen),exp:const:int(1)]]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_name)]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dentry)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(ERR from lower_dentry\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_mnt),exp[grammar(call),exp:ident(mntget),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(lower_dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_name)],ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_atime),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_private),exp:ident(dentry),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_dentry_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower),exp:ident(dentry),exp:ident(lower_dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower_mnt),exp:ident(dentry),exp:ident(lower_mnt)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(NULL)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(1)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Error interposing\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a directory; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISLNK),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a symlink; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(special_file),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a special file; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page_virt),exp[grammar(call),exp:ident(kmem_cache_zalloc),exp:ident(ecryptfs_header_cache_2),exp:ident(GFP_USER)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Cannot ecryptfs_kmalloc a page\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_set_default_sizes),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_header_region),exp:ident(page_virt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_xattr_region),exp:ident(page_virt),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(mount_crypt_stat),ident(flags)],exp:ident(ECRYPTFS_ENCRYPTED_VIEW_ENABLED)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)],exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(memcpy),exp:&ref:exp:ident(file_size),exp:ident(page_virt),exp:sizeof:exp:ident(file_size)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(be64_to_cpu),exp:ident(file_size)]]]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)]],def[fname(ecryptfs_link),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size_save),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_link),exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_new_dentry),exp:ident(new_dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(new_dentry),ident(d_inode)],exp:ident(file_size_save)]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(new_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(old_dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_unlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_unlink),exp:ident(lower_dir_inode),exp:ident(lower_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp:ident(lower_dir_inode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_ctime)],exp[grammar(record_ptr),exp:ident(dir),ident(i_ctime)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(symname),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mode),exp:ident(S_IALLUGO)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_symlen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp:ident(symname),exp[grammar(call),exp:ident(strlen),exp:ident(symname)],exp:&ref:exp:ident(encoded_symname)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_symlen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_symlen)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_symlink),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(encoded_symname),exp:ident(mode)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_symname)]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mkdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rmdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_delete),exp:ident(lower_dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(unlock_dir),exp:ident(lower_dir_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mknod),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mknod),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode),exp:ident(dev)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rename),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dir),fulltype[typec(N/H)]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(new_dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(call),exp:ident(lock_rename),exp:ident(lower_old_dir_dentry),exp:ident(lower_new_dir_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rename),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(new_dir),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(NULL)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_dir),exp:ident(old_dir)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(old_dir),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(NULL)]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_old_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],st_return[exp:ident(rc)]]],NCP(N/H),NCP(N/H),def[fname(ecryptfs_put_link),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp[grammar(call),exp:ident(nd_get_link),exp:ident(nd)]]]]],def[fname(upper_size_to_lower_size),funtype[fulltype[typec(N/H)],param[reg(),name(crypt_stat),fulltype[typec(N/H)]],param[reg(),name(upper_size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(upper_size),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(num_extents),exp[grammar(binary_arith),aop(>>),exp:ident(upper_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_shift)]]]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(upper_size),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(+=),exp:ident(lower_size),exp[grammar(binary_arith),aop(*),exp:ident(num_extents),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_size)]]]]],estmt(NONE)],st_return[exp:ident(lower_size)]]],def[fname(ecryptfs_truncate),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(new_length),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(eq),exp:ident(new_length),exp:ident(i_size)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_ecryptfs_file),exp:const:int(0),exp:sizeof:exp:ident(fake_ecryptfs_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_ecryptfs_file),ident(f_path)],ident(dentry)],exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_file_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(lower_file)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_length),exp:ident(i_size)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zero),exp[grammar(binary_arith),aop(-),exp:ident(new_length),exp:const:int(1)],exp:const:int(1)]]]],{}stmt[statem(N/H),sel_if[exp:ident(num_zeros),{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(zeros_virt),exp[grammar(call),exp:ident(kzalloc),exp:ident(num_zeros),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zeros_virt),exp:ident(new_length),exp:ident(num_zeros)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(zeros_virt)]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp:ident(inode),exp:ident(new_length)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(inode)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_before_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(i_size)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_after_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(new_length)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(lower_size_after_truncate),exp:ident(lower_size_before_truncate)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],exp:ident(lower_size_after_truncate)]],estmt(NONE)]]],statem(N/H),statem(N/H)]],def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(ia),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_init_crypt_stat),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(S_ISREG),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_metadata),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_truncate),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(ia),ident(ia_size)]]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(ia->ia_valid = [%x]\n),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(rc),exp:const:int(0)],statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp[grammar(binary_arith),aop(|),exp:ident(ATTR_KILL_SUID),exp:ident(ATTR_KILL_SGID)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(notify_change),exp:ident(lower_dentry),exp:ident(ia)]]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_setxattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(setxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size),exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr_lower),funtype[fulltype[typec(N/H)],param[reg(),name(lower_dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(getxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(ecryptfs_getxattr_lower),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)],exp:ident(name),exp:ident(value),exp:ident(size)]]]],def[fname(ecryptfs_listxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(list),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(listxattr)],exp:ident(lower_dentry),exp:ident(list),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_removexattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(removexattr)],exp:ident(lower_dentry),exp:ident(name)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_inode_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(candidate_lower_inode),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:??(N/H)],st_return[exp:const:int(1)],st_return[exp:const:int(0)]]]],def[fname(ecryptfs_inode_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(lower_inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_init_inode),exp:ident(inode),exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H)]
[Main] terms that changed: exp:ident(nd) grammar(record_ptr) 
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 16
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]] ==> {}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]] ==> sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]] ==> {}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]] ==> def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmount_save)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmount_save)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(lower_mnt)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(lower_mnt)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(lower_dentry)]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(lower_dentry)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 8
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]] ==> exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 8
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 32
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]] ==> def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]]
[Diff] resulting abstract updates: 1
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(dcache.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(crypto.h)],includeN[inc_elem(linux),inc_elem(fs_stack.h)],includeL[inc_elem(ecryptfs_kernel.h)],def[fname(lock_parent),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(call),exp:ident(dget),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)],exp:ident(I_MUTEX_PARENT)]],st_return[exp:ident(dir)]]],def[fname(unlock_parent),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],def[fname(unlock_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dir)]]]],def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_do_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(ecryptfs_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dir_dentry)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dir_dentry)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_create_underlying_file),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(__FUNCTION__),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(ecryptfs_dentry),exp[grammar(record_ptr),exp:ident(directory_inode),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Failure in ecryptfs_interpose\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),statem(N/H)]],def[fname(grow_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_file),exp:const:int(0),exp:sizeof:exp:ident(fake_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:ident(ecryptfs_dentry)]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(tmp_file_info),exp:const:int(0),exp:sizeof:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_file),exp:&ref:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(lower_file)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_file),exp:ident(zero_virt),exp:const:int(0),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp:ident(ecryptfs_inode),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(ecryptfs_inode)]]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(crypt_stat)],ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_initialize_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ecryptfs_dentry),ident(d_inode)],ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(This is a directory\n)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Initializing crypto context\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_new_file_context),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_metadata),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(grow_file),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)],statem(N/H)]],def[fname(ecryptfs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_do_create),exp:ident(directory_inode),exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:ident(rc)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_WARNING),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_initialize_file),exp:ident(ecryptfs_dentry)]]],statem(N/H)]],def[fname(ecryptfs_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dentry),ident(d_op)],exp:&ref:exp:ident(ecryptfs_dops)]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(1)],exp:??(N/H)],exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(2)],exp:??(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_namelen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:&ref:exp:ident(encoded_name)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_namelen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_namelen)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(encoded_name),exp:ident(encoded_namelen)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(lookup_one_len),exp:ident(encoded_name),exp:ident(lower_dir_dentry),exp[grammar(binary_arith),aop(-),exp:ident(encoded_namelen),exp:const:int(1)]]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_name)]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dentry)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(ERR from lower_dentry\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_mnt),exp[grammar(call),exp:ident(mntget),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(lower_dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_name)],ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_atime),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_private),exp:ident(dentry),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_dentry_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower),exp:ident(dentry),exp:ident(lower_dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower_mnt),exp:ident(dentry),exp:ident(lower_mnt)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(NULL)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(1)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Error interposing\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a directory; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISLNK),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a symlink; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(special_file),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a special file; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page_virt),exp[grammar(call),exp:ident(kmem_cache_zalloc),exp:ident(ecryptfs_header_cache_2),exp:ident(GFP_USER)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Cannot ecryptfs_kmalloc a page\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_set_default_sizes),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_header_region),exp:ident(page_virt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_xattr_region),exp:ident(page_virt),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(mount_crypt_stat),ident(flags)],exp:ident(ECRYPTFS_ENCRYPTED_VIEW_ENABLED)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)],exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(memcpy),exp:&ref:exp:ident(file_size),exp:ident(page_virt),exp:sizeof:exp:ident(file_size)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(be64_to_cpu),exp:ident(file_size)]]]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)]],def[fname(ecryptfs_link),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size_save),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_link),exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_new_dentry),exp:ident(new_dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(new_dentry),ident(d_inode)],exp:ident(file_size_save)]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(new_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(old_dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_unlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_unlink),exp:ident(lower_dir_inode),exp:ident(lower_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp:ident(lower_dir_inode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_ctime)],exp[grammar(record_ptr),exp:ident(dir),ident(i_ctime)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(symname),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mode),exp:ident(S_IALLUGO)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_symlen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp:ident(symname),exp[grammar(call),exp:ident(strlen),exp:ident(symname)],exp:&ref:exp:ident(encoded_symname)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_symlen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_symlen)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_symlink),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(encoded_symname),exp:ident(mode)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_symname)]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mkdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rmdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_delete),exp:ident(lower_dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(unlock_dir),exp:ident(lower_dir_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mknod),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mknod),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode),exp:ident(dev)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rename),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dir),fulltype[typec(N/H)]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(new_dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(call),exp:ident(lock_rename),exp:ident(lower_old_dir_dentry),exp:ident(lower_new_dir_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rename),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(new_dir),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(NULL)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_dir),exp:ident(old_dir)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(old_dir),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(NULL)]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_old_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],st_return[exp:ident(rc)]]],NCP(N/H),NCP(N/H),def[fname(ecryptfs_put_link),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp[grammar(call),exp:ident(nd_get_link),exp:ident(nd)]]]]],def[fname(upper_size_to_lower_size),funtype[fulltype[typec(N/H)],param[reg(),name(crypt_stat),fulltype[typec(N/H)]],param[reg(),name(upper_size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(upper_size),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(num_extents),exp[grammar(binary_arith),aop(>>),exp:ident(upper_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_shift)]]]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(upper_size),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(+=),exp:ident(lower_size),exp[grammar(binary_arith),aop(*),exp:ident(num_extents),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_size)]]]]],estmt(NONE)],st_return[exp:ident(lower_size)]]],def[fname(ecryptfs_truncate),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(new_length),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(eq),exp:ident(new_length),exp:ident(i_size)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_ecryptfs_file),exp:const:int(0),exp:sizeof:exp:ident(fake_ecryptfs_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_ecryptfs_file),ident(f_path)],ident(dentry)],exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_file_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(lower_file)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_length),exp:ident(i_size)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zero),exp[grammar(binary_arith),aop(-),exp:ident(new_length),exp:const:int(1)],exp:const:int(1)]]]],{}stmt[statem(N/H),sel_if[exp:ident(num_zeros),{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(zeros_virt),exp[grammar(call),exp:ident(kzalloc),exp:ident(num_zeros),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zeros_virt),exp:ident(new_length),exp:ident(num_zeros)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(zeros_virt)]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp:ident(inode),exp:ident(new_length)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(inode)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_before_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(i_size)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_after_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(new_length)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(lower_size_after_truncate),exp:ident(lower_size_before_truncate)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],exp:ident(lower_size_after_truncate)]],estmt(NONE)]]],statem(N/H),statem(N/H)]],def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(ia),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_init_crypt_stat),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(S_ISREG),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_metadata),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_truncate),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(ia),ident(ia_size)]]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(ia->ia_valid = [%x]\n),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(rc),exp:const:int(0)],statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp[grammar(binary_arith),aop(|),exp:ident(ATTR_KILL_SUID),exp:ident(ATTR_KILL_SGID)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(notify_change),exp:ident(lower_dentry),exp:ident(ia)]]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_setxattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(setxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size),exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr_lower),funtype[fulltype[typec(N/H)],param[reg(),name(lower_dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(getxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(ecryptfs_getxattr_lower),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)],exp:ident(name),exp:ident(value),exp:ident(size)]]]],def[fname(ecryptfs_listxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(list),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(listxattr)],exp:ident(lower_dentry),exp:ident(list),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_removexattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(removexattr)],exp:ident(lower_dentry),exp:ident(name)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_inode_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(candidate_lower_inode),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:??(N/H)],st_return[exp:const:int(1)],st_return[exp:const:int(0)]]]],def[fname(ecryptfs_inode_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(lower_inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_init_inode),exp:ident(inode),exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(dcache.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(crypto.h)],includeN[inc_elem(linux),inc_elem(fs_stack.h)],includeL[inc_elem(ecryptfs_kernel.h)],def[fname(lock_parent),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(call),exp:ident(dget),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(call),exp:ident(mutex_lock_nested),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)],exp:ident(I_MUTEX_PARENT)]],st_return[exp:ident(dir)]]],def[fname(unlock_parent),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],def[fname(unlock_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dir)]]]],def[fname(ecryptfs_create_underlying_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lower_dir_inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(vfsmount_save),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(lower_mnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_create),exp:ident(lower_dir_inode),exp:ident(lower_dentry),exp:ident(mode),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmount_save)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_do_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(ecryptfs_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dir_dentry)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dir_dentry)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_create_underlying_file),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(__FUNCTION__),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(ecryptfs_dentry),exp[grammar(record_ptr),exp:ident(directory_inode),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Failure in ecryptfs_interpose\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(directory_inode),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),statem(N/H)]],def[fname(grow_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_file),exp:const:int(0),exp:sizeof:exp:ident(fake_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_file),ident(f_path)],ident(dentry)],exp:ident(ecryptfs_dentry)]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(tmp_file_info),exp:const:int(0),exp:sizeof:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_file),exp:&ref:exp:ident(tmp_file_info)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(lower_file)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_file),exp:ident(zero_virt),exp:const:int(0),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp:ident(ecryptfs_inode),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(ecryptfs_inode)]]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp:ident(ecryptfs_inode)],ident(crypt_stat)],ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_initialize_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ecryptfs_dentry),ident(d_inode)],ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(This is a directory\n)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_NEW_FILE)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Initializing crypto context\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_new_file_context),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_metadata),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(grow_file),exp:ident(ecryptfs_dentry)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)],statem(N/H)]],def[fname(ecryptfs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(directory_inode),fulltype[typec(N/H)]],param[reg(),name(ecryptfs_dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_do_create),exp:ident(directory_inode),exp:ident(ecryptfs_dentry),exp:ident(mode),exp:ident(nd)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:ident(rc)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_WARNING),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_initialize_file),exp:ident(ecryptfs_dentry)]]],statem(N/H)]],def[fname(ecryptfs_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dentry),ident(d_op)],exp:&ref:exp:ident(ecryptfs_dops)]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(1)],exp:??(N/H)],exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:const:int(2)],exp:??(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_namelen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(len)],exp:&ref:exp:ident(encoded_name)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_namelen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_namelen)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(encoded_name),exp:ident(encoded_namelen)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(lookup_one_len),exp:ident(encoded_name),exp:ident(lower_dir_dentry),exp[grammar(binary_arith),aop(-),exp:ident(encoded_namelen),exp:const:int(1)]]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_name)]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(lower_dentry)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(ERR from lower_dentry\n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_mnt),exp[grammar(call),exp:ident(mntget),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)]]]]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp:ident(lower_dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_name)],ident(name)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_atime),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_private),exp:ident(dentry),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_dentry_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower),exp:ident(dentry),exp:ident(lower_dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_dentry_lower_mnt),exp:ident(dentry),exp:ident(lower_mnt)]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(NULL)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(1)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Error interposing\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a directory; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(S_ISLNK),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a symlink; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(special_file),exp[grammar(record_ptr),exp:ident(lower_inode),ident(i_mode)]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(Is a special file; returning\n)]],statem(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page_virt),exp[grammar(call),exp:ident(kmem_cache_zalloc),exp:ident(ecryptfs_header_cache_2),exp:ident(GFP_USER)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_ERR),exp:const:string(Cannot ecryptfs_kmalloc a page\n)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_set_default_sizes),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_header_region),exp:ident(page_virt),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_and_validate_xattr_region),exp:ident(page_virt),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(mount_crypt_stat),ident(flags)],exp:ident(ECRYPTFS_ENCRYPTED_VIEW_ENABLED)],{}stmt[sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:ident(ECRYPTFS_METADATA_IN_XATTR)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)],exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(memcpy),exp:&ref:exp:ident(file_size),exp:ident(page_virt),exp:sizeof:exp:ident(file_size)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size),exp[grammar(call),exp:ident(be64_to_cpu),exp:ident(file_size)]]]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(ecryptfs_header_cache_2),exp:ident(page_virt)]],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H)]],def[fname(ecryptfs_link),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(file_size_save),exp[grammar(call),exp:ident(i_size_read),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_link),exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_new_dentry),exp:ident(new_dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(old_dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(i_size_write),exp[grammar(record_ptr),exp:ident(new_dentry),ident(d_inode)],exp:ident(file_size_save)]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(new_dentry)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(old_dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_unlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_unlink),exp:ident(lower_dir_inode),exp:ident(lower_dentry)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp:ident(lower_dir_inode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_nlink)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_ctime)],exp[grammar(record_ptr),exp:ident(dir),ident(i_ctime)]]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(symname),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mode),exp:ident(S_IALLUGO)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(encoded_symlen),exp[grammar(call),exp:ident(ecryptfs_encode_filename),exp:ident(crypt_stat),exp:ident(symname),exp[grammar(call),exp:ident(strlen),exp:ident(symname)],exp:&ref:exp:ident(encoded_symname)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(encoded_symlen),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:ident(encoded_symlen)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_symlink),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(encoded_symname),exp:ident(mode)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(encoded_symname)]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mkdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rmdir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_delete),exp:ident(lower_dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(dir),ident(i_nlink)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],ident(i_nlink)]]],estmt[exp[grammar(call),exp:ident(unlock_dir),exp:ident(lower_dir_dentry)]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_mknod),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dir_dentry),exp[grammar(call),exp:ident(lock_parent),exp:ident(lower_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_mknod),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)],exp:ident(lower_dentry),exp:ident(mode),exp:ident(dev)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp:ident(rc),exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_interpose),exp:ident(lower_dentry),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp:const:int(0)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_times),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],estmt[exp[grammar(call),exp:ident(fsstack_copy_inode_size),exp:ident(dir),exp[grammar(record_ptr),exp:ident(lower_dir_dentry),ident(d_inode)]]],statem(N/H),sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dentry)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(ecryptfs_rename),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(old_dir),fulltype[typec(N/H)]],param[reg(),name(old_dentry),fulltype[typec(N/H)]],param[reg(),name(new_dir),fulltype[typec(N/H)]],param[reg(),name(new_dentry),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(new_dentry)]]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_old_dentry)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(lower_new_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_old_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_old_dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_new_dir_dentry),exp[grammar(call),exp:ident(dget_parent),exp:ident(lower_new_dentry)]]],estmt[exp[grammar(call),exp:ident(lock_rename),exp:ident(lower_old_dir_dentry),exp:ident(lower_new_dir_dentry)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(vfs_rename),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(lower_old_dentry),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(lower_new_dentry)]]],sel_if[exp:ident(rc),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(new_dir),exp[grammar(record_ptr),exp:ident(lower_new_dir_dentry),ident(d_inode)],exp:ident(NULL)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_dir),exp:ident(old_dir)],estmt[exp[grammar(call),exp:ident(fsstack_copy_attr_all),exp:ident(old_dir),exp[grammar(record_ptr),exp:ident(lower_old_dir_dentry),ident(d_inode)],exp:ident(NULL)]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_new_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(lower_old_dentry),ident(d_parent)]]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_new_dentry)]],estmt[exp[grammar(call),exp:ident(dput),exp:ident(lower_old_dentry)]],st_return[exp:ident(rc)]]],NCP(N/H),NCP(N/H),def[fname(ecryptfs_put_link),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kfree),exp[grammar(call),exp:ident(nd_get_link),exp:ident(nd)]]]]],def[fname(upper_size_to_lower_size),funtype[fulltype[typec(N/H)],param[reg(),name(crypt_stat),fulltype[typec(N/H)]],param[reg(),name(upper_size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(num_header_bytes_at_front)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(upper_size),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(num_extents),exp[grammar(binary_arith),aop(>>),exp:ident(upper_size),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_shift)]]]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(upper_size),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(+=),exp:ident(lower_size),exp[grammar(binary_arith),aop(*),exp:ident(num_extents),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(extent_size)]]]]],estmt(NONE)],st_return[exp:ident(lower_size)]]],def[fname(ecryptfs_truncate),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(new_length),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(unlikely),exp[grammar(binary_logi),logiop(eq),exp:ident(new_length),exp:ident(i_size)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],estmt[exp[grammar(call),exp:ident(memset),exp:&ref:exp:ident(fake_ecryptfs_file),exp:const:int(0),exp:sizeof:exp:ident(fake_ecryptfs_file)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(fake_ecryptfs_file),ident(f_path)],ident(dentry)],exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_private),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(ecryptfs_file_info_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(call),exp:ident(unlikely),exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(ecryptfs_set_file_lower),exp:&ref:exp:ident(fake_ecryptfs_file),exp[grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(lower_file)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(new_length),exp:ident(i_size)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zero),exp[grammar(binary_arith),aop(-),exp:ident(new_length),exp:const:int(1)],exp:const:int(1)]]]],{}stmt[statem(N/H),sel_if[exp:ident(num_zeros),{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(zeros_virt),exp[grammar(call),exp:ident(kzalloc),exp:ident(num_zeros),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write),exp:&ref:exp:ident(fake_ecryptfs_file),exp:ident(zeros_virt),exp:ident(new_length),exp:ident(num_zeros)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(zeros_virt)]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp:ident(inode),exp:ident(new_length)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_write_inode_size_to_metadata),exp:ident(inode)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(rc)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_before_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(i_size)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_size_after_truncate),exp[grammar(call),exp:ident(upper_size_to_lower_size),exp:ident(crypt_stat),exp:ident(new_length)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(lower_size_after_truncate),exp:ident(lower_size_before_truncate)],estmt[exp[grammar(call),exp:ident(vmtruncate),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],exp:ident(lower_size_after_truncate)]],estmt(NONE)]]],statem(N/H),statem(N/H)]],def[fname(ecryptfs_permission),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(mask),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:ident(nd),{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower_mnt),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(nd)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(vfsmnt_save)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp:ident(dentry_save)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(permission),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:ident(mask),exp:ident(NULL)]]]],st_return[exp:ident(rc)]]],def[fname(ecryptfs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(ia),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_inode_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(crypt_stat)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(ecryptfs_init_crypt_stat),exp:ident(crypt_stat)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_inode),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(call),exp:ident(S_ISDIR),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(S_ISREG),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],ident(i_mode)]],exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(mount_crypt_stat),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(call),exp:ident(ecryptfs_superblock_to_private),exp[grammar(record_ptr),exp:ident(dentry),ident(d_sb)]],ident(mount_crypt_stat)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_read_metadata),exp:ident(dentry)]]],sel_if[exp:ident(rc),{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:const:int(0)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(crypt_stat),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(crypt_stat),ident(cs_mutex)]]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:ident(ATTR_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ecryptfs_truncate),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(ia),ident(ia_size)]]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(ecryptfs_printk),exp:ident(KERN_DEBUG),exp:const:string(ia->ia_valid = [%x]\n),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(rc),exp:const:int(0)],statem(N/H),estmt(NONE)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp[grammar(binary_arith),aop(|),exp:ident(ATTR_KILL_SUID),exp:ident(ATTR_KILL_SGID)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(ia),ident(ia_valid)],exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(notify_change),exp:ident(lower_dentry),exp:ident(ia)]]],statem(N/H),st_return[exp:ident(rc)]]],def[fname(ecryptfs_setxattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(setxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size),exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr_lower),funtype[fulltype[typec(N/H)],param[reg(),name(lower_dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(getxattr)],exp:ident(lower_dentry),exp:ident(name),exp:ident(value),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_getxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(ecryptfs_getxattr_lower),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)],exp:ident(name),exp:ident(value),exp:ident(size)]]]],def[fname(ecryptfs_listxattr),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(list),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(listxattr)],exp:ident(lower_dentry),exp:ident(list),exp:ident(size)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_removexattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(lower_dentry),exp[grammar(call),exp:ident(ecryptfs_dentry_to_lower),exp:ident(dentry)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp:??(N/H)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_op)],ident(removexattr)],exp:ident(lower_dentry),exp:ident(name)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(lower_dentry),ident(d_inode)],ident(i_mutex)]]],statem(N/H)]],def[fname(ecryptfs_inode_test),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(candidate_lower_inode),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(ecryptfs_inode_to_lower),exp:ident(inode)],exp:??(N/H)],st_return[exp:const:int(1)],st_return[exp:const:int(0)]]]],def[fname(ecryptfs_inode_set),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(lower_inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ecryptfs_init_inode),exp:ident(inode),exp:??(N/H)]],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H)]
[Diff] resulting abstract updates: 1
[Main] solution #1
{{{
	exp[meta(X0),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(dentry)]
	exp[meta(X0),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(mnt)]
}}}
[Main] solution #2
{{{
	exp[meta(X0),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(dentry)]
	exp[meta(X0),meta(X1),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X0),meta(X1),ident(path)],ident(mnt)]
}}}
[Main] solution #3
{{{
	exp[meta(X0),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(mnt)]
	exp[meta(X0),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(dentry)]
}}}
[Main] solution #4
{{{
	exp[meta(X0),meta(X1),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X0),meta(X1),ident(path)],ident(mnt)]
	exp[meta(X0),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(dentry)]
}}}
