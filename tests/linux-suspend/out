Spec. file is: specfile
Comment
Comment
Parsed two: ata_piix.c.orig, ata_piix.c.new
Comment
Parsed two: pmac.c.orig, pmac.c.new
Parsed two: mediabay.c.orig, mediabay.c.new
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Comment
Reading file pair mediabay.c.orig mediabay.c.new
Reading file pair pmac.c.orig pmac.c.new
Reading file pair ata_piix.c.orig ata_piix.c.new
[Main] Common subterms: [Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],includeN[inc_elem(linux),inc_elem(scatterlist.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(dbdma.h)],includeN[inc_elem(asm),inc_elem(ide.h)],includeN[inc_elem(asm),inc_elem(pci-bridge.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(irq.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeL[inc_elem(..),inc_elem(ide-timing.h)],define(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(kauai_lookup_timing),funtype[fulltype[typec(N/H)],param[reg(),name(table),fulltype[typec(N/H)]],param[reg(),name(cycle_time),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp:ident(i)],ident(cycle_time)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(cycle_time),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp[grammar(binary_arith),aop(+),exp:ident(i),exp:const:int(1)]],ident(cycle_time)]],st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp:ident(i)],ident(timing_reg)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(BUG)]],st_return[exp:const:int(0)]]],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(pmac_ide_init_hwif_ports),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hw),fulltype[typec(N/H)]],param[reg(),name(data_port),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ctrl_port),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(irq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(data_port),exp:const:int(0)],statem(N/H),estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(data_port),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],statem(N/H),estmt(NONE)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],statem(N/H),estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:const:int(8)],exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(hw),ident(io_ports)],exp:ident(i)],exp[grammar(binary_arith),aop(+),exp:ident(data_port),exp[grammar(binary_arith),aop(*),exp:ident(i),exp:const:int(0x10)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(hw),ident(io_ports)],exp:const:int(8)],exp[grammar(binary_arith),aop(+),exp:ident(data_port),exp:const:int(0x160)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(irq),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(irq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(irq)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(hw),ident(dev)],exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(mdev)],ident(ofdev)],ident(dev)]]]]],NCP(N/H),def[fname(pmac_ide_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]]],estmt[exp:??(N/H)]]],def[fname(pmac_ide_kauai_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_PIO_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(3)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_ULTRA_CONFIG)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_PIO_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(2)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_ULTRA_CONFIG)]]]]],estmt[exp:??(N/H)]]],def[fname(pmac_ide_do_update_timings),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_sh_ata6)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_un_ata6)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_k2_ata6)]],estmt[exp[grammar(call),exp:ident(pmac_ide_kauai_selectproc),exp:ident(drive)]],estmt[exp[grammar(call),exp:ident(pmac_ide_selectproc),exp:ident(drive)]]]]],NCP(N/H),def[fname(pmac_ide_set_pio_mode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(t),exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycle_time),exp[grammar(call),exp:ident(ide_pio_cycle_time),exp:ident(drive),exp:ident(pio)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp:ident(pio),exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp:ident(t)]],estmt[exp[grammar(call),exp:ident(pmac_ide_do_update_timings),exp:ident(drive)]]]],def[fname(set_timings_udma_ata4),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_4)],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rdyToPauseTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(rdy2pause)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(wrDataSetupTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(wrDataSetup)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addrTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(addrSetup)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(timings),exp:??(N/H)],exp[grammar(binary_arith),aop(<<),exp:ident(wrDataSetupTicks),exp:ident(TR_66_UDMA_WRDATASETUP_SHIFT)]],exp[grammar(binary_arith),aop(<<),exp:ident(rdyToPauseTicks),exp:ident(TR_66_UDMA_RDY2PAUS_SHIFT)]],exp[grammar(binary_arith),aop(<<),exp:ident(addrTicks),exp:ident(TR_66_UDMA_ADDRSETUP_SHIFT)]],exp:ident(TR_66_UDMA_EN)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)],exp:*ref:exp:ident(timings)]],st_return[exp:const:int(0)]]],def[fname(set_timings_udma_ata6),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pio_timings),fulltype[typec(N/H)]],param[reg(),name(ultra_timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_5)],exp[grammar(binary_logi),logiop(eq),exp:ident(t),exp:ident(NULL)]],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(tr),exp[grammar(call),exp:ident(kauai_lookup_timing),exp:ident(kauai_udma_timings),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(ultra_timings),exp:??(N/H)],exp:ident(tr)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp:*ref:exp:ident(ultra_timings),exp:ident(TR_100_UDMAREG_UDMA_EN)]]],st_return[exp:const:int(0)]]],def[fname(set_timings_udma_shasta),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pio_timings),fulltype[typec(N/H)]],param[reg(),name(ultra_timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_6)],exp[grammar(binary_logi),logiop(eq),exp:ident(t),exp:ident(NULL)]],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(tr),exp[grammar(call),exp:ident(kauai_lookup_timing),exp:ident(shasta_udma133_timings),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(ultra_timings),exp:??(N/H)],exp:ident(tr)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp:*ref:exp:ident(ultra_timings),exp:ident(TR_133_UDMAREG_UDMA_EN)]]],st_return[exp:const:int(0)]]],def[fname(set_timings_mdma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(intf_type),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(timings),fulltype[typec(N/H)]],param[reg(),name(timings2),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(id),ident(field_valid)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(id),ident(eide_dma_time)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp[grammar(call),exp:ident(max_t),argtype(N/H),exp[grammar(record_ptr),exp:ident(id),ident(eide_dma_time)],exp:ident(cycleTime)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(intf_type),exp:ident(controller_ohare)],exp[grammar(binary_logi),logiop(??),exp:ident(cycleTime),exp:const:int(150)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp:const:int(150)]],estmt(NONE)],statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(tm),exp:ident(NULL)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:??(N/H)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp[grammar(binary_arith),aop(+),exp:ident(i),exp:const:int(1)]],ident(cycleTime)],exp:ident(cycleTime)],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(cycleTime)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(accessTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(accessTime)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(recTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(recoveryTime)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp:ident(cycleTime),exp:ident(accessTime),exp:ident(recTime)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)],exp:*ref:exp:ident(timings)]]]],def[fname(pmac_ide_set_dma_mode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings2),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp[grammar(binary_arith),aop(+),exp:ident(unit),exp:const:int(2)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:*ref:exp:ident(timings2)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_kl_ata4)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_ata4),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp:ident(speed)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_un_ata6)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_k2_ata6)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_ata6),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_sh_ata6)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_shasta),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]]]]]],estmt[exp[grammar(call),exp:ident(set_timings_mdma),exp:ident(drive),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp[grammar(array_acc),exp:ident(tl),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings2),exp[grammar(array_acc),exp:ident(tl),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(pmac_ide_do_update_timings),exp:ident(drive)]]]],def[fname(sanitize_timings),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pmif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp:ident(value)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(2)],exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(3)],exp:ident(value2)]]]]],def[fname(pmac_ide_get_base),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(index)],ident(regbase)]]]],def[fname(pmac_ide_check_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],st_return[exp:ident(ix)],estmt(NONE)]],st_return[exp:??(N/H)]]],def[fname(pmac_ide_get_irq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(irq)]],estmt(NONE)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),def[fname(pmac_ide_do_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hwif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(disable_irq),exp[grammar(record_ptr),exp:ident(pmif),ident(irq)]]],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(mediabay)],st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(&=),exp:ident(fcr),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(writel),exp:ident(fcr),exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)]]]],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_ENABLE),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(pmac_ide_do_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hwif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_RESET),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(1)]],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_ENABLE),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(msleep),exp:const:int(10)]],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_RESET),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(0)]],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(fcr),exp[grammar(binary_arith),aop(|),exp:ident(KAUAI_FCR_UATA_RESET_N),exp:ident(KAUAI_FCR_UATA_ENABLE)]]],estmt[exp[grammar(call),exp:ident(writel),exp:ident(fcr),exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(msleep),exp[grammar(call),exp:ident(jiffies_to_msecs),exp:ident(IDE_WAKEUP_DELAY)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(sanitize_timings),exp:ident(pmif)]],estmt[exp[grammar(call),exp:ident(enable_irq),exp[grammar(record_ptr),exp:ident(pmif),ident(irq)]]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(pmac_ide_macio_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_resume),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],NCP(N/H),def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(pmac_ide_pci_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_resume),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_destroy_dmatable),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(hwif),ident(sg_nents)],{}stmt[estmt[exp[grammar(call),exp:ident(ide_destroy_dmatable),exp:ident(drive)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(hwif),ident(sg_nents)],exp:const:int(0)]]],estmt(NONE)]]],def[fname(pmac_ide_dma_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ata4),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_kl_ata4)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ide_map_sg),exp:ident(drive),exp:ident(rq)]],st_return[exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp:ident(ata4),exp[grammar(binary_arith),aop(&),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)],exp:ident(TR_66_UDMA_EN)]],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(binary_arith),aop(+),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)],exp[grammar(cond3),exp:??(N/H),exp:const:int(0x00800000UL),exp:const:int(0)]],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]],estmt[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(drive),ident(waiting_for_dma)],exp:const:int(1)]],st_return[exp:const:int(0)]]],def[fname(pmac_ide_dma_exec_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(command),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ide_execute_command),exp:ident(drive),exp:ident(command),exp:&ref:exp:ident(ide_dma_intr),exp[grammar(binary_arith),aop(*),exp:const:int(2),exp:ident(WAIT_CMD)],exp:ident(NULL)]]]],NCP(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_dma_host_set),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(on),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[]],NCP(N/H),NCP(N/H),mtop(N/H)]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
mtop(N/H) NCP(N/H) decl(N/H) st_return[exp:const:int(0)] exp:const:int(0) estmt(NONE) grammar(record_ptr) grammar(exp) grammar(&ref) grammar(call) simple_assi(=) grammar(assign) statem(N/H) exp:const:int(1) logiop(??) grammar(binary_logi) ident(dev) grammar(record_acc) ident(event) fulltype[typec(N/H)] typec(N/H) reg() fulltype[ctype[btype[itype[sgn(signed),base(int)]]]] ctype[btype[itype[sgn(signed),base(int)]]] btype[itype[sgn(signed),base(int)]] itype[sgn(signed),base(int)] base(int) sgn(signed) exp:ident(PM_EVENT_SUSPEND) logiop(eq) logiop(and) exp:ident(i) grammar(array_acc) exp:??(N/H) exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)] fulltype[ctype[btype(void)]] ctype[btype(void)] btype(void) st_return[exp:??(N/H)] fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]] ctype[btype[itype[sgn(unsigned),base(long)]]] btype[itype[sgn(unsigned),base(long)]] itype[sgn(unsigned),base(long)] base(long) sgn(unsigned) exp:const:other(N/H) grammar(binary_arith) aop(&) estmt[exp:??(N/H)] define(N/H) inc_elem(linux) includeN[inc_elem(linux),inc_elem(init.h)] inc_elem(init.h) includeN[inc_elem(linux),inc_elem(delay.h)] inc_elem(delay.h) includeN[inc_elem(linux),inc_elem(kernel.h)] inc_elem(kernel.h) 
[Main] Constructing all safe parts for 3 term pairs
[Main] Making safe parts for pair 1
prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)]
[Main] terms that changed: exp:ident(PM_EVENT_SUSPEND) logiop(eq) grammar(binary_logi) 
[Diff] abstracting concrete update:exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
[Diff] resulting abstract updates: 1
exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]
[Diff] resulting abstract updates: 5
exp[grammar(binary_logi),logiop(eq),exp[meta(X5),meta(X4),meta(X3)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X5),meta(X4),meta(X3)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[meta(X5),meta(X4),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X5),meta(X4),ident(event)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X4),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X4),ident(event)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),meta(X2),exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),meta(X2),exp:ident(PM_EVENT_SLEEP)]
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] resulting abstract updates: 1
exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)]
[Diff] abstracting concrete update:{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]] ==> {}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]] ==> {}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]
[Diff] abstracting concrete update:def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]] ==> def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]]
[Diff] resulting abstract updates: 1
def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]] ==> def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(sched.h)],includeN[inc_elem(linux),inc_elem(timer.h)],includeN[inc_elem(linux),inc_elem(hdreg.h)],includeN[inc_elem(linux),inc_elem(stddef.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(kthread.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(pgtable.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(ohare.h)],includeN[inc_elem(asm),inc_elem(heathrow.h)],includeN[inc_elem(asm),inc_elem(keylargo.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),NCP(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),def[fname(ohare_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(OHARE_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(heathrow_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(HEATHROW_MBCR)],exp:const:int(12)],exp:const:int(7)]]]],def[fname(keylargo_mb_content),funtype[fulltype[typec(N/H)],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(new_gpio),exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(MB_IN8),exp:ident(bay),exp:ident(KL_GPIO_MEDIABAY_IRQ)],exp:ident(KEYLARGO_GPIO_INPUT_DATA)]]],sel_if[exp:ident(new_gpio),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]],st_return[exp:ident(MB_NO)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]],estmt[exp:??(N/H)],estmt[exp[grammar(call),exp:ident(udelay),exp:const:int(5)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cached_gpio)],exp:ident(new_gpio)]]],estmt(NONE)]],st_return[exp[grammar(binary_arith),aop(&),exp[grammar(binary_arith),aop(>>),exp[grammar(call),exp:ident(MB_IN32),exp:ident(bay),exp:ident(KEYLARGO_MBCR)],exp:const:int(4)],exp:const:int(7)]]]],def[fname(ohare_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_FLOPPY_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(OHARE_MBCR),exp:const:int(0x00000F00)]]]],def[fname(heathrow_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_SWIM_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_POWER_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(HEATHROW_MBCR),exp:const:int(0x00000F00)]]]],def[fname(keylargo_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(on_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(on_off),{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_MASK)]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_ENABLE)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_POWER)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]],estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],estmt[exp[grammar(call),exp:ident(MB_BIC),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:const:int(0x0000000F)]]]],def[fname(ohare_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(heathrow_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(keylargo_mb_setup_bus),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(device_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),st_return[exp:??(N/H)]]],def[fname(ohare_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_BAY_RESET_N)]]]],def[fname(keylargo_mb_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_ENABLE)]]]],def[fname(heathrow_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_BAY_RESET_N)]]]],def[fname(keylargo_mb_un_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_MBCR),exp:ident(KL_MBCR_MB0_DEV_RESET)]]]],def[fname(ohare_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(OHARE_FCR),exp:ident(OH_IDE1_RESET_N)]]]],def[fname(heathrow_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(HEATHROW_FCR),exp:ident(HRW_IDE1_RESET_N)]]]],def[fname(keylargo_mb_un_reset_ide),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(MB_BIS),exp:ident(bay),exp:ident(KEYLARGO_FCR1),exp:ident(KL1_EIDE0_RESET_N)]]]],def[fname(set_mb_power),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]],param[reg(),name(onoff),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[sel_if[exp:ident(onoff),{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_up)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering up\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],{}stmt[estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(power)],exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: powering down\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]]]],def[fname(poll_media_bay),funtype[fulltype[ctype[btype(void)]],param[reg(),name(bay),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(id),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(MB_NO)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(id),exp:ident(MB_NO)]],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: forcing MB_NO\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(MBDBG),exp:const:string(mediabay%d: switching to %d\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)],exp:ident(id)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp[grammar(binary_logi),logiop(??),exp:ident(id),exp:ident(MB_NO)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(content_id)],exp:ident(id)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(id),exp:ident(MB_NO)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp:ident(id)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp:const:int(0)]]]]]],def[fname(check_media_bay),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(which_bay),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(which_bay),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],ident(ofdev)],ident(node)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],mtop(N/H),def[fname(check_media_bay_by_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(mdev)],exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp:??(N/H)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(what),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(content_id)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(state)],exp:ident(mb_up)]],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(cd_index)],exp:??(N/H)]],st_return[exp:??(N/H)]],estmt(NONE)]],st_return[exp:??(N/H)]]],NCP(N/H),def[fname(media_bay_step),funtype[fulltype[ctype[btype(void)]],param[reg(),name(i),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_powering_down)],estmt[exp[grammar(call),exp:ident(poll_media_bay),exp:ident(bay)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(state)],exp:ident(mb_ide_waiting)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),op_assi(-=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POLL_DELAY)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp:const:int(0)]]],estmt(NONE)],statem(N/H)]],def[fname(media_bay_task),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(x),fulltype[typec(N/H)]]],{}stmt[statem(N/H),while[exp:??(N/H),{}stmt[for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(media_bay_count)],exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(media_bay_step),exp:ident(i)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(media_bays),exp:ident(i)],ident(lock)]]]]],estmt[exp[grammar(call),exp:ident(msleep_interruptible),exp:ident(MB_POLL_DELAY)]]]],st_return[exp:const:int(0)]]],NCP(N/H),def[fname(media_bay_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(state),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(state),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(state),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POLL_DELAY)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(state)]]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(media_bay_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt[exp[grammar(call),exp:ident(down),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(msleep),exp:ident(MB_POWER_DELAY)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(bay),ident(ops)],ident(content)],exp:ident(bay)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:string(mediabay%d: content changed during sleep...\n),exp[grammar(record_ptr),exp:ident(bay),ident(index)]]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(set_mb_power),exp:ident(bay),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(last_value)],exp[grammar(record_ptr),exp:ident(bay),ident(content_id)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(value_count)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_STABLE_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(timer)],exp[grammar(call),exp:ident(msecs_to_jiffies),exp:ident(MB_POWER_DELAY)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(cd_retry)],exp:const:int(0)]],statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(bay),ident(sleeping)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(up),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(bay),ident(lock)]]]],estmt(NONE)],st_return[exp:const:int(0)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),mtop(N/H)]
[Main] Making safe parts for pair 2
prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],includeN[inc_elem(linux),inc_elem(scatterlist.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(dbdma.h)],includeN[inc_elem(asm),inc_elem(ide.h)],includeN[inc_elem(asm),inc_elem(pci-bridge.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(irq.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeL[inc_elem(..),inc_elem(ide-timing.h)],define(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(kauai_lookup_timing),funtype[fulltype[typec(N/H)],param[reg(),name(table),fulltype[typec(N/H)]],param[reg(),name(cycle_time),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp:ident(i)],ident(cycle_time)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(cycle_time),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp[grammar(binary_arith),aop(+),exp:ident(i),exp:const:int(1)]],ident(cycle_time)]],st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp:ident(i)],ident(timing_reg)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(BUG)]],st_return[exp:const:int(0)]]],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(pmac_ide_init_hwif_ports),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hw),fulltype[typec(N/H)]],param[reg(),name(data_port),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ctrl_port),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(irq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(data_port),exp:const:int(0)],statem(N/H),estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(data_port),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],statem(N/H),estmt(NONE)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],statem(N/H),estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:const:int(8)],exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(hw),ident(io_ports)],exp:ident(i)],exp[grammar(binary_arith),aop(+),exp:ident(data_port),exp[grammar(binary_arith),aop(*),exp:ident(i),exp:const:int(0x10)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(hw),ident(io_ports)],exp:const:int(8)],exp[grammar(binary_arith),aop(+),exp:ident(data_port),exp:const:int(0x160)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(irq),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(irq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(irq)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(hw),ident(dev)],exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(mdev)],ident(ofdev)],ident(dev)]]]]],NCP(N/H),def[fname(pmac_ide_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]]],estmt[exp:??(N/H)]]],def[fname(pmac_ide_kauai_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_PIO_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(3)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_ULTRA_CONFIG)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_PIO_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(2)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_ULTRA_CONFIG)]]]]],estmt[exp:??(N/H)]]],def[fname(pmac_ide_do_update_timings),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_sh_ata6)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_un_ata6)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_k2_ata6)]],estmt[exp[grammar(call),exp:ident(pmac_ide_kauai_selectproc),exp:ident(drive)]],estmt[exp[grammar(call),exp:ident(pmac_ide_selectproc),exp:ident(drive)]]]]],NCP(N/H),def[fname(pmac_ide_set_pio_mode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(t),exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycle_time),exp[grammar(call),exp:ident(ide_pio_cycle_time),exp:ident(drive),exp:ident(pio)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp:ident(pio),exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp:ident(t)]],estmt[exp[grammar(call),exp:ident(pmac_ide_do_update_timings),exp:ident(drive)]]]],def[fname(set_timings_udma_ata4),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_4)],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rdyToPauseTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(rdy2pause)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(wrDataSetupTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(wrDataSetup)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addrTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(addrSetup)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(timings),exp:??(N/H)],exp[grammar(binary_arith),aop(<<),exp:ident(wrDataSetupTicks),exp:ident(TR_66_UDMA_WRDATASETUP_SHIFT)]],exp[grammar(binary_arith),aop(<<),exp:ident(rdyToPauseTicks),exp:ident(TR_66_UDMA_RDY2PAUS_SHIFT)]],exp[grammar(binary_arith),aop(<<),exp:ident(addrTicks),exp:ident(TR_66_UDMA_ADDRSETUP_SHIFT)]],exp:ident(TR_66_UDMA_EN)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)],exp:*ref:exp:ident(timings)]],st_return[exp:const:int(0)]]],def[fname(set_timings_udma_ata6),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pio_timings),fulltype[typec(N/H)]],param[reg(),name(ultra_timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_5)],exp[grammar(binary_logi),logiop(eq),exp:ident(t),exp:ident(NULL)]],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(tr),exp[grammar(call),exp:ident(kauai_lookup_timing),exp:ident(kauai_udma_timings),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(ultra_timings),exp:??(N/H)],exp:ident(tr)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp:*ref:exp:ident(ultra_timings),exp:ident(TR_100_UDMAREG_UDMA_EN)]]],st_return[exp:const:int(0)]]],def[fname(set_timings_udma_shasta),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pio_timings),fulltype[typec(N/H)]],param[reg(),name(ultra_timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_6)],exp[grammar(binary_logi),logiop(eq),exp:ident(t),exp:ident(NULL)]],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(tr),exp[grammar(call),exp:ident(kauai_lookup_timing),exp:ident(shasta_udma133_timings),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(ultra_timings),exp:??(N/H)],exp:ident(tr)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp:*ref:exp:ident(ultra_timings),exp:ident(TR_133_UDMAREG_UDMA_EN)]]],st_return[exp:const:int(0)]]],def[fname(set_timings_mdma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(intf_type),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(timings),fulltype[typec(N/H)]],param[reg(),name(timings2),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(id),ident(field_valid)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(id),ident(eide_dma_time)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp[grammar(call),exp:ident(max_t),argtype(N/H),exp[grammar(record_ptr),exp:ident(id),ident(eide_dma_time)],exp:ident(cycleTime)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(intf_type),exp:ident(controller_ohare)],exp[grammar(binary_logi),logiop(??),exp:ident(cycleTime),exp:const:int(150)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp:const:int(150)]],estmt(NONE)],statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(tm),exp:ident(NULL)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:??(N/H)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp[grammar(binary_arith),aop(+),exp:ident(i),exp:const:int(1)]],ident(cycleTime)],exp:ident(cycleTime)],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(cycleTime)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(accessTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(accessTime)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(recTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(recoveryTime)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp:ident(cycleTime),exp:ident(accessTime),exp:ident(recTime)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)],exp:*ref:exp:ident(timings)]]]],def[fname(pmac_ide_set_dma_mode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings2),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp[grammar(binary_arith),aop(+),exp:ident(unit),exp:const:int(2)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:*ref:exp:ident(timings2)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_kl_ata4)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_ata4),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp:ident(speed)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_un_ata6)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_k2_ata6)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_ata6),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_sh_ata6)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_shasta),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]]]]]],estmt[exp[grammar(call),exp:ident(set_timings_mdma),exp:ident(drive),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp[grammar(array_acc),exp:ident(tl),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings2),exp[grammar(array_acc),exp:ident(tl),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(pmac_ide_do_update_timings),exp:ident(drive)]]]],def[fname(sanitize_timings),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pmif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp:ident(value)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(2)],exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(3)],exp:ident(value2)]]]]],def[fname(pmac_ide_get_base),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(index)],ident(regbase)]]]],def[fname(pmac_ide_check_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],st_return[exp:ident(ix)],estmt(NONE)]],st_return[exp:??(N/H)]]],def[fname(pmac_ide_get_irq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(irq)]],estmt(NONE)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),def[fname(pmac_ide_do_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hwif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(disable_irq),exp[grammar(record_ptr),exp:ident(pmif),ident(irq)]]],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(mediabay)],st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(&=),exp:ident(fcr),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(writel),exp:ident(fcr),exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)]]]],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_ENABLE),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(pmac_ide_do_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hwif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_RESET),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(1)]],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_ENABLE),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(msleep),exp:const:int(10)]],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_RESET),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(0)]],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(fcr),exp[grammar(binary_arith),aop(|),exp:ident(KAUAI_FCR_UATA_RESET_N),exp:ident(KAUAI_FCR_UATA_ENABLE)]]],estmt[exp[grammar(call),exp:ident(writel),exp:ident(fcr),exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(msleep),exp[grammar(call),exp:ident(jiffies_to_msecs),exp:ident(IDE_WAKEUP_DELAY)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(sanitize_timings),exp:ident(pmif)]],estmt[exp[grammar(call),exp:ident(enable_irq),exp[grammar(record_ptr),exp:ident(pmif),ident(irq)]]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(pmac_ide_macio_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_resume),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],NCP(N/H),def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(pmac_ide_pci_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_resume),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_destroy_dmatable),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(hwif),ident(sg_nents)],{}stmt[estmt[exp[grammar(call),exp:ident(ide_destroy_dmatable),exp:ident(drive)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(hwif),ident(sg_nents)],exp:const:int(0)]]],estmt(NONE)]]],def[fname(pmac_ide_dma_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ata4),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_kl_ata4)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ide_map_sg),exp:ident(drive),exp:ident(rq)]],st_return[exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp:ident(ata4),exp[grammar(binary_arith),aop(&),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)],exp:ident(TR_66_UDMA_EN)]],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(binary_arith),aop(+),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)],exp[grammar(cond3),exp:??(N/H),exp:const:int(0x00800000UL),exp:const:int(0)]],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]],estmt[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(drive),ident(waiting_for_dma)],exp:const:int(1)]],st_return[exp:const:int(0)]]],def[fname(pmac_ide_dma_exec_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(command),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ide_execute_command),exp:ident(drive),exp:ident(command),exp:&ref:exp:ident(ide_dma_intr),exp[grammar(binary_arith),aop(*),exp:const:int(2),exp:ident(WAIT_CMD)],exp:ident(NULL)]]]],NCP(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_dma_host_set),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(on),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[]],NCP(N/H),NCP(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(ide.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(adb.h)],includeN[inc_elem(linux),inc_elem(pmu.h)],includeN[inc_elem(linux),inc_elem(scatterlist.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(dbdma.h)],includeN[inc_elem(asm),inc_elem(ide.h)],includeN[inc_elem(asm),inc_elem(pci-bridge.h)],includeN[inc_elem(asm),inc_elem(machdep.h)],includeN[inc_elem(asm),inc_elem(pmac_feature.h)],includeN[inc_elem(asm),inc_elem(sections.h)],includeN[inc_elem(asm),inc_elem(irq.h)],includeN[inc_elem(asm),inc_elem(mediabay.h)],includeL[inc_elem(..),inc_elem(ide-timing.h)],define(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(kauai_lookup_timing),funtype[fulltype[typec(N/H)],param[reg(),name(table),fulltype[typec(N/H)]],param[reg(),name(cycle_time),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp:ident(i)],ident(cycle_time)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(cycle_time),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp[grammar(binary_arith),aop(+),exp:ident(i),exp:const:int(1)]],ident(cycle_time)]],st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(table),exp:ident(i)],ident(timing_reg)]],estmt(NONE)]],estmt[exp[grammar(call),exp:ident(BUG)]],st_return[exp:const:int(0)]]],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(pmac_ide_init_hwif_ports),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hw),fulltype[typec(N/H)]],param[reg(),name(data_port),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ctrl_port),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(irq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(data_port),exp:const:int(0)],statem(N/H),estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(data_port),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],statem(N/H),estmt(NONE)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],statem(N/H),estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:const:int(8)],exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(hw),ident(io_ports)],exp:ident(i)],exp[grammar(binary_arith),aop(+),exp:ident(data_port),exp[grammar(binary_arith),aop(*),exp:ident(i),exp:const:int(0x10)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(hw),ident(io_ports)],exp:const:int(8)],exp[grammar(binary_arith),aop(+),exp:ident(data_port),exp:const:int(0x160)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(irq),exp:ident(NULL)],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(irq),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(irq)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(hw),ident(dev)],exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(mdev)],ident(ofdev)],ident(dev)]]]]],NCP(N/H),def[fname(pmac_ide_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]]],estmt[exp:??(N/H)]]],def[fname(pmac_ide_kauai_selectproc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_PIO_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(3)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_ULTRA_CONFIG)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_PIO_CONFIG)]]],estmt[exp[grammar(call),exp:ident(writel),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(2)],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_KAUAI_ULTRA_CONFIG)]]]]],estmt[exp:??(N/H)]]],def[fname(pmac_ide_do_update_timings),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_sh_ata6)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_un_ata6)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_k2_ata6)]],estmt[exp[grammar(call),exp:ident(pmac_ide_kauai_selectproc),exp:ident(drive)]],estmt[exp[grammar(call),exp:ident(pmac_ide_selectproc),exp:ident(drive)]]]]],NCP(N/H),def[fname(pmac_ide_set_pio_mode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(pio),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(drive),ident(select)],ident(b)],ident(unit)],exp:const:int(0x01)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(t),exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycle_time),exp[grammar(call),exp:ident(ide_pio_cycle_time),exp:ident(drive),exp:ident(pio)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp:ident(pio),exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp:ident(t)]],estmt[exp[grammar(call),exp:ident(pmac_ide_do_update_timings),exp:ident(drive)]]]],def[fname(set_timings_udma_ata4),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_4)],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rdyToPauseTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(rdy2pause)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(wrDataSetupTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(wrDataSetup)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addrTicks),exp[grammar(call),exp:ident(SYSCLK_TICKS_66),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(kl66_udma_timings),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)]],ident(addrSetup)]]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(timings),exp:??(N/H)],exp[grammar(binary_arith),aop(<<),exp:ident(wrDataSetupTicks),exp:ident(TR_66_UDMA_WRDATASETUP_SHIFT)]],exp[grammar(binary_arith),aop(<<),exp:ident(rdyToPauseTicks),exp:ident(TR_66_UDMA_RDY2PAUS_SHIFT)]],exp[grammar(binary_arith),aop(<<),exp:ident(addrTicks),exp:ident(TR_66_UDMA_ADDRSETUP_SHIFT)]],exp:ident(TR_66_UDMA_EN)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)],exp:*ref:exp:ident(timings)]],st_return[exp:const:int(0)]]],def[fname(set_timings_udma_ata6),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pio_timings),fulltype[typec(N/H)]],param[reg(),name(ultra_timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_5)],exp[grammar(binary_logi),logiop(eq),exp:ident(t),exp:ident(NULL)]],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(tr),exp[grammar(call),exp:ident(kauai_lookup_timing),exp:ident(kauai_udma_timings),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(ultra_timings),exp:??(N/H)],exp:ident(tr)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp:*ref:exp:ident(ultra_timings),exp:ident(TR_100_UDMAREG_UDMA_EN)]]],st_return[exp:const:int(0)]]],def[fname(set_timings_udma_shasta),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pio_timings),fulltype[typec(N/H)]],param[reg(),name(ultra_timings),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_6)],exp[grammar(binary_logi),logiop(eq),exp:ident(t),exp:ident(NULL)]],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(tr),exp[grammar(call),exp:ident(kauai_lookup_timing),exp:ident(shasta_udma133_timings),exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(&),exp:*ref:exp:ident(ultra_timings),exp:??(N/H)],exp:ident(tr)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(ultra_timings),exp[grammar(binary_arith),aop(|),exp:*ref:exp:ident(ultra_timings),exp:ident(TR_133_UDMAREG_UDMA_EN)]]],st_return[exp:const:int(0)]]],def[fname(set_timings_mdma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(intf_type),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(timings),fulltype[typec(N/H)]],param[reg(),name(timings2),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(id),ident(field_valid)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(id),ident(eide_dma_time)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp[grammar(call),exp:ident(max_t),argtype(N/H),exp[grammar(record_ptr),exp:ident(id),ident(eide_dma_time)],exp:ident(cycleTime)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp:ident(intf_type),exp:ident(controller_ohare)],exp[grammar(binary_logi),logiop(??),exp:ident(cycleTime),exp:const:int(150)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp:const:int(150)]],estmt(NONE)],statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(tm),exp:ident(NULL)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:??(N/H)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp[grammar(binary_arith),aop(+),exp:ident(i),exp:const:int(1)]],ident(cycleTime)],exp:ident(cycleTime)],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(cycleTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(cycleTime)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(accessTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(accessTime)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(recTime),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(tm),exp:ident(i)],ident(recoveryTime)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp:ident(cycleTime),exp:ident(accessTime),exp:ident(recTime)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp[grammar(record_ptr),exp:ident(drive),ident(name)],exp[grammar(binary_arith),aop(&),exp:ident(speed),exp:const:int(0xf)],exp:*ref:exp:ident(timings)]]]],def[fname(pmac_ide_set_dma_mode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(speed),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(timings2),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp[grammar(binary_arith),aop(+),exp:ident(unit),exp:const:int(2)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp:*ref:exp:ident(timings)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:*ref:exp:ident(timings2)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_kl_ata4)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_ata4),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp:ident(speed)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_un_ata6)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_k2_ata6)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_ata6),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_sh_ata6)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(set_timings_udma_shasta),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]]]]]],estmt[exp[grammar(call),exp:ident(set_timings_mdma),exp:ident(drive),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(0)],exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(tl),exp:const:int(1)],exp:ident(speed)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings),exp[grammar(array_acc),exp:ident(tl),exp:const:int(0)]]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(timings2),exp[grammar(array_acc),exp:ident(tl),exp:const:int(1)]]],estmt[exp[grammar(call),exp:ident(pmac_ide_do_update_timings),exp:ident(drive)]]]],def[fname(sanitize_timings),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pmif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp:ident(value)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(2)],exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(3)],exp:ident(value2)]]]]],def[fname(pmac_ide_get_base),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(index)],ident(regbase)]]]],def[fname(pmac_ide_check_base),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],st_return[exp:ident(ix)],estmt(NONE)]],st_return[exp:??(N/H)]]],def[fname(pmac_ide_get_irq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(base),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),for[exp[grammar(assign),simple_assi(=),exp:ident(ix),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(ix),exp:ident(MAX_HWIFS)],exp:??(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(base),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(regbase)]],st_return[exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(pmac_ide),exp:ident(ix)],ident(irq)]],estmt(NONE)]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),def[fname(pmac_ide_do_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hwif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(0)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:const:int(1)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(disable_irq),exp[grammar(record_ptr),exp:ident(pmif),ident(irq)]]],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(mediabay)],st_return[exp:const:int(0)],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(&=),exp:ident(fcr),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(writel),exp:ident(fcr),exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)]]]],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_ENABLE),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(pmac_ide_do_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hwif),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_RESET),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(1)]],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_ENABLE),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(msleep),exp:const:int(10)]],estmt[exp[grammar(call),exp[grammar(record_acc),exp:ident(ppc_md),ident(feature_call)],exp:ident(PMAC_FTR_IDE_RESET),exp[grammar(record_ptr),exp:ident(pmif),ident(node)],exp[grammar(record_ptr),exp:ident(pmif),ident(aapl_bus_id)],exp:const:int(0)]],sel_if[exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(|=),exp:ident(fcr),exp[grammar(binary_arith),aop(|),exp:ident(KAUAI_FCR_UATA_RESET_N),exp:ident(KAUAI_FCR_UATA_ENABLE)]]],estmt[exp[grammar(call),exp:ident(writel),exp:ident(fcr),exp[grammar(record_ptr),exp:ident(pmif),ident(kauai_fcr)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(msleep),exp[grammar(call),exp:ident(jiffies_to_msecs),exp:ident(IDE_WAKEUP_DELAY)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(sanitize_timings),exp:ident(pmif)]],estmt[exp[grammar(call),exp:ident(enable_irq),exp[grammar(record_ptr),exp:ident(pmif),ident(irq)]]],st_return[exp:const:int(0)]]],decl(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(pmac_ide_macio_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_resume),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],NCP(N/H),def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(pmac_ide_pci_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)],exp:ident(PM_EVENT_ON)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_resume),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(PMSG_ON)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_destroy_dmatable),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(hwif),ident(sg_nents)],{}stmt[estmt[exp[grammar(call),exp:ident(ide_destroy_dmatable),exp:ident(drive)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(hwif),ident(sg_nents)],exp:const:int(0)]]],estmt(NONE)]]],def[fname(pmac_ide_dma_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(drive),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(pmif),exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ata4),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pmif),ident(kind)],exp:ident(controller_kl_ata4)]]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(ide_map_sg),exp:ident(drive),exp:ident(rq)]],st_return[exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp:ident(ata4),exp[grammar(binary_arith),aop(&),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)],exp:ident(TR_66_UDMA_EN)]],{}stmt[estmt[exp[grammar(call),exp:ident(writel),exp[grammar(binary_arith),aop(+),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(pmif),ident(timings)],exp:ident(unit)],exp[grammar(cond3),exp:??(N/H),exp:const:int(0x00800000UL),exp:const:int(0)]],exp[grammar(call),exp:ident(PMAC_IDE_REG),exp:ident(IDE_TIMING_CONFIG)]]],estmt[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(drive),ident(waiting_for_dma)],exp:const:int(1)]],st_return[exp:const:int(0)]]],def[fname(pmac_ide_dma_exec_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(command),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ide_execute_command),exp:ident(drive),exp:ident(command),exp:&ref:exp:ident(ide_dma_intr),exp[grammar(binary_arith),aop(*),exp:const:int(2),exp:ident(WAIT_CMD)],exp:ident(NULL)]]]],NCP(N/H),NCP(N/H),NCP(N/H),def[fname(pmac_ide_dma_host_set),funtype[fulltype[ctype[btype(void)]],param[reg(),name(drive),fulltype[typec(N/H)]],param[reg(),name(on),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[]],NCP(N/H),NCP(N/H),mtop(N/H)]
[Main] terms that changed: exp:ident(PM_EVENT_SUSPEND) logiop(eq) grammar(binary_logi) 
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] resulting abstract updates: 1
exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]] ==> {}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]] ==> {}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]
[Diff] abstracting concrete update:def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]] ==> def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]]
[Diff] resulting abstract updates: 1
def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]] ==> def[fname(pmac_ide_pci_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(pdev),ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]]
[Diff] abstracting concrete update:exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
[Diff] resulting abstract updates: 1
exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]
[Diff] resulting abstract updates: 5
exp[grammar(binary_logi),logiop(eq),exp[meta(X5),meta(X4),meta(X3)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X5),meta(X4),meta(X3)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[meta(X5),meta(X4),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X5),meta(X4),ident(event)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X4),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X4),ident(event)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),meta(X2),exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),meta(X2),exp:ident(PM_EVENT_SLEEP)]
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] resulting abstract updates: 1
exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]] ==> {}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]] ==> {}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]
[Diff] abstracting concrete update:def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]] ==> def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]]
[Diff] resulting abstract updates: 1
def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]] ==> def[fname(pmac_ide_macio_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(mdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],ident(event)]],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pmac_ide_do_suspend),exp:ident(hwif)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mdev),ident(ofdev)],ident(dev)],ident(power)],ident(power_state)],exp:ident(mesg)]],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(rc)]]]
[Main] Making safe parts for pair 3
prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
[Main] terms that changed: exp:ident(PM_EVENT_SUSPEND) logiop(eq) grammar(binary_logi) 
[Diff] abstracting concrete update:exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
[Diff] resulting abstract updates: 1
exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]
[Diff] resulting abstract updates: 5
exp[grammar(binary_logi),logiop(eq),exp[meta(X5),meta(X4),meta(X3)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X5),meta(X4),meta(X3)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[meta(X5),meta(X4),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X5),meta(X4),ident(event)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X4),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X4),ident(event)],exp:ident(PM_EVENT_SLEEP)]
exp[grammar(binary_logi),logiop(eq),meta(X2),exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),meta(X2),exp:ident(PM_EVENT_SLEEP)]
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
[Diff] resulting abstract updates: 120
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),meta(X12),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[meta(X11),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),exp[grammar(call),meta(X10)],exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[meta(X8),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[meta(X8),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[meta(X8),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[meta(X6),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X5),ident(event)],exp:ident(PM_EVENT_SLEEP)]]
exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_logi),logiop(eq),meta(X3),exp:ident(PM_EVENT_SUSPEND)]] ==> exp[grammar(binary_logi),logiop(and),meta(X9),exp[grammar(binary_arith),aop(&),meta(X3),exp:ident(PM_EVENT_SLEEP)]]
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]] ==> sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]
[Diff] abstracting concrete update:def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]] ==> def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]]
[Diff] resulting abstract updates: 1
def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]] ==> def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SUSPEND)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(blkdev.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(device.h)],includeN[inc_elem(scsi),inc_elem(scsi_host.h)],includeN[inc_elem(linux),inc_elem(libata.h)],includeN[inc_elem(linux),inc_elem(dmi.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),NCP(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),def[fname(ich_pata_cable_detect),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[exp[grammar(record_ptr),exp:ident(lap),ident(device)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(device)],exp[grammar(record_ptr),exp:ident(pdev),ident(device)]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subvendor)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_vendor)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(lap),ident(subdevice)],exp[grammar(record_ptr),exp:ident(pdev),ident(subsystem_device)]]],st_return[exp:ident(ATA_CBL_PATA40_SHORT)],estmt(NONE)],estmt[exp:??(N/H)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mask),exp[grammar(cond3),exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0)],exp:ident(PIIX_80C_PRI),exp:ident(PIIX_80C_SEC)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(tmp)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(&),exp:ident(tmp),exp:ident(mask)],exp:const:int(0)],st_return[exp:ident(ATA_CBL_PATA40)],estmt(NONE)],st_return[exp:ident(ATA_CBL_PATA80)]]],def[fname(piix_pata_prereset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(ata_std_prereset),exp:ident(link),exp:ident(deadline)]]]],def[fname(piix_pata_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(piix_pata_prereset),exp:ident(ata_std_softreset),exp:ident(NULL),exp:ident(ata_std_postreset)]]]],def[fname(piix_set_piomode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(pio),exp:const:int(2)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(1)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_pio_need_iordy),exp:ident(adev)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(2)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(adev),ident(class)],exp:ident(ATA_DEV_ATA)],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(4)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp:ident(is_slave),{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xff0f)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:const:int(0x4000)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:ident(slave_port),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xccf0)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]],sel_if[exp:ident(is_slave),estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:ident(slave_port),exp:ident(slave_data)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]]],estmt(NONE)]]],def[fname(do_pata_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]],param[reg(),name(isich),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:ident(master_port),exp:&ref:exp:ident(master_data)]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x48),exp:&ref:exp:ident(udma_enable)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(speed),exp:ident(XFER_UDMA_0)],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_speed),exp[grammar(call),exp:ident(min),exp[grammar(binary_arith),aop(-),exp:const:int(2),exp[grammar(binary_arith),aop(&),exp:ident(udma),exp:const:int(1)]],exp:ident(udma)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(udma),exp:const:int(5)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0x1000)]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(udma),exp:const:int(2)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(u_clock),exp:const:int(0)]]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_enable),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x4A),exp:&ref:exp:ident(udma_timing)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_timing),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(udma_timing),exp[grammar(binary_arith),aop(<<),exp:ident(u_speed),exp[grammar(binary_arith),aop(*),exp:const:int(4),exp:ident(devid)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x4A),exp:ident(udma_timing)]],sel_if[exp:ident(isich),{}stmt[estmt[exp[grammar(call),exp:ident(pci_read_config_word),exp:ident(dev),exp:const:int(0x54),exp:&ref:exp:ident(ideconf)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(ideconf),exp:??(N/H)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(ideconf),exp[grammar(binary_arith),aop(<<),exp:ident(u_clock),exp:ident(devid)]]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:const:int(0x54),exp:ident(ideconf)]]],estmt(NONE)]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(control),exp:const:int(3)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(adev),ident(pio_mode)],exp[grammar(array_acc),exp:ident(needed_pio),exp:ident(mwdma)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(control),exp:const:int(8)]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(adev),ident(devno)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xFF4F)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(<<),exp:ident(control),exp:const:int(4)]]],estmt[exp[grammar(call),exp:ident(pci_read_config_byte),exp:ident(dev),exp:const:int(0x44),exp:&ref:exp:ident(slave_data)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(slave_data),exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(0x0f),exp:const:int(0xf0)]]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(slave_data),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(2)],exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)]],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(4),exp:const:int(0)]]]],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x44),exp:ident(slave_data)]]],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(master_data),exp:const:int(0xCCF4)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp:ident(control)]],estmt[exp[grammar(assign),op_assi(|=),exp:ident(master_data),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(0)],exp:const:int(12)],exp[grammar(binary_arith),aop(<<),exp[grammar(array_acc),exp[grammar(array_acc),exp:ident(timings),exp:ident(pio)],exp:const:int(1)],exp:const:int(8)]]]]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],{}stmt[estmt[exp[grammar(assign),op_assi(&=),exp:ident(udma_enable),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_word),exp:ident(dev),exp:ident(master_port),exp:ident(master_data)]]],estmt(NONE)]]],sel_if[exp[grammar(record_ptr),exp:ident(ap),ident(udma_mask)],estmt[exp[grammar(call),exp:ident(pci_write_config_byte),exp:ident(dev),exp:const:int(0x48),exp:ident(udma_enable)]],estmt(NONE)]]],def[fname(piix_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(0)]]]],def[fname(ich_set_dmamode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(adev),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(do_pata_set_dmamode),exp:ident(ap),exp:ident(adev),exp:const:int(1)]]]],decl(N/H),def[fname(piix_sidpr_sel),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(iowrite32),exp[grammar(binary_arith),aop(|),exp[grammar(binary_arith),aop(<<),exp[grammar(binary_arith),aop(+),exp[grammar(binary_arith),aop(*),exp[grammar(record_ptr),exp:ident(ap),ident(port_no)],exp:const:int(2)],exp[grammar(record_ptr),exp:ident(dev),ident(devno)]],exp:const:int(8)],exp[grammar(array_acc),exp:ident(piix_sidx_map),exp:ident(reg)]],exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_IDX)]]]]],def[fname(piix_sidpr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],st_return[exp[grammar(call),exp:ident(ioread32),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_sidpr_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(piix_sidpr_sel),exp:ident(dev),exp:ident(reg)]],estmt[exp[grammar(call),exp:ident(iowrite32),exp:ident(val),exp[grammar(binary_arith),aop(+),exp[grammar(record_ptr),exp:ident(hpriv),ident(sidpr)],exp:ident(PIIX_SIDPR_DATA)]]]]],def[fname(piix_merge_scr),funtype[fulltype[typec(N/H)],param[reg(),name(val0),fulltype[typec(N/H)]],param[reg(),name(val1),fulltype[typec(N/H)]],param[reg(),name(merge_tbl),fulltype[tqual(const),typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),for[exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(binary_arith),aop(/),exp:const:int(32),exp:const:int(4)]],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(cur),exp[grammar(array_acc),exp:ident(merge_tbl),exp:ident(mi)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:ident(c1)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(cur),exp:??(N/H)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(c0),exp:*ref:exp:ident(cur)],exp[grammar(binary_logi),logiop(eq),exp:ident(c1),exp:*ref:exp:ident(cur)]],statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(cur),exp:??(N/H)],estmt[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(merged),exp:*ref:exp:ident(cur)]],statem(N/H)]],st_return[exp:ident(val)]]],def[fname(piix_sidpr_scr_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(val),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v0),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(v1),exp[grammar(call),exp:ident(piix_sidpr_read),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg)]]],statem(N/H),st_return[exp:const:int(0)]]],def[fname(piix_sidpr_scr_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ap),fulltype[typec(N/H)]],param[reg(),name(reg),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(val),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(reg),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(piix_sidx_map)]],st_return[exp:??(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(0)],exp:ident(reg),exp:ident(val)]],sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(ap),ident(flags)],exp:ident(ATA_FLAG_SLAVE_POSS)],estmt[exp[grammar(call),exp:ident(piix_sidpr_write),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(ap),ident(link)],ident(device)],exp:const:int(1)],exp:ident(reg),exp:ident(val)]],estmt(NONE)],st_return[exp:const:int(0)]]],def[fname(piix_sidpr_hardreset),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(link),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[typec(N/H)]],param[reg(),name(deadline),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(sata_link_hardreset),exp:ident(link),exp:ident(timing),exp:ident(deadline)]]],sel_if[exp:ident(rc),{}stmt[estmt[exp[grammar(call),exp:ident(ata_link_printk),exp:ident(link),exp:ident(KERN_ERR),exp:const:string(COMRESET failed (errno=%d)\n),exp:ident(rc)]],st_return[exp:ident(rc)]],estmt(NONE)],sel_if[exp[grammar(call),exp:ident(ata_link_offline),exp:ident(link)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(class),exp:ident(ATA_DEV_NONE)]],st_return[exp:const:int(0)]],estmt(NONE)],st_return[exp:??(N/H)]]],def[fname(piix_sidpr_error_handler),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(ata_bmdma_drive_eh),exp:ident(ap),exp:ident(ata_std_prereset),exp:ident(ata_std_softreset),exp:ident(piix_sidpr_hardreset),exp:ident(ata_std_postreset)]]]],def[fname(piix_broken_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(dmi_check_system),exp:ident(sysids)],st_return[exp:const:int(1)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(oemstrs)]],exp:??(N/H),sel_if[exp[grammar(call),exp:ident(dmi_find_device),exp:ident(DMI_DEV_TYPE_OEM_STRING),exp[grammar(array_acc),exp:ident(oemstrs),exp:ident(i)],exp:ident(NULL)],st_return[exp:const:int(1)],estmt(NONE)]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_suspend),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]],param[reg(),name(mesg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_host_suspend),exp:ident(host),exp:ident(mesg)]]],sel_if[exp:ident(rc),st_return[exp:ident(rc)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(call),exp:ident(piix_broken_suspend)],exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),exp:ident(mesg),ident(event)],exp:ident(PM_EVENT_SLEEP)]],{}stmt[estmt[exp[grammar(call),exp:ident(pci_save_state),exp:ident(pdev)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_D0)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(pdev),ident(current_state)],exp:ident(PCI_UNKNOWN)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(|=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]]],estmt[exp[grammar(call),exp:ident(ata_pci_device_do_suspend),exp:ident(pdev),exp:ident(mesg)]]],st_return[exp:const:int(0)]]],def[fname(piix_pci_device_resume),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_arith),aop(&),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:ident(PIIX_HOST_BROKEN_SUSPEND)],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(host),ident(flags)],exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(host),ident(lock)],exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(pci_set_power_state),exp:ident(pdev),exp:ident(PCI_D0)]],estmt[exp[grammar(call),exp:ident(pci_restore_state),exp:ident(pdev)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(pci_reenable_device),exp:ident(pdev)]]],sel_if[exp:ident(rc),estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_ERR),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:other(N/H),exp:ident(rc)]],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(rc),exp[grammar(call),exp:ident(ata_pci_device_do_resume),exp:ident(pdev)]]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(rc),exp:const:int(0)],estmt[exp[grammar(call),exp:ident(ata_host_resume),exp:ident(host)]],estmt(NONE)],st_return[exp:ident(rc)]]],def[fname(piix_vmw_bmdma_status),funtype[fulltype[typec(N/H)],param[reg(),name(ap),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(binary_arith),aop(&),exp[grammar(call),exp:ident(ata_bmdma_status),exp:ident(ap)],exp:??(N/H)]]]],define(N/H),define(N/H),define(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),def[fname(piix_iocfg_bit18_quirk),funtype[fulltype[ctype[btype(void)]],param[reg(),name(pdev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(pci_read_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:&ref:exp:ident(iocfg)]],sel_if[exp[grammar(binary_arith),aop(&),exp:ident(iocfg),exp[grammar(binary_arith),aop(<<),exp:const:int(1),exp:const:int(18)]],{}stmt[estmt[exp[grammar(call),exp:ident(dev_printk),exp:ident(KERN_INFO),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(pdev),ident(dev)],exp:const:string(applying IOCFG bit18 quirk\n)]],estmt[exp[grammar(assign),op_assi(&=),exp:ident(iocfg),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(pci_write_config_dword),exp:ident(pdev),exp:ident(PIIX_IOCFG),exp:ident(iocfg)]]],estmt(NONE)]]],NCP(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
Before sorting list
{{{
exp[grammar(binary_logi),logiop(eq),meta(X0),exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),meta(X0),exp:ident(PM_EVENT_SLEEP)]
 ¶ 
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X0),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X0),ident(event)],exp:ident(PM_EVENT_SLEEP)]
 ¶ 
exp[grammar(binary_logi),logiop(eq),exp[grammar(record_acc),meta(X0),meta(X1)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[grammar(record_acc),meta(X0),meta(X1)],exp:ident(PM_EVENT_SLEEP)]
 ¶ 
exp[grammar(binary_logi),logiop(eq),exp[meta(X0),meta(X1),ident(event)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X0),meta(X1),ident(event)],exp:ident(PM_EVENT_SLEEP)]
 ¶ 
exp[grammar(binary_logi),logiop(eq),exp[meta(X0),meta(X1),meta(X2)],exp:ident(PM_EVENT_SUSPEND)] ==> exp[grammar(binary_arith),aop(&),exp[meta(X0),meta(X1),meta(X2)],exp:ident(PM_EVENT_SLEEP)]
 ¶ 
exp:ident(PM_EVENT_SUSPEND) ==> exp:ident(PM_EVENT_SLEEP)
 ¶ 
}}}
