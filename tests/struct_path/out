Spec. file is: specfile
Parsed two: inode.c.orig, inode.c
Parsed two: mntpt.c.orig, mntpt.c
Parsed two: mconsole_kern.c.orig, mconsole_kern.c
Reading file pair mconsole_kern.c.orig mconsole_kern.c
Reading file pair mntpt.c.orig mntpt.c
Reading file pair inode.c.orig inode.c
[Main] Common subterms: [Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Diff] making all subterms for :
	prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
param[reg(),name(),fulltype[ctype[btype(void)]]] fulltype[ctype[btype(void)]] ctype[btype(void)] btype(void) name() reg() fulltype[typec(N/H)] typec(N/H) exp:const:int(0) grammar(call) fulltype[ctype[btype[itype[sgn(signed),base(int)]]]] ctype[btype[itype[sgn(signed),base(int)]]] btype[itype[sgn(signed),base(int)]] itype[sgn(signed),base(int)] base(int) sgn(signed) decl(N/H) exp:const:int(1) grammar(binary_arith) estmt(NONE) exp:ident(NULL) logiop(eq) grammar(binary_logi) statem(N/H) exp:const:other(N/H) simple_assi(=) grammar(assign) exp:??(N/H) funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]] grammar(record_ptr) logiop(or) grammar(record_acc) inc_elem(linux) grammar(exp) grammar(&ref) logiop(??) exp:ident(list_empty) exp:ident(err) ident(name) grammar(array_acc) logiop(and) exp:ident(size) st_return[exp:??(N/H)] sel_if[exp:??(N/H),statem(N/H),estmt(NONE)] aop(-) exp:ident(file) exp:ident(IS_ERR) ident(mnt) exp:ident(nd) ident(dentry) ident(flags) inc_elem(init.h) includeN[inc_elem(linux),inc_elem(slab.h)] inc_elem(slab.h) includeN[inc_elem(linux),inc_elem(module.h)] inc_elem(module.h) 
[Main] terms that changed: exp:ident(nd) 
[Main] Constructing all safe parts for 3 term pairs
[Main] Making safe parts for pair 1
prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)] ==> exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]] ==> exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]
[Diff] resulting abstract updates: 1
exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]] ==> exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]]
[Diff] resulting abstract updates: 1
estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]]
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 16
exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),ident(mnt)] ==> exp[meta(X3),exp[meta(X3),meta(X2),ident(path)],ident(mnt)]
exp[meta(X3),meta(X2),ident(mnt)] ==> exp[meta(X3),exp[grammar(record_acc),meta(X2),ident(path)],ident(mnt)]
exp[meta(X3),meta(X2),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(mnt)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),ident(mnt)] ==> exp[meta(X3),exp[meta(X3),exp:ident(nd),ident(path)],ident(mnt)]
exp[meta(X3),exp:ident(nd),ident(mnt)] ==> exp[meta(X3),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)]
exp[meta(X3),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],ident(mnt)]
exp[grammar(record_acc),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
exp[grammar(record_acc),meta(X2),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_acc),meta(X2),ident(path)],ident(mnt)]
exp[grammar(record_acc),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
exp[grammar(record_acc),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
[Diff] resulting abstract updates: 128
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X4),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],ident(mnt)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],exp:ident(NULL)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),meta(X6),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X7),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),meta(X6),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),meta(X4),meta(X3)],exp:ident(NULL)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],exp:ident(NULL)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X5),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
[Diff] resulting abstract updates: 128
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X5),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X5),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],ident(mnt)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],exp:ident(NULL)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],meta(X2)]]
estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[meta(X8),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),meta(X7),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),meta(X5),meta(X4)],exp:ident(NULL)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),meta(X5),ident(path)],meta(X4)],exp:ident(NULL)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[meta(X6),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X6),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X5),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X5),ident(path)],meta(X4)],meta(X2)]]
[Diff] unsafe part:
	estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X4)],meta(X2)]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X4)],meta(X2)]]
[Diff] abstracting concrete update:exp[grammar(record_acc),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 16
exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),ident(dentry)] ==> exp[meta(X3),exp[meta(X3),meta(X2),ident(path)],ident(dentry)]
exp[meta(X3),meta(X2),ident(dentry)] ==> exp[meta(X3),exp[grammar(record_acc),meta(X2),ident(path)],ident(dentry)]
exp[meta(X3),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(dentry)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),ident(dentry)] ==> exp[meta(X3),exp[meta(X3),exp:ident(nd),ident(path)],ident(dentry)]
exp[meta(X3),exp:ident(nd),ident(dentry)] ==> exp[meta(X3),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)]
exp[meta(X3),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],ident(dentry)]
exp[grammar(record_acc),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
exp[grammar(record_acc),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_acc),meta(X2),ident(path)],ident(dentry)]
exp[grammar(record_acc),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
exp[grammar(record_acc),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[meta(X3),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]
[Diff] resulting abstract updates: 192
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[meta(X8),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],exp[grammar(record_ptr),meta(X3),meta(X2)]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]
[Diff] abstracting concrete update:def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]] ==> def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]]
[Diff] resulting abstract updates: 1
def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]] ==> def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp:ident(nd),ident(dentry)],exp[grammar(record_acc),exp:ident(nd),ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(console.h)],includeN[inc_elem(linux),inc_elem(ctype.h)],includeN[inc_elem(linux),inc_elem(interrupt.h)],includeN[inc_elem(linux),inc_elem(list.h)],includeN[inc_elem(linux),inc_elem(mm.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(notifier.h)],includeN[inc_elem(linux),inc_elem(reboot.h)],includeN[inc_elem(linux),inc_elem(proc_fs.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(syscalls.h)],includeN[inc_elem(linux),inc_elem(utsname.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(init.h)],includeL[inc_elem(irq_kern.h)],includeL[inc_elem(irq_user.h)],includeL[inc_elem(kern_util.h)],includeL[inc_elem(mconsole.h)],includeL[inc_elem(mconsole_kern.h)],includeL[inc_elem(os.h)],def[fname(do_unlink_socket),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(notifier),fulltype[typec(N/H)]],param[reg(),name(what),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(mconsole_unlink_socket)]]]],decl(N/H),decl(N/H),def[fname(mc_work_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(unused),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(local_irq_save),exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(req),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(mc_requests),ident(next)],argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(list)]]],estmt[exp[grammar(call),exp:ident(local_irq_restore),exp:ident(flags)]],estmt[exp[grammar(call),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(cmd)],ident(handler)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(req),ident(request)]]],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(req)]]]]]],decl(N/H),def[fname(mconsole_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp:??(N/H)]],while[exp[grammar(call),exp:ident(mconsole_get_request),exp:ident(fd),exp:&ref:exp:ident(req)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(context)],exp:ident(MCONSOLE_INTR)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_acc),exp:ident(req),ident(cmd)],ident(handler)],exp:&ref:exp:ident(req)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(new),exp[grammar(call),exp:ident(kmalloc),exp:sizeof:exp:*ref:exp:ident(new),exp:ident(GFP_NOWAIT)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(new),exp:ident(NULL)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:&ref:exp:ident(req),exp:const:string(Out of memory),exp:const:int(1),exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(new),ident(request)],exp:ident(req)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(new),ident(request)],ident(regs)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(get_irq_regs)],ident(regs)]]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mc_requests)]]]]]]]],sel_if[exp:??(N/H),estmt[exp[grammar(call),exp:ident(schedule_work),exp:&ref:exp:ident(mconsole_work)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp:ident(fd),exp:ident(MCONSOLE_IRQ)]],st_return[exp:ident(IRQ_HANDLED)]]],def[fname(mconsole_version),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(version),exp:const:string(%s %s %s %s %s),exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(sysname)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(nodename)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(release)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(version)],exp[grammar(record_ptr),exp[grammar(call),exp:ident(utsname)],ident(machine)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(version),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_log),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(log )]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(binary_arith),aop(-),exp[grammar(record_ptr),exp:ident(req),ident(len)],exp[grammar(binary_arith),aop(-),exp:ident(ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(req),ident(request)],ident(data)]]]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(len),exp:ident(ptr)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(proc),exp[grammar(call),exp:ident(get_fs_type),exp:const:string(proc)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(proc),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(procfs not registered),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(proc),ident(get_sb)],exp:ident(proc),exp:const:int(0),exp:ident(NULL),exp:ident(NULL)]]],estmt[exp[grammar(call),exp:ident(put_filesystem),exp:ident(proc)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(super),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to get procfs superblock),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(up_write),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(super),ident(s_umount)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp:ident(super),ident(s_root)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(flags)],exp[grammar(binary_arith),aop(+),exp:ident(O_RDONLY),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(nd),ident(last_type)],exp:ident(LAST_ROOT)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(link_path_walk),exp:ident(ptr),exp:&ref:exp:ident(nd)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to look up file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(file),exp[grammar(call),exp:ident(dentry_open),exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_acc),exp[grammar(record_acc),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(file)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],exp:ident(NULL)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(file),ident(f_op)],ident(read)],exp:ident(NULL)]],{}stmt[statem(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]],statem(N/H),statem(N/H),statem(N/H),statem(N/H)]],def[fname(mconsole_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(proc)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(snprintf),exp:ident(path),exp:sizeof:exp:ident(path),exp:const:string(/proc/%s),exp:ident(ptr)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(fd),exp[grammar(call),exp:ident(sys_open),exp:ident(path),exp:const:int(0),exp:const:int(0)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(fd),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to open file),exp:const:int(1),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(path),exp:ident(fd)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(PAGE_SIZE),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(len),exp[grammar(call),exp:ident(sys_read),exp:ident(fd),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Read of file failed),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp:ident(first_chunk),{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(\n),exp:const:int(0),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(first_chunk),exp:const:int(0)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(len),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp:ident(buf),exp:ident(len)],exp:const:other(N/H)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)]]]],statem(N/H),statem(N/H),statem(N/H)]],define(N/H),def[fname(mconsole_help),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(UML_MCONSOLE_HELPTEXT),exp:const:int(0),exp:const:int(0)]]]],def[fname(mconsole_halt),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_halt)]]]],def[fname(mconsole_reboot),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(machine_restart),exp:ident(NULL)]]]],def[fname(mconsole_cad),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(ctrl_alt_del)]]]],def[fname(mconsole_go),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Not stopped),exp:const:int(1),exp:const:int(0)]]]],def[fname(mconsole_stop),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(deactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(1)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(stopped),exp:const:int(0),exp:const:int(0)]],for[expr(NONE),expr(NONE),expr(NONE),{}stmt[sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_go)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_stop)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Already stopped),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(mconsole_sysrq)],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(old_regs),exp[grammar(call),exp:ident(set_irq_regs),exp:??(N/H)]]],estmt[exp[grammar(call),exp:ident(mconsole_sysrq),exp:ident(req)]],estmt[exp[grammar(call),exp:ident(set_irq_regs),exp:ident(old_regs)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(req),ident(cmd)],ident(handler)],exp:ident(req)]]]],estmt[exp[grammar(call),exp:ident(os_set_fd_block),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(reactivate_fd),exp[grammar(record_ptr),exp:ident(req),ident(originating_fd)],exp:ident(MCONSOLE_IRQ)]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]]]],decl(N/H),decl(N/H),def[fname(mconsole_register_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(new),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(mc_devices_lock)]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(new),ident(list)],exp:&ref:exp:ident(mconsole_devices)]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(mc_devices_lock)]]]],def[fname(mconsole_find_dev),funtype[fulltype[typec(N/H)],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(NULL)]]],define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(mem_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected '=' after 'mem')]],statem(N/H)],estmt(NONE)],estmt[exp:??(N/H)],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(0)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(str),exp:const:int(0)],exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(add),exp:const:int(1)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Expected increment to start with '-' or '+')]],statem(N/H)]]],estmt[exp:??(N/H)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(diff),exp[grammar(call),exp:ident(memparse),exp:ident(str),exp:&ref:exp:ident(ret)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ret),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to parse memory increment)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),op_assi(/=),exp:ident(diff),exp:ident(PAGE_SIZE)]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp:&ref:exp:ident(plug_mem_mutex)]],for[exp[grammar(assign),simple_assi(=),exp:ident(i),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(i),exp:ident(diff)],exp:??(N/H),{}stmt[statem(N/H),statem(N/H),sel_if[exp:ident(add),{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(unplugged_pages)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp:ident(unplugged_pages),ident(next)],argtype(N/H),exp:ident(list)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(unplug_index),exp:const:int(0)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)]]]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp:??(N/H)]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(alloc_page),exp:ident(GFP_ATOMIC)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(page),exp:ident(NULL)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(page_address),exp:ident(page)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(unplug_index),exp:ident(UNPLUGGED_PER_PAGE)],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(unplugged),ident(list)],exp:&ref:exp:ident(unplugged_pages)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplug_index),exp:const:int(0)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(addr),exp:ident(unplugged)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(unplugged),exp[grammar(call),exp:ident(list_entry),exp:ident(entry),argtype(N/H),exp:ident(list)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(os_drop_memory),exp:ident(addr),exp:ident(PAGE_SIZE)]]],sel_if[exp:ident(err),{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(err)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Failed to release memory)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(unplugged),ident(pages)],exp:??(N/H)],exp:ident(addr)]]]],estmt[exp:??(N/H)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(0)]],statem(N/H),statem(N/H)]],def[fname(mem_get_config),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(buf),exp:const:string(%ld),exp:ident(uml_physmem)]],estmt[exp[grammar(call),exp:ident(CONFIG_CHUNK),exp:ident(str),exp:ident(size),exp:ident(len),exp:ident(buf),exp:const:int(1)]],st_return[exp:ident(len)]]],def[fname(mem_id),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]],param[reg(),name(start_out),fulltype[typec(N/H)]],param[reg(),name(end_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(start_out),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(end_out),exp:const:int(0)]],st_return[exp:const:int(0)]]],def[fname(mem_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(error_out),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:*ref:exp:ident(error_out),exp:const:string(Memory doesn't support the remove operation)]],st_return[exp:??(N/H)]]],decl(N/H),NCP(N/H),mtop(N/H),define(N/H),def[fname(mconsole_get_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(get_config),fulltype[typec(N/H)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(get_config),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(No get_config routine defined),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(error),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(default_buf)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp:ident(default_buf)]],while[exp:const:int(1),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:*ref:exp:ident(get_config),exp:ident(name),exp:ident(buf),exp:ident(size),exp:&ref:exp:ident(error)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(error),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(size)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(buf),exp:const:int(0),exp:const:int(0)]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(buf),exp:ident(default_buf)],estmt[exp[grammar(call),exp:ident(kfree),exp:ident(buf)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp:ident(n)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmalloc),exp:ident(size),exp:ident(GFP_KERNEL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(buf),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Failed to allocate buffer),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)]]],statem(N/H)]],def[fname(mconsole_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(config)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad configuration option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(name),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp:ident(name)]],while[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],exp[grammar(binary_logi),logiop(??),exp:*ref:exp:ident(ptr),exp:const:other(N/H)]],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(config)],exp:ident(name),exp:&ref:exp:ident(error_string)]]],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:ident(error_string),exp:ident(err),exp:const:int(0)]]],estmt[exp[grammar(call),exp:ident(mconsole_get_config),exp[grammar(record_ptr),exp:ident(dev),ident(get_config)],exp:ident(req),exp:ident(name)]]]]],def[fname(mconsole_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(remove)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dev),exp[grammar(call),exp:ident(mconsole_find_dev),exp:ident(ptr)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(dev),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Bad remove option),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ptr),exp[grammar(&ref),grammar(exp),grammar(array_acc),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp[grammar(record_ptr),exp:ident(dev),ident(name)]]]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp:const:int(1)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(id)],exp:&ref:exp:ident(ptr),exp:&ref:exp:ident(start),exp:&ref:exp:ident(end)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:const:string(Couldn't parse device number)]],statem(N/H)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(start)],exp[grammar(binary_logi),logiop(??),exp:ident(n),exp:ident(end)]],{}stmt[estmt[exp[grammar(call),exp:ident(sprintf),exp:ident(error),exp:const:other(N/H),exp:ident(start),exp:ident(end)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(error)]],statem(N/H)],estmt(NONE)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err_msg),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp[grammar(*ref),grammar(exp),grammar(record_ptr),exp:ident(dev),ident(remove)],exp:ident(n),exp:&ref:exp:ident(err_msg)]]],statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(console_write),funtype[fulltype[ctype[btype(void)]],param[reg(),name(console),fulltype[typec(N/H)]],param[reg(),name(string),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(clients)],statem(N/H),estmt(NONE)],while[exp[grammar(binary_logi),logiop(??),exp:ident(len),exp:const:int(0)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(n),exp[grammar(call),exp:ident(min),exp:??(N/H),exp[grammar(call),exp:ident(ARRAY_SIZE),exp:ident(console_buf)]]]],estmt[exp[grammar(call),exp:ident(strncpy),exp:ident(console_buf),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(+=),exp:ident(string),exp:ident(n)]],estmt[exp[grammar(assign),op_assi(-=),exp:ident(len),exp:ident(n)]],statem(N/H)]]]],decl(N/H),def[fname(mc_add_console),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(register_console),exp:&ref:exp:ident(mc_console)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(with_console),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]],param[reg(),name(proc),fulltype[typec(N/H)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp:ident(entry),ident(req)],exp:ident(req)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)],exp:&ref:exp:ident(clients)]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:*ref:exp:ident(proc),exp:ident(arg)]],estmt[exp[grammar(call),exp:ident(mconsole_reply_len),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(spin_lock_irqsave),exp:&ref:exp:ident(client_lock),exp:ident(flags)]],estmt[exp[grammar(call),exp:ident(list_del),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp:ident(entry),ident(list)]]],estmt[exp[grammar(call),exp:ident(spin_unlock_irqrestore),exp:&ref:exp:ident(client_lock),exp:ident(flags)]]]],includeN[inc_elem(linux),inc_elem(sysrq.h)],def[fname(sysrq_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(handle_sysrq),exp:*ref:exp:ident(op),exp:ident(NULL)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(sysrq)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:*ref:exp:ident(ptr),exp:const:other(N/H)],estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(),exp:const:int(0),exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(sysrq_proc),exp:ident(ptr)]]]],def[fname(mconsole_sysrq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Sysrq not compiled in),exp:const:int(1),exp:const:int(0)]]]],def[fname(stack_proc),funtype[fulltype[ctype[btype(void)]],param[reg(),name(arg),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(to),ident(thread)],ident(saved_task)],exp:ident(from)]],estmt[exp[grammar(call),exp:ident(switch_to),exp:ident(from),exp:ident(to),exp:ident(from)]]]],def[fname(mconsole_stack),funtype[fulltype[ctype[btype(void)]],param[reg(),name(req),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),op_assi(+=),exp:ident(ptr),exp[grammar(call),exp:ident(strlen),exp:const:string(stack)]]],while[exp[grammar(call),exp:ident(isspace),exp:*ref:exp:ident(ptr)],estmt[exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(call),exp:ident(sscanf),exp:ident(ptr),exp:const:string(%d),exp:&ref:exp:ident(pid_requested)],exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Please specify a pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(to),exp[grammar(call),exp:ident(find_task_by_pid_ns),exp:ident(pid_requested),exp:&ref:exp:ident(init_pid_ns)]]],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp:ident(to),exp:ident(NULL)],exp[grammar(binary_logi),logiop(eq),exp:ident(pid_requested),exp:const:int(0)]],{}stmt[estmt[exp[grammar(call),exp:ident(mconsole_reply),exp:ident(req),exp:const:string(Couldn't find that pid),exp:const:int(1),exp:const:int(0)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(with_console),exp:ident(req),exp:ident(stack_proc),exp:ident(to)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),def[fname(create_proc_mconsole),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ent),exp[grammar(call),exp:ident(create_proc_entry),exp:const:string(mconsole),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:const:int(0200)],exp:ident(NULL)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(ent),exp:ident(NULL)],{}stmt[estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]],st_return[exp:const:int(0)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(read_proc)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ent),ident(write_proc)],exp:ident(write_proc_mconsole)]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(lock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_lock),exp:&ref:exp:ident(notify_spinlock)]]]],def[fname(unlock_notify),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(spin_unlock),exp:&ref:exp:ident(notify_spinlock)]]]],mtop(N/H),define(N/H),def[fname(mconsole_setup),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(str),fulltype[typec(N/H)]]],{}stmt[sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(assign),op_assi(+=),exp:ident(str),exp[grammar(call),exp:ident(strlen),exp:ident(NOTIFY)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(notify_socket),exp:ident(str)]]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H),exp:ident(str)]]],st_return[exp:const:int(1)]]],mtop(N/H),mtop(N/H),def[fname(notify_panic),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(self),fulltype[typec(N/H)]],param[reg(),name(unused1),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(ptr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(notify_socket),exp:ident(NULL)],st_return[exp:const:int(0)],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mconsole_notify),exp:ident(notify_socket),exp:ident(MCONSOLE_PANIC),exp:ident(message),exp[grammar(binary_arith),aop(+),exp[grammar(call),exp:ident(strlen),exp:ident(message)],exp:const:int(1)]]],st_return[exp:const:int(0)]]],decl(N/H),def[fname(add_notifier),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(atomic_notifier_chain_register),exp:&ref:exp:ident(panic_notifier_list),exp:&ref:exp:ident(panic_exit_notifier)]],st_return[exp:const:int(0)]]],mtop(N/H),def[fname(mconsole_notify_socket),funtype[fulltype[typec(N/H)],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[st_return[exp:ident(notify_socket)]]],mtop(N/H)]
[Main] Making safe parts for pair 2
prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 16
exp[meta(X6),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[meta(X4),meta(X3),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],ident(dentry)]]
exp[meta(X6),meta(X5),exp[meta(X4),exp:ident(nd),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[meta(X4),exp:ident(nd),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],ident(dentry)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),meta(X3),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],ident(dentry)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[meta(X4),meta(X3),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[meta(X4),exp:ident(nd),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[meta(X4),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),meta(X3),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] unsafe part:
	exp[meta(X6),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
[Diff] unsafe part:
	exp[meta(X6),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
[Diff] unsafe part:
	exp[grammar(call),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
[Diff] unsafe part:
	exp[grammar(call),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 64
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[meta(X10),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),meta(X9),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> exp[grammar(assign),simple_assi(=),meta(X8),exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]
[Diff] resulting abstract updates: 96
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),meta(X9),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),meta(X7),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[meta(X10),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X10),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),meta(X9),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[meta(X8),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[meta(X8),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),meta(X7),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),meta(X7),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),meta(X7),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),meta(X7),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),meta(X6)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X6)],meta(X1)]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[meta(X4),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),meta(X3),meta(X2)]]
exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[meta(X8),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[meta(X8),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X10),meta(X9),exp[grammar(record_ptr),meta(X7),meta(X6)],meta(X1)] ==> exp[meta(X10),meta(X9),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X7),ident(path)],meta(X6)],meta(X1)]
[Diff] abstracting concrete update:estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]] ==> estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] resulting abstract updates: 16
exp[meta(X6),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[meta(X4),meta(X3),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],ident(dentry)]]
exp[meta(X6),meta(X5),exp[meta(X4),exp:ident(nd),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[meta(X4),exp:ident(nd),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],ident(dentry)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),meta(X3),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],ident(dentry)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X2)]]
exp[meta(X6),meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[meta(X4),meta(X3),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[meta(X4),exp:ident(nd),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[meta(X4),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),exp:ident(nd),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),meta(X3),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],ident(dentry)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X2)]]
exp[grammar(call),meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]
[Diff] unsafe part:
	exp[meta(X6),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
[Diff] unsafe part:
	exp[meta(X6),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[meta(X6),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
[Diff] unsafe part:
	exp[grammar(call),meta(X5),exp[meta(X4),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[meta(X4),meta(X3),ident(path)],meta(X2)]]
[Diff] unsafe part:
	exp[grammar(call),meta(X5),exp[grammar(record_ptr),meta(X3),meta(X2)]] ==> exp[grammar(call),meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X3),ident(path)],meta(X2)]]
[Diff] abstracting concrete update:estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] resulting abstract updates: 16
estmt[exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
estmt[exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
estmt[exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
estmt[exp[meta(X7),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
estmt[exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
estmt[exp[meta(X7),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
estmt[exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
estmt[exp[meta(X7),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
estmt[exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
estmt[exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),ident(dentry)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)]]]
estmt[exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),meta(X3)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)]]]
estmt[exp[grammar(call),meta(X6),exp[meta(X5),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)]]]
estmt[exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),meta(X3)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)]]]
estmt[exp[grammar(call),meta(X6),exp[grammar(record_ptr),meta(X4),ident(dentry)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)]]]
estmt[exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),meta(X3)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)]]]
estmt[exp[grammar(call),meta(X6),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]
[Diff] unsafe part:
	estmt[exp[meta(X7),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> estmt[exp[meta(X7),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] unsafe part:
	estmt[exp[grammar(call),meta(X6),exp[meta(X5),meta(X4),meta(X3)]]] ==> estmt[exp[grammar(call),meta(X6),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)]]]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 8
exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(dentry)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],ident(dentry)]
exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
exp[grammar(record_ptr),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],ident(dentry)]
exp[grammar(record_ptr),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X1)]
exp[grammar(record_ptr),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(dentry)]
[Diff] unsafe part:
	exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)]
[Diff] resulting abstract updates: 40
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]
[Diff] resulting abstract updates: 320
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],ident(name)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[meta(X8),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X8),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],ident(name)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],ident(name)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],ident(name)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 8
exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(mnt)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],ident(mnt)]
exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
exp[grammar(record_ptr),meta(X2),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],ident(mnt)]
exp[grammar(record_ptr),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X1)]
exp[grammar(record_ptr),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)]
[Diff] resulting abstract updates: 40
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(mnt)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]] ==> exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]
[Diff] resulting abstract updates: 1
exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]] ==> exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]
[Diff] abstracting concrete update:estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]] ==> estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]]
[Diff] resulting abstract updates: 1
estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]] ==> estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]] ==> {}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]] ==> {}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]
[Diff] abstracting concrete update:def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]] ==> def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]]
[Diff] resulting abstract updates: 1
def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]] ==> def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]] ==> prg2[includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(mnt_namespace.h)],includeL[inc_elem(internal.h)],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(afs_mntpt_check_symlink),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vnode),fulltype[typec(N/H)]],param[reg(),name(key),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%x:%u,%u}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vid)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(vnode)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(fid)],ident(unique)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(call),exp:ident(AFS_VNODE_TO_I),exp:ident(vnode)],ident(i_mapping)],exp:const:int(0),exp:&ref:exp:ident(file)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(vnode),ident(status)],ident(size)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink to %*.*s),exp:??(N/H),exp:??(N/H),exp:ident(buf)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(??),exp:ident(size),exp:const:int(2)],exp[grammar(binary_logi),logiop(or),exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp:const:int(0)],exp:const:other(N/H)]]],exp[grammar(binary_logi),logiop(eq),exp[grammar(array_acc),exp:ident(buf),exp[grammar(binary_arith),aop(-),exp:ident(size),exp:const:int(1)]],exp:const:other(N/H)]],{}stmt[estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(symlink is a mountpoint)]],estmt[exp[grammar(call),exp:ident(spin_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]],estmt[exp[grammar(call),exp:ident(set_bit),exp:ident(AFS_VNODE_MOUNTPOINT),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(flags)]]],estmt[exp[grammar(call),exp:ident(spin_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(vnode),ident(lock)]]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(afs_mntpt_lookup),funtype[fulltype[typec(N/H)],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(dir),exp:ident(dentry),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dentry),ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)]]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]]],def[fname(afs_mntpt_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p,%p{%p{%s},%s}),exp:ident(inode),exp:ident(file),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(cond3),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_parent)],ident(d_name)],ident(name)],exp:??(N/H)],exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)],ident(d_name)],ident(name)]]],st_return[exp:??(N/H)]]],def[fname(afs_mntpt_do_automount),funtype[fulltype[typec(N/H)],param[reg(),name(mntpt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string({%s}),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(BUG_ON),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(size),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_size)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(size),exp[grammar(binary_arith),aop(-),exp:ident(PAGE_SIZE),exp:const:int(1)]],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(devname),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(options),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp[grammar(call),exp:ident(read_mapping_page),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_inode)],ident(i_mapping)],exp:const:int(0),exp:ident(NULL)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(page)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(page)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(call),exp:ident(PageError),exp:ident(page)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(buf),exp[grammar(call),exp:ident(kmap),exp:ident(page)]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(devname),exp:ident(buf),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(kunmap),exp:ident(page)]],estmt[exp[grammar(call),exp:ident(page_cache_release),exp:ident(page)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(page),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(super),exp[grammar(call),exp:ident(AFS_FS_S),exp[grammar(record_ptr),exp:ident(mntpt),ident(d_sb)]]]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(options),exp:const:string(cell=),exp:const:int(5)]],estmt[exp[grammar(call),exp:ident(strcpy),exp[grammar(binary_arith),aop(+),exp:ident(options),exp:const:int(5)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(cell)],ident(name)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(super),ident(volume)],ident(type)],exp:ident(AFSVL_RWVOL)],estmt[exp[grammar(call),exp:ident(strcat),exp:ident(options),exp:const:string(,rwpath)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- attempting mount %s -o %s ---),exp:ident(devname),exp:ident(options)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(mnt),exp[grammar(call),exp:ident(vfs_kern_mount),exp:&ref:exp:ident(afs_fs_type),exp:const:int(0),exp:ident(devname),exp:ident(options)]]],estmt[exp[grammar(call),exp:ident(_debug),exp:const:string(--- mount result %p ---),exp:ident(mnt)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %p),exp:ident(mnt)]],st_return[exp:ident(mnt)],statem(N/H),sel_if[exp:ident(devname),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],sel_if[exp:ident(options),estmt[exp[grammar(call),exp:ident(free_page),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(ret)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(ret)]]]],def[fname(afs_mntpt_follow_link),funtype[fulltype[typec(N/H)],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(nd),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(_enter),exp:const:string(%p{%s},{%s:%p{%s},}),exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(dentry),ident(d_name)],ident(name)],exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],ident(mnt_devname)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_name)],ident(name)]]],estmt[exp[grammar(call),exp:ident(dput),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(call),exp:ident(dget),exp:ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(newmnt),exp[grammar(call),exp:ident(afs_mntpt_do_automount),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(newmnt)],{}stmt[estmt[exp[grammar(call),exp:ident(path_release),exp:ident(nd)]],st_return[exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(mntget),exp:ident(newmnt)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(do_add_mount),exp:ident(newmnt),exp:ident(nd),exp:ident(MNT_SHRINKABLE),exp:&ref:exp:ident(afs_vfsmounts)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(_leave),exp:const:string( = %d),exp:ident(err)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:ident(err)]]]],def[fname(afs_mntpt_expiry_timed_out),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],sel_if[exp:??(N/H),{}stmt[estmt[exp[grammar(call),exp:ident(mark_mounts_for_expiry),exp:&ref:exp:ident(afs_vfsmounts)]],estmt[exp[grammar(call),exp:ident(schedule_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer),exp[grammar(binary_arith),aop(*),exp:ident(afs_mntpt_expiry_timeout),exp:ident(HZ)]]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(_leave),exp:const:string()]]]],def[fname(afs_mntpt_kill_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(_enter),exp:const:string()]],estmt[exp[grammar(call),exp:ident(ASSERT),exp[grammar(call),exp:ident(list_empty),exp:&ref:exp:ident(afs_vfsmounts)]]],estmt[exp[grammar(call),exp:ident(cancel_delayed_work),exp:&ref:exp:ident(afs_mntpt_expiry_timer)]],estmt[exp[grammar(call),exp:ident(flush_scheduled_work)]]]],def[fname(afs_umount_begin),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vfsmnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[exp[grammar(call),exp:ident(shrink_submounts),exp:ident(vfsmnt),exp:&ref:exp:ident(afs_vfsmounts)]]]]]
[Main] Making safe parts for pair 3
prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)] ==> exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]
[Diff] resulting abstract updates: 1
exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)] ==> exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]
[Diff] abstracting concrete update:st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]] ==> st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]
[Diff] resulting abstract updates: 1
st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]] ==> st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] resulting abstract updates: 8
exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(mnt)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],ident(mnt)]
exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
exp[grammar(record_ptr),meta(X2),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],ident(mnt)]
exp[grammar(record_ptr),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X1)]
exp[grammar(record_ptr),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)]
[Diff] resulting abstract updates: 40
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)] ==> exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]
[Diff] resulting abstract updates: 1
exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)] ==> exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]
[Diff] abstracting concrete update:st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]] ==> st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]]
[Diff] resulting abstract updates: 1
st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]] ==> st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]]
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]] ==> sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]] ==> sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]
[Diff] resulting abstract updates: 200
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]] ==> exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]]
[Diff] resulting abstract updates: 1
exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]] ==> exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]]
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] resulting abstract updates: 8
exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
exp[meta(X3),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(dentry)]
exp[meta(X3),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],meta(X1)]
exp[meta(X3),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),exp:ident(nd),ident(path)],ident(dentry)]
exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
exp[grammar(record_ptr),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],ident(dentry)]
exp[grammar(record_ptr),exp:ident(nd),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X1)]
exp[grammar(record_ptr),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X3),meta(X2),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X3),meta(X2),ident(path)],ident(dentry)]
[Diff] unsafe part:
	exp[grammar(record_ptr),meta(X2),meta(X1)] ==> exp[grammar(record_acc),exp[grammar(record_ptr),meta(X2),ident(path)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)]
[Diff] resulting abstract updates: 40
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[meta(X5),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X5),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],ident(dentry)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[meta(X5),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[meta(X5),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[meta(X5),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X5),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] unsafe part:
	exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X4),meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X4),ident(path)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)]
[Diff] resulting abstract updates: 200
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[meta(X7),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[meta(X7),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[meta(X7),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[meta(X7),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),meta(X6),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),meta(X6),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),meta(X5)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],meta(X5)],meta(X3)],meta(X1)]
exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],meta(X3)],meta(X1)] ==> exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],meta(X3)],meta(X1)]
[Diff] abstracting concrete update:exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)] ==> exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)]
[Diff] resulting abstract updates: 0
[Diff] abstracting concrete update:sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)] ==> sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]
[Diff] abstracting concrete update:def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]] ==> def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]]
[Diff] resulting abstract updates: 1
def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]] ==> def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(nd),ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(nd),ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(file.h)],includeN[inc_elem(linux),inc_elem(fs.h)],includeN[inc_elem(linux),inc_elem(backing-dev.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(ioctl.h)],includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(mount.h)],includeN[inc_elem(linux),inc_elem(namei.h)],includeN[inc_elem(linux),inc_elem(pagemap.h)],includeN[inc_elem(linux),inc_elem(poll.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(parser.h)],includeN[inc_elem(asm),inc_elem(prom.h)],includeN[inc_elem(asm),inc_elem(semaphore.h)],includeN[inc_elem(asm),inc_elem(spu.h)],includeN[inc_elem(asm),inc_elem(spu_priv1.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(spufs.h)],decl(N/H),decl(N/H),decl(N/H),def[fname(spufs_alloc_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ei),exp[grammar(call),exp:ident(kmem_cache_alloc),exp:ident(spufs_inode_cache),exp:ident(GFP_KERNEL)]]],sel_if[exp:??(N/H),st_return[exp:ident(NULL)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ei),ident(i_openers)],exp:const:int(0)]],st_return[exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]],def[fname(spufs_destroy_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(kmem_cache_free),exp:ident(spufs_inode_cache),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)]]]]],def[fname(spufs_init_once),funtype[fulltype[ctype[btype(void)]],param[reg(),name(cachep),fulltype[typec(N/H)]],param[reg(),name(p),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(inode_init_once),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ei),ident(vfs_inode)]]]]],def[fname(spufs_new_inode),funtype[fulltype[typec(N/H)],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(new_inode),exp:ident(sb)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(mode)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_uid)],exp[grammar(record_ptr),exp:ident(current),ident(fsuid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(current),ident(fsgid)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_blocks)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_atime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mtime)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_ctime)],exp:ident(CURRENT_TIME)]]]],statem(N/H)]],def[fname(spufs_setattr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(attr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(attr),ident(ia_valid)],exp:ident(ATTR_SIZE)],exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(attr),ident(ia_size)],exp[grammar(record_ptr),exp:ident(inode),ident(i_size)]]],st_return[exp:??(N/H)],estmt(NONE)],st_return[exp[grammar(call),exp:ident(inode_setattr),exp:ident(inode),exp:ident(attr)]]]],def[fname(spufs_new_file),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(fops),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFREG),exp:ident(mode)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(spufs_file_iops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:ident(fops)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_private)],exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp[grammar(call),exp:ident(get_spu_context),exp:ident(ctx)]]]],estmt[exp[grammar(call),exp:ident(d_add),exp:ident(dentry),exp:ident(inode)]],statem(N/H)]],def[fname(spufs_delete_inode),funtype[fulltype[ctype[btype(void)]],param[reg(),name(inode),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)],estmt[exp[grammar(call),exp:ident(put_spu_context),exp[grammar(record_ptr),exp:ident(ei),ident(i_ctx)]]],estmt(NONE)],sel_if[exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)],estmt[exp[grammar(call),exp:ident(put_spu_gang),exp[grammar(record_ptr),exp:ident(ei),ident(i_gang)]]],estmt(NONE)],estmt[exp[grammar(call),exp:ident(clear_inode),exp:ident(inode)]]]],def[fname(spufs_prune_dir),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)],ident(i_mutex)]]]]],def[fname(spufs_rmdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(parent),fulltype[typec(N/H)]],param[reg(),name(dir),fulltype[typec(N/H)]]],{}stmt[estmt[exp[grammar(call),exp:ident(spufs_prune_dir),exp:ident(dir)]],estmt[exp[grammar(call),exp:ident(d_drop),exp:ident(dir)]],st_return[exp[grammar(call),exp:ident(simple_rmdir),exp:ident(parent),exp:ident(dir)]]]],def[fname(spufs_fill_dir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(files),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(and),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp[grammar(array_acc),exp[grammar(record_ptr),exp:ident(files),ident(name)],exp:const:int(0)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(d_alloc_name),exp:ident(dir),exp[grammar(record_ptr),exp:ident(files),ident(name)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_new_file),exp[grammar(record_ptr),exp:ident(dir),ident(d_sb)],exp:ident(dentry),exp[grammar(record_ptr),exp:ident(files),ident(ops)],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(files),ident(mode)],exp:ident(mode)],exp:ident(ctx)]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp:??(N/H)]]],st_return[exp:const:int(0)],statem(N/H),estmt[exp[grammar(call),exp:ident(shrink_dcache_parent),exp:ident(dir)]],st_return[exp:ident(ret)]]],def[fname(spufs_dir_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(file),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dir),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(file),ident(f_path)],ident(dentry)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(parent),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(dir),ident(d_parent)],ident(d_inode)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dir),ident(d_inode)]],ident(i_ctx)]]],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(parent),exp:ident(dir)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(parent),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(ret)]],estmt[exp[grammar(call),exp:ident(spu_forget),exp:ident(ctx)]],st_return[exp[grammar(call),exp:ident(dcache_dir_close),exp:ident(inode),exp:ident(file)]]]],decl(N/H),mtop(N/H),def[fname(spufs_mkdir),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ctx),exp[grammar(call),exp:ident(alloc_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(dir)],ident(i_gang)]]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(ctx)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(flags)],exp:ident(flags)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_nosched_contents),exp:ident(mode),exp:ident(ctx)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_fill_dir),exp:ident(dentry),exp:ident(spufs_dir_contents),exp:ident(mode),exp:ident(ctx)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp[grammar(call),exp:ident(dget),exp:ident(dentry)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],statem(N/H),statem(N/H),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(ctx)]],statem(N/H),statem(N/H)]],def[fname(spufs_context_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_assert_affinity),funtype[fulltype[typec(N/H)],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(gang),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(aff_supp),exp:??(N/H)]],sel_if[exp:??(N/H),st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)]],exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(gang),ident(aff_ref_ctx)],ident(flags)],exp:ident(SPU_CREATE_AFFINITY_MEM)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(gang),ident(aff_flags)],exp:ident(AFF_MERGED)],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp:??(N/H),exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(spufs_context_fops)]],st_return[exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(get_spu_context),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(filp),ident(f_dentry)],ident(d_inode)]],ident(i_ctx)]]]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp[grammar(binary_logi),logiop(and),exp:??(N/H),exp:??(N/H)],exp:??(N/H)],exp:??(N/H)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(gang),exp[grammar(record_ptr),exp:ident(neighbor),ident(gang)]],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(count),exp:const:int(1)]],statem(N/H),sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],estmt[exp:??(N/H)],estmt(NONE)],for[exp[grammar(assign),simple_assi(=),exp:ident(node),exp:const:int(0)],exp[grammar(binary_logi),logiop(??),exp:ident(node),exp:ident(MAX_NUMNODES)],exp:??(N/H),{}stmt[sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(binary_arith),aop(-),exp[grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(n_spus)],exp[grammar(call),exp:ident(atomic_read),exp[grammar(&ref),grammar(exp),grammar(record_acc),exp[grammar(array_acc),exp:ident(cbe_spu_info),exp:ident(node)],ident(reserved_spus)]]],exp:ident(count)],statem(N/H),estmt(NONE)]]],sel_if[exp[grammar(binary_logi),logiop(eq),exp:ident(node),exp:ident(MAX_NUMNODES)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(err),exp[grammar(call),exp:ident(ERR_PTR),exp:??(N/H)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],st_return[exp:ident(neighbor)],statem(N/H),st_return[exp:ident(err)]]],def[fname(spufs_set_affinity),funtype[fulltype[ctype[btype(void)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(ctx),fulltype[typec(N/H)]],param[reg(),name(neighbor),fulltype[typec(N/H)]]],{}stmt[sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_MEM)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_AFFINITY_SPU)],{}stmt[sel_if[exp[grammar(call),exp:ident(list_empty),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(call),exp:ident(list_is_last),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_list_head)]],exp[grammar(record_ptr),exp[grammar(call),exp:ident(list_entry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_list)],ident(next)],argtype(N/H),exp:ident(aff_list)],ident(aff_head)]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(list_add_tail),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(ctx),ident(aff_list)],exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(neighbor),ident(aff_list)]]],sel_if[exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(neighbor),ident(aff_head)],exp:const:int(0)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(ctx),ident(aff_head)],exp:const:int(1)]]],estmt(NONE)]]],sel_if[exp:??(N/H),estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(record_ptr),exp:ident(ctx),ident(gang)],ident(aff_ref_ctx)],exp:ident(ctx)]],estmt(NONE)]],estmt(NONE)]]],def[fname(spufs_create_context),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(aff_filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_NOSCHED)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(eq),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_NOSCHED),exp:ident(SPU_CREATE_ISOLATE)]],exp:ident(SPU_CREATE_ISOLATE)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(and),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_ISOLATE)],exp:??(N/H)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(affinity),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(SPU_CREATE_AFFINITY_MEM),exp:ident(SPU_CREATE_AFFINITY_SPU)]]]],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(call),exp:ident(mutex_lock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(gang),ident(aff_mutex)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(neighbor),exp[grammar(call),exp:ident(spufs_assert_affinity),exp:ident(flags),exp:ident(gang),exp:ident(aff_filp)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(neighbor)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(neighbor)]]],statem(N/H)],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkdir),exp:ident(inode),exp:ident(dentry),exp:ident(flags),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],sel_if[exp:ident(affinity),{}stmt[estmt[exp[grammar(call),exp:ident(spufs_set_affinity),exp:ident(flags),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)],exp:ident(neighbor)]],sel_if[exp:ident(neighbor),estmt[exp[grammar(call),exp:ident(put_spu_context),exp:ident(neighbor)]],estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_context_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(WARN_ON),exp[grammar(call),exp:ident(spufs_rmdir),exp:ident(inode),exp:ident(dentry)]]],estmt[exp[grammar(call),exp:ident(mutex_unlock),exp[grammar(&ref),grammar(exp),grammar(record_ptr),exp:ident(inode),ident(i_mutex)]]],estmt[exp[grammar(call),exp:ident(spu_forget),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)]],ident(i_ctx)]]],statem(N/H)],estmt(NONE)],statem(N/H),statem(N/H),statem(N/H),st_return[exp:ident(ret)]]],def[fname(spufs_mkgang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dir),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp[grammar(record_ptr),exp:ident(dir),ident(i_sb)],exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IFDIR)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:const:int(0)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp[grammar(record_ptr),exp:ident(dir),ident(i_mode)],exp:ident(S_ISGID)],{}stmt[estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_gid)],exp[grammar(record_ptr),exp:ident(dir),ident(i_gid)]]],estmt[exp[grammar(assign),op_assi(&=),exp[grammar(record_ptr),exp:ident(inode),ident(i_mode)],exp:ident(S_ISGID)]]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(gang),exp[grammar(call),exp:ident(alloc_spu_gang)]]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_gang)],exp:ident(gang)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(d_instantiate),exp:ident(dentry),exp:ident(inode)]],estmt[exp:??(N/H)],estmt[exp:??(N/H)],st_return[exp:ident(ret)],statem(N/H),statem(N/H)]],def[fname(spufs_gang_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(get_unused_fd)]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],estmt[exp[grammar(call),exp:ident(mntput),exp:ident(mnt)]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(filp),exp[grammar(call),exp:ident(dentry_open),exp:ident(dentry),exp:ident(mnt),exp:ident(O_RDONLY)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(filp)],{}stmt[estmt[exp[grammar(call),exp:ident(put_unused_fd),exp:ident(ret)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(filp)]]],statem(N/H)],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(filp),ident(f_op)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(call),exp:ident(fd_install),exp:ident(ret),exp:ident(filp)]],statem(N/H)]],def[fname(spufs_create_gang),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(inode),fulltype[typec(N/H)]],param[reg(),name(dentry),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]],param[reg(),name(mode),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_mkgang),exp:ident(inode),exp:ident(dentry),exp[grammar(binary_arith),aop(N/H),exp:ident(mode),exp:ident(S_IRWXUGO)]]]],sel_if[exp:ident(ret),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(spufs_gang_open),exp[grammar(call),exp:ident(dget),exp:ident(dentry)],exp[grammar(call),exp:ident(mntget),exp:ident(mnt)]]]],sel_if[exp[grammar(binary_logi),logiop(??),exp:ident(ret),exp:const:int(0)],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(WARN_ON),exp:ident(err)]]],estmt(NONE)],statem(N/H),estmt[exp[grammar(call),exp:ident(dput),exp:ident(dentry)]],st_return[exp:ident(ret)]]],decl(N/H),def[fname(spufs_create),funtype[fulltype[ctype[btype[itype[sgn(signed),base(long)]]]],param[reg(),name(nd),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(mode),fulltype[typec(N/H)]],param[reg(),name(filp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_type)],exp:&ref:exp:ident(spufs_type)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:??(N/H)],statem(N/H),estmt(NONE)],sel_if[exp[grammar(binary_logi),logiop(??),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],exp[grammar(record_ptr),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_sb)],ident(s_root)]],{}stmt[sel_if[exp[grammar(binary_logi),logiop(or),exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],exp:??(N/H)],statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(dentry),exp[grammar(call),exp:ident(lookup_create),exp:ident(nd),exp:const:int(1)]]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp[grammar(call),exp:ident(PTR_ERR),exp:ident(dentry)]]],sel_if[exp[grammar(call),exp:ident(IS_ERR),exp:ident(dentry)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp[grammar(record_ptr),exp:ident(dentry),ident(d_inode)],statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),op_assi(&=),exp:ident(mode),exp:??(N/H)]],sel_if[exp[grammar(binary_arith),aop(N/H),exp:ident(flags),exp:ident(SPU_CREATE_GANG)],st_return[exp[grammar(call),exp:ident(spufs_create_gang),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(mode)]],st_return[exp[grammar(call),exp:ident(spufs_create_context),exp[grammar(record_ptr),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(dentry)],ident(d_inode)],exp:ident(dentry),exp[grammar(record_acc),exp[grammar(record_ptr),exp:ident(nd),ident(path)],ident(mnt)],exp:ident(flags),exp:ident(mode),exp:ident(filp)]]],statem(N/H),statem(N/H),statem(N/H)]],decl(N/H),decl(N/H),def[fname(spufs_parse_options),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(options),fulltype[typec(N/H)]],param[reg(),name(root),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),while[exp[grammar(binary_logi),logiop(??),exp[grammar(assign),simple_assi(=),exp:ident(p),exp[grammar(call),exp:ident(strsep),exp:&ref:exp:ident(options),exp:const:string(,)]],exp:ident(NULL)],{}stmt[statem(N/H),sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(token),exp[grammar(call),exp:ident(match_token),exp:ident(p),exp:ident(spufs_tokens),exp:ident(args)]]],statem(N/H)]],st_return[exp:const:int(1)]]],def[fname(spufs_exit_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[estmt[exp[grammar(call),exp:ident(free_pages),exp:??(N/H),exp[grammar(call),exp:ident(get_order),exp:ident(isolated_loader_size)]]]]],def[fname(spufs_init_isolated_loader),funtype[fulltype[ctype[btype(void)]],param[reg(),name(),fulltype[ctype[btype(void)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(dn),exp[grammar(call),exp:ident(of_find_node_by_path),exp:const:string(/spu-isolation)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(loader),exp[grammar(call),exp:ident(of_get_property),exp:ident(dn),exp:const:string(loader),exp:&ref:exp:ident(size)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(isolated_loader_size),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(memcpy),exp:ident(isolated_loader),exp:ident(loader),exp:ident(size)]],estmt[exp[grammar(call),exp:ident(printk),exp:const:other(N/H)]]]],def[fname(spufs_create_root),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(inode),exp[grammar(call),exp:ident(spufs_new_inode),exp:ident(sb),exp[grammar(binary_arith),aop(N/H),exp:ident(S_IFDIR),exp:const:int(0775)]]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_op)],exp:&ref:exp:ident(simple_dir_inode_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(inode),ident(i_fop)],exp:&ref:exp:ident(simple_dir_operations)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp[grammar(call),exp:ident(SPUFS_I),exp:ident(inode)],ident(i_ctx)],exp:ident(NULL)]],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],estmt[exp[grammar(assign),simple_assi(=),exp:ident(ret),exp:??(N/H)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_root)],exp[grammar(call),exp:ident(d_alloc_root),exp:ident(inode)]]],sel_if[exp:??(N/H),statem(N/H),estmt(NONE)],st_return[exp:const:int(0)],statem(N/H),statem(N/H)]],def[fname(spufs_fill_super),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(sb),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(silent),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[exp[grammar(call),exp:ident(save_mount_options),exp:ident(sb),exp:ident(data)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_maxbytes)],exp:ident(MAX_LFS_FILESIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize)],exp:ident(PAGE_CACHE_SIZE)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_blocksize_bits)],exp:ident(PAGE_CACHE_SHIFT)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_magic)],exp:ident(SPUFS_MAGIC)]],estmt[exp[grammar(assign),simple_assi(=),exp[grammar(record_ptr),exp:ident(sb),ident(s_op)],exp:&ref:exp:ident(s_ops)]],st_return[exp[grammar(call),exp:ident(spufs_create_root),exp:ident(sb),exp:ident(data)]]]],def[fname(spufs_get_sb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(fstype),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(mnt),fulltype[typec(N/H)]]],{}stmt[st_return[exp[grammar(call),exp:ident(get_sb_single),exp:ident(fstype),exp:ident(flags),exp:ident(data),exp:ident(spufs_fill_super),exp:ident(mnt)]]]],decl(N/H),NCP(N/H),mtop(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
Before sorting list
{{{
exp[meta(X0),exp:ident(nd),ident(dentry)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(dentry)]
 ¶ 
exp[meta(X0),exp:ident(nd),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X0),exp:ident(nd),ident(path)],ident(mnt)]
 ¶ 
exp[meta(X0),meta(X1),ident(mnt)] ==> exp[grammar(record_acc),exp[meta(X0),meta(X1),ident(path)],ident(mnt)]
 ¶ 
}}}
