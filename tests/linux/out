Spec. file is: specfile
Parsed two: farsync.c.orig, farsync.c
Parsed two: eth1394.c.orig, eth1394.c
Parsed two: idt77252.c.orig, idt77252.c
Reading file pair idt77252.c.orig idt77252.c
Reading file pair eth1394.c.orig eth1394.c
Reading file pair farsync.c.orig farsync.c
Common subterms:::
mtop(N/H)
NCP(N/H)
decl(N/H)
ident(name)
ident(flags)
estmt(NONE)
ident(i)
expr(N/H)
assign[simple_assi(=),ident(i),const_i(0)]
const_i(0)
simple_assi(=)
sizeoftype_expr[fulltype[typec(N/H)]]
fulltype[typec(N/H)]
typec(N/H)
const_i(2)
estmt[call[ident(dev_kfree_skb),ident(skb)]]
call[ident(dev_kfree_skb),ident(skb)]
ident(skb)
ident(dev_kfree_skb)
->expr[ident(skb),ident(data)]
ident(data)
aop(-)
statem(N/H)
reg()
fulltype[ctype[btype(void)]]
ctype[btype(void)]
btype(void)
aop(N/H)
funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]]
param[reg(),name(dev),fulltype[typec(N/H)]]
name(dev)
st_return[const_i(0)]
st_return[expr(N/H)]
fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]
ctype[btype[itype[sgn(signed),base(int)]]]
btype[itype[sgn(signed),base(int)]]
itype[sgn(signed),base(int)]
base(int)
sgn(signed)
aop(+)
const_i(1)
const(N/H)
ident(spin_unlock_irqrestore)
ident(spin_lock_irqsave)
estmt[expr(N/H)]
op_assi(+=)
sel_if[expr(N/H),statem(N/H),estmt(NONE)]
ident(memcpy)
{}stmt[statem(N/H)]
sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]
ident(jiffies)
sgn(unsigned)
fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]
ctype[btype[itype[sgn(unsigned),base(int)]]]
btype[itype[sgn(unsigned),base(int)]]
itype[sgn(unsigned),base(int)]
ident(skb_put)
ident(stats)
param[reg(),name(skb),fulltype[typec(N/H)]]
name(skb)
ident(err)
ident(dev)
ident(len)
->expr[ident(skb),ident(len)]
ident(memset)
ident(trans_start)
sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)]
ident(offset)
define(N/H)
inc_elem(asm)
includeN[inc_elem(asm),inc_elem(uaccess.h)]
inc_elem(uaccess.h)
inc_elem(linux)
includeN[inc_elem(linux),inc_elem(init.h)]
inc_elem(init.h)
includeN[inc_elem(linux),inc_elem(kernel.h)]
inc_elem(kernel.h)
includeN[inc_elem(linux),inc_elem(module.h)]
inc_elem(module.h)
[Main] terms that changed: ident(memcpy) 
Constructing all safe parts for 3 term pairs
Making safe parts for pair 1
[Diff] abstracting concrete update:->expr[ident(sb),ident(data)] ==> call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]]
[Diff] resulting abstract updates: 2
->expr[meta(X2),meta(X1)] ==> call[ident(skb_put),ident(skb),->expr[meta(X2),ident(len)]]
->expr[meta(X2),ident(data)] ==> call[ident(skb_put),ident(skb),->expr[meta(X2),ident(len)]]
[Diff] abstracting concrete update:call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]] ==> ident(sb)
[Diff] resulting abstract updates: 8
call[meta(X5),meta(X4),->expr[meta(X3),meta(X2)]] ==> meta(X3)
call[meta(X5),meta(X4),->expr[meta(X3),ident(len)]] ==> meta(X3)
call[meta(X5),ident(skb),->expr[meta(X3),meta(X2)]] ==> meta(X3)
call[meta(X5),ident(skb),->expr[meta(X3),ident(len)]] ==> meta(X3)
call[ident(skb_put),meta(X4),->expr[meta(X3),meta(X2)]] ==> meta(X3)
call[ident(skb_put),meta(X4),->expr[meta(X3),ident(len)]] ==> meta(X3)
call[ident(skb_put),ident(skb),->expr[meta(X3),meta(X2)]] ==> meta(X3)
call[ident(skb_put),ident(skb),->expr[meta(X3),ident(len)]] ==> meta(X3)
[Diff] abstracting concrete update:call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]
[Diff] resulting abstract updates: 525
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[meta(X8),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[meta(X8),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),meta(X7),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),meta(X7),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),call[ident(skb_put),ident(skb),meta(X1)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),meta(X1)],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
[Diff] abstracting concrete update:estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]]
[Diff] resulting abstract updates: 1
estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]]
[Diff] abstracting concrete update:{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]] ==> {}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]
[Diff] resulting abstract updates: 1
{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]] ==> {}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]
[Diff] abstracting concrete update:for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]] ==> for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]]
[Diff] resulting abstract updates: 1
for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]] ==> for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]]
[Diff] abstracting concrete update:{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)] ==> {}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)]
[Diff] abstracting concrete update:sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)] ==> sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)] ==> sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)] ==> {}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)]
[Diff] abstracting concrete update:sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)] ==> sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]
[Diff] resulting abstract updates: 1
sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)] ==> sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]
[Diff] abstracting concrete update:def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]] ==> def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]]
[Diff] resulting abstract updates: 1
def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]] ==> def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]]
[Diff] abstracting concrete update:prg2[decl(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(poison.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(atmdev.h)],includeN[inc_elem(linux),inc_elem(atm.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(wait.h)],includeN[inc_elem(linux),inc_elem(jiffies.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(atomic.h)],includeN[inc_elem(asm),inc_elem(byteorder.h)],includeL[inc_elem(suni.h)],includeL[inc_elem(idt77252.h)],includeL[inc_elem(idt77252_tables.h)],decl(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(waitfor_idle),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]],while[binary[aop(N/H),ident(stat),ident(SAR_STAT_CMDBZ)],estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]]]]],def[fname(read_sram),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_READ_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_sram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: ERROR: TST JMP section at %08lx written: %08x\n),->expr[ident(card),ident(name)],ident(addr),ident(value)]]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_WRITE_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(read_utility),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_READ_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_utility),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),expr(N/H),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_WRITE_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(idt77252_read_gp),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),call[ident(readl),ident(SAR_REG_GP)]]],st_return[ident(gp)]]],def[fname(idt77252_write_gp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_GP)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(idt77252_eeprom_read_status),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdsrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_read_byte),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_write_byte),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrentab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(data),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(idt77252_eeprom_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(dump_tct),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],estmt[call[ident(printk),const_s(%s: TCT %x:),->expr[ident(card),ident(name)],ident(index)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(printk),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[call[ident(printk),const_s(\n)]]]],def[fname(idt77252_tx_dump),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(printk),const_s(%s\n),ident(__FUNCTION__)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(rx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(printk),const_s(%s: Connection %d:\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)]]],estmt[call[ident(dump_tct),ident(card),->expr[ident(vc),ident(index)]]]]]]],def[fname(sb_pool_add),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(index),->expr[ident(pool),ident(index)]]],while[array_a[->expr[ident(pool),ident(skb)],ident(index)],{}stmt[estmt[assign[simple_assi(=),ident(index),binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(pool),ident(skb)],ident(index)],ident(skb)]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_POOL),ident(skb)],call[ident(POOL_HANDLE),ident(queue),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(pool),ident(index)],binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],st_return[const_i(0)]]],def[fname(sb_pool_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)],ident(NULL)]]]],def[fname(sb_pool_skb),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(handle),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],st_return[array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)]]]],def[fname(alloc_scq),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(scq),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(scq),ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),&expr[->expr[ident(scq),ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(scq)]],st_return[ident(NULL)]],estmt(NONE)],estmt[call[ident(memset),->expr[ident(scq),ident(base)],const_i(0),ident(SCQ_SIZE)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(last)],binary[aop(+),->expr[ident(scq),ident(base)],binary[aop(-),ident(SCQ_ENTRIES),const_i(1)]]]],estmt[call[ident(atomic_set),&expr[->expr[ident(scq),ident(used)]],const_i(0)]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(lock)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(skblock)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(transmit)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(pending)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252: SCQ: base 0x%p, next 0x%p, last 0x%p, paddr %08llx\n),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(next)],->expr[ident(scq),ident(last)],expr(N/H)]],st_return[ident(scq)]]],def[fname(free_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(paddr)]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],estmt[call[ident(kfree),ident(scq)]]]],def[fname(push_on_scq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ: next 0x%p\n),->expr[ident(card),ident(name)],->expr[ident(scq),ident(next)]]],estmt[call[ident(atomic_inc),&expr[->expr[ident(scq),ident(used)]]]],estmt[assign[simple_assi(=),ident(entries),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],statem(N/H)],estmt(NONE)],estmt[call[ident(skb_queue_tail),&expr[->expr[ident(scq),ident(transmit)]],ident(skb)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[statem(N/H),statem(N/H),estmt[assign[op_assi(+=),->expr[->expr[ident(vc),ident(estimator)],ident(cells)],binary[aop(/),binary[aop(+),->expr[ident(skb),ident(len)],const_i(47)],const_i(48)]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(cps)],ident(cps)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(avcps)],binary[aop(N/H),ident(cps),const_i(5)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_1)],call[ident(cpu_to_le32),binary[aop(N/H),binary[aop(N/H),->expr[ident(tbd),ident(word_1)],ident(SAR_TBD_TSIF)],ident(SAR_TBD_GTSI)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_2)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_2)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_3)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_3)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_4)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_4)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[expr(N/H)]],estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],binary[aop(+),->expr[ident(scq),ident(paddr)],expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(test_and_clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_START_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%d entries in SCQ used (push).\n),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],estmt[call[ident(XPRINTK),const_s(%s: SCQ (after push %2d) head = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],call[ident(read_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)]],->expr[ident(scq),ident(next)]]],st_return[const_i(0)],statem(N/H),st_return[expr(N/H)]]],def[fname(drain_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ (before drain %2d) next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],->expr[ident(scq),ident(next)]]],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]]],sel_if[ident(skb),{}stmt[estmt[call[ident(TXPRINTK),const_s(%s: freeing skb at %p.\n),->expr[ident(card),ident(name)],ident(skb)]],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx)]]]]],estmt(NONE)],estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],estmt[call[ident(spin_lock),&expr[->expr[ident(scq),ident(skblock)]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock),&expr[->expr[ident(scq),ident(skblock)]]]]]],def[fname(queue_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: invalid skb->len (%d)\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%s: Sending %d bytes of data.\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]]],estmt[assign[simple_assi(=),ident(error),expr(N/H)]],sel_if[ident(oam),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_1)],binary[aop(N/H),binary[aop(N/H),ident(SAR_TBD_OAM),ident(ATM_CELL_PAYLOAD)],ident(SAR_TBD_EPDU)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_2)],binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(skb)],const_i(4)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_3)],const_i(0x00000000)]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_4)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(0)],const_i(24)],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(1)],const_i(16)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(2)],const_i(8)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(3)],const_i(0)]]]],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],const_i(0)]]],estmt(NONE)],statem(N/H)],estmt(NONE)],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on reserved VC\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal),.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],statem(N/H),statem(N/H),estmt[call[ident(skb_queue_tail),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[->expr[ident(vc),ident(scq)],ident(skblock)]],ident(flags)]],st_return[const_i(0)],statem(N/H),st_return[ident(error)]]],def[fname(get_free_scd),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],ident(i)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],ident(i)]],st_return[binary[aop(+),->expr[ident(card),ident(scd_base)],binary[aop(*),ident(i),ident(SAR_SRAM_SCD_SIZE)]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(fill_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],->expr[ident(scq),ident(paddr)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)],const_i(0x00000000)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(2)],const_i(0xffffffff)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(3)],const_i(0x00000000)]]]],def[fname(clear_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H)]],def[fname(init_rsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate RSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(rsq)],ident(base)],const_i(0),ident(RSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(base)],ident(RSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(next)],.expr[->expr[ident(card),ident(rsq)],ident(last)]]],for[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rsqe),ident(word_4)],const_i(0)]]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(rsq)],ident(paddr)],ident(SAR_REG_RSQB)]],estmt[call[ident(IPRINTK),const_s(%s: RSQ base at 0x%lx (0x%x).\n),->expr[ident(card),ident(name)],expr(N/H),call[ident(readl),ident(SAR_REG_RSQB)]]],estmt[call[ident(IPRINTK),const_s(%s: RSQ head = 0x%x, base = 0x%x, tail = 0x%x.\n),->expr[ident(card),ident(name)],call[ident(readl),ident(SAR_REG_RSQH)],call[ident(readl),ident(SAR_REG_RSQB)],call[ident(readl),ident(SAR_REG_RSQT)]]],st_return[const_i(0)]]],def[fname(deinit_rsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),.expr[->expr[ident(card),ident(rsq)],ident(base)],.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]],def[fname(idt77252_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(rsqe),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(next)],const_i(1)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: no entry in RSQ.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]]]],def[fname(idt77252_rx_raw),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],call[ident(sb_pool_skb),ident(card),ident(handle)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],estmt[assign[simple_assi(=),ident(tail),call[ident(readl),ident(SAR_REG_RAWCT)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(head)]],const_i(16)],ident(PCI_DMA_FROMDEVICE)]],while[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VPI_MASK)],ident(ATM_HDR_VPI_SHIFT)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VCI_MASK)],ident(ATM_HDR_VCI_SHIFT)]]],estmt[assign[simple_assi(=),ident(pti),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_PTI_MASK)],ident(ATM_HDR_PTI_SHIFT)]]],sel_if[binary[aop(N/H),ident(debug),ident(DBG_RAW_CELL)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s(%s: raw cell %x.%02x.%04x.%x.%x\n),->expr[ident(card),ident(name)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(28)],const_i(0x000f)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(20)],const_i(0x00ff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(4)],const_i(0xffff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(1)],const_i(0x0007)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0x0001)]]],for[assign[simple_assi(=),ident(i),const_i(16)],expr(N/H),expr(N/H),estmt[call[ident(printk),const_s( %02x),array_a[->expr[ident(queue),ident(data)],ident(i)]]]],estmt[call[ident(printk),const_s(\n)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: raw cell for non AAL0 vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for AAL0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped AAL0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(header)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],&expr[array_a[->expr[ident(queue),ident(data)],const_i(16)]],ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H),estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(head),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(next),call[ident(sb_pool_skb),ident(card),ident(handle)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(queue)]],sel_if[ident(next),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(next)]],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(NULL)]],estmt[call[ident(printk),const_s(%s: raw cell queue overrun\n),->expr[ident(card),ident(name)]]],statem(N/H)]]],estmt(NONE)]]]]],def[fname(init_tsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate TSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(tsq)],ident(base)],const_i(0),ident(TSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(base)],ident(TSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],for[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(tsqe),ident(word_2)],call[ident(cpu_to_le32),ident(SAR_TSQE_INVALID)]]]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(tsq)],ident(paddr)],ident(SAR_REG_TSQB)]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],st_return[const_i(0)]]],def[fname(deinit_tsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(TSQSIZE),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],def[fname(idt77252_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(tsqe),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(next)],const_i(1)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsq  %p: base %p, next %p, last %p\n),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsqb %08x, tsqt %08x, tsqh %08x, \n),call[ident(readl),ident(SAR_REG_TSQB)],call[ident(readl),ident(SAR_REG_TSQT)],call[ident(readl),ident(SAR_REG_TSQH)]]],estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(tsqe),ident(word_2)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_TSQE_INVALID)],statem(N/H),estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],estmt[call[ident(XPRINTK),const_s(idt77252_tx-after writel%d: TSQ head = 0x%x, tail = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(index)],call[ident(readl),ident(SAR_REG_TSQH)],call[ident(readl),ident(SAR_REG_TSQT)],.expr[->expr[ident(card),ident(tsq)],ident(next)]]]]],def[fname(tst_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],sel_if[call[ident(test_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[assign[simple_assi(=),ident(pc),binary[aop(N/H),call[ident(readl),ident(SAR_REG_NOW)],const_i(2)]]],sel_if[binary[aop(N/H),binary[aop(N/H),ident(pc),ident(idle)],expr(N/H)],{}stmt[estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(clear_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[assign[op_assi(x=),->expr[ident(card),ident(tst_index)],const_i(1)]],estmt[call[ident(write_sram),ident(card),ident(jump),binary[aop(N/H),ident(TSTE_OPC_JMP),binary[aop(N/H),ident(base),const_i(2)]]]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]]],estmt(NONE)]]]],estmt(NONE)],sel_if[call[ident(test_and_clear_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[call[ident(write_sram),ident(card),ident(jump),ident(TSTE_OPC_NULL)]],estmt[call[ident(set_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]]],estmt(NONE)],statem(N/H)]],def[fname(__fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(avail),binary[aop(-),->expr[ident(card),ident(tst_size)],const_i(2)]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No free TST entries found\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(NPRINTK),const_s(%s: conn %d: first TST entry at %d.\n),->expr[ident(card),ident(name)],condexpr3[ident(vc),->expr[ident(vc),ident(index)],expr(N/H)],ident(e)]],estmt[assign[simple_assi(=),ident(r),ident(n)]],estmt[assign[simple_assi(=),ident(cl),ident(avail)]],estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),ident(TSTE_OPC_MASK)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),->expr[ident(vc),ident(index)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[sel_if[ident(vc),estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(vc)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],expr(N/H)]]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(data)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(data)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]],estmt[assign[op_assi(-=),ident(cl),->expr[ident(card),ident(tst_size)]]],estmt[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(e),const_i(0)]],estmt(NONE)],estmt[assign[op_assi(+=),ident(cl),ident(n)]]]],st_return[const_i(0)]]],def[fname(fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(__clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(NULL)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_OPC_VAR)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(TSTE_OPC_VAR)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__clear_tst),ident(card),ident(vc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(change_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[call[ident(__clear_tst),ident(card),ident(vc)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(set_tct),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],statem(N/H),st_return[const_i(0)]]],def[fname(idt77252_fbq_level),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[binary[aop(N/H),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],binary[aop(+),const_i(16),binary[aop(N/H),ident(queue),const_i(2)]]],const_i(0x0f)]]]],def[fname(idt77252_fbq_full),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[expr(N/H)]]],def[fname(push_rx_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(head)]]],estmt[call[ident(skb_reset_tail_pointer),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],const_i(0)]],estmt[call[ident(skb_reserve),ident(skb),const_i(16)]],statem(N/H),sel_if[call[ident(idt77252_fbq_full),ident(card),ident(queue)],st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memset),&expr[array_a[->expr[ident(skb),ident(data)],binary[aop(-),binary[aop(N/H),->expr[ident(skb),ident(len)],expr(N/H)],const_i(64)]]],const_i(0),binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(addr),call[ident(IDT77252_PRV_PADDR),ident(skb)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(handle),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(writel),ident(addr),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(add_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(count),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),ident(size)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[call[ident(sb_pool_add),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: SB POOL full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(paddr),call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],ident(paddr)]],sel_if[call[ident(push_rx_skb),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: FB QUEUE full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)]]],statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],call[ident(POOL_QUEUE),ident(handle)]],ident(skb)],call[ident(POOL_INDEX),ident(handle)]],ident(NULL)]],statem(N/H)]],def[fname(recycle_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_dma_sync_single_for_device),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),ident(err),call[ident(push_rx_skb),ident(card),ident(skb),call[ident(POOL_QUEUE),ident(handle)]]]],sel_if[ident(err),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]],def[fname(flush_rx_pool),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(rpp),ident(len)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(count)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(NULL)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(rpp),ident(first)]]]]]],def[fname(recycle_rx_pool_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(next),->expr[ident(skb),ident(next)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],estmt[assign[simple_assi(=),ident(skb),ident(next)]]]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]]]],def[fname(idt77252_phy_put),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[estmt[call[ident(write_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]],ident(value)]]]],def[fname(idt77252_phy_get),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[call[ident(read_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]]]]]],def[fname(idt77252_send_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL connection in send().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on a non-tx VC.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No scatter-gather yet.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[assign[simple_assi(=),ident(err),call[ident(queue_skb),ident(card),ident(vc),ident(skb),ident(oam)]]],sel_if[ident(err),{}stmt[estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[ident(err)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(idt77252_send),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(0)]]]],def[fname(idt77252_send_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(cell),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),const_i(64)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Out of memory in send_oam().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(atomic_add),->expr[ident(skb),ident(truesize)],&expr[->expr[call[ident(sk_atm),ident(vcc)],ident(sk_wmem_alloc)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),const_i(52)],ident(cell),const_i(52)]],st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(1)]]]],def[fname(idt77252_fls),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(x),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xffff0000)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(16)]],estmt[assign[op_assi(+=),ident(r),const_i(16)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xff00)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(8)]],estmt[assign[op_assi(+=),ident(r),const_i(8)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xf0)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(4)]],estmt[assign[op_assi(+=),ident(r),const_i(4)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xc)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(2)]],estmt[assign[op_assi(+=),ident(r),const_i(2)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0x2)],estmt[assign[op_assi(+=),ident(r),const_i(1)]],estmt(NONE)],st_return[ident(r)]]],def[fname(idt77252_int_to_atmfp),funtype[fulltype[typec(N/H)],param[reg(),name(rate),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(e),binary[aop(-),call[ident(idt77252_fls),ident(rate)],const_i(1)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),const_i(9),ident(e)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]]]],estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),ident(e),const_i(9)]]]]]],st_return[binary[aop(N/H),binary[aop(N/H),const_i(0x4000),binary[aop(N/H),ident(e),const_i(9)]],ident(m)]]]],def[fname(idt77252_rate_logindex),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(afp),call[ident(idt77252_int_to_atmfp),condexpr3[expr(N/H),expr(N/H),ident(pcr)]]]],sel_if[expr(N/H),st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(N/H),ident(afp),const_i(5)],const_i(0x1ff)]]],estmt(NONE)],st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(+),binary[aop(N/H),ident(afp),const_i(5)],const_i(1)],const_i(0x1ff)]]]]],def[fname(idt77252_est_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(est),->expr[ident(vc),ident(estimator)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(ncells),->expr[ident(est),ident(cells)]]],estmt[assign[simple_assi(=),ident(rate),binary[aop(N/H),expr(N/H),binary[aop(-),const_i(7),->expr[ident(est),ident(interval)]]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(last_cells)],ident(ncells)]],estmt[assign[op_assi(+=),->expr[ident(est),ident(avcps)],binary[aop(N/H),binary[aop(-),expr(N/H),expr(N/H)],->expr[ident(est),ident(ewma_log)]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],binary[aop(N/H),binary[aop(+),->expr[ident(est),ident(avcps)],const_i(0x1f)],const_i(5)]]],estmt[assign[simple_assi(=),ident(cps),->expr[ident(est),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(cps),binary[aop(N/H),->expr[ident(est),ident(maxcps)],const_i(4)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(lacr),call[ident(idt77252_rate_logindex),ident(card),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(lacr),->expr[ident(vc),ident(max_er)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],ident(lacr)]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],statem(N/H)]],def[fname(idt77252_init_est),funtype[fulltype[typec(N/H)],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(est),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(est),ident(maxcps)],condexpr3[expr(N/H),expr(N/H),ident(pcr)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],->expr[ident(est),ident(maxcps)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(avcps)],binary[aop(N/H),->expr[ident(est),ident(cps)],const_i(5)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(interval)],const_i(2)]],estmt[assign[simple_assi(=),->expr[ident(est),ident(ewma_log)],const_i(2)]],estmt[call[ident(init_timer),&expr[->expr[ident(est),ident(timer)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(data)],expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(function)],ident(idt77252_est_timer)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],st_return[ident(est)]]],def[fname(idt77252_init_cbr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: trying to open a CBR VC with cell rate = 0\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(tst_used),const_i(0)]],estmt[assign[simple_assi(=),ident(tst_free),->expr[ident(card),ident(tst_free)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(tst_used),->expr[ident(vc),ident(ntste)]]],estmt(NONE)],estmt[assign[op_assi(+=),ident(tst_free),ident(tst_used)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],estmt[assign[simple_assi(=),ident(tcra),condexpr3[expr(N/H),ident(tcr),expr(N/H)]]],estmt[call[ident(TXPRINTK),const_s(%s: CBR target cell rate = %d\n),->expr[ident(card),ident(name)],ident(tcra)]],estmt[assign[simple_assi(=),ident(tmpl),binary[aop(*),expr(N/H),binary[aop(-),expr(N/H),const_i(2)]]]],estmt[assign[simple_assi(=),ident(modl),binary[aop(%),ident(tmpl),expr(N/H)]]],estmt[assign[simple_assi(=),ident(tst_entries),expr(N/H)]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tst_entries),binary[aop(-),ident(tst_free),ident(SAR_TST_RESERVED)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)]],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: selected CBR bandwidth < granularity.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: not enough CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(ntste)],ident(tst_entries)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(tst_free)],binary[aop(-),ident(tst_free),ident(tst_entries)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: modify %d -> %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_used),ident(tst_entries)]],estmt[call[ident(change_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: setting %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_entries)]],estmt[call[ident(fill_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]]],def[fname(idt77252_init_ubr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[estmt[call[ident(del_timer),&expr[->expr[->expr[ident(vc),ident(estimator)],ident(timer)]]]],estmt[call[ident(kfree),->expr[ident(vc),ident(estimator)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],ident(NULL)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tcr),->expr[ident(card),ident(link_pcr)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],call[ident(idt77252_init_est),ident(vc),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(init_er)],call[ident(idt77252_rate_logindex),ident(card),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],->expr[ident(vc),ident(init_er)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],const_i(0xff)]]],st_return[const_i(0)]]],def[fname(idt77252_init_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],call[ident(get_free_scd),ident(card),ident(vc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no SCD available.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],sel_if[call[ident(set_tct),ident(card),ident(vc)],{}stmt[estmt[call[ident(printk),const_s(%s: class %d not supported.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(qos),ident(txtp)],ident(traffic_class)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],->expr[ident(vc),ident(scd_index)]],ident(NULL)]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(tx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]]],st_return[const_i(0)]]],def[fname(idt77252_init_rx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[call[ident(test_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_CONNECTOPEN)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_RAWCELLINTEN)]],statem(N/H),sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_3)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_2)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_01)]]]]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(OPRINTK),const_s(%s: writing RCT at 0x%lx\n),->expr[ident(card),ident(name)],ident(addr)]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(idt77252_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VPI: %d\n),->expr[ident(card),ident(name)],ident(vpi)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VCI: %d\n),->expr[ident(card),ident(name)],ident(vci)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_ADDR),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(OPRINTK),const_s(%s: opening vpi.vci: %d.%d\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H),estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc in open()\n),->expr[ident(card),ident(name)]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(card)],ident(card)]],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(index)],ident(index)]],estmt[call[ident(spin_lock_init),&expr[->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(lock)]]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(vcc),ident(dev_data)],ident(vc)]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_open: vc = %d (%d.%d) %s/%s (max RX SDU: %u)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)],condexpr3[expr(N/H),const_s(rx),const_s(--)],condexpr3[expr(N/H),const_s(tx),const_s(--)],.expr[.expr[->expr[ident(vcc),ident(qos)],ident(rxtp)],ident(max_sdu)]]],estmt[assign[simple_assi(=),ident(inuse),const_i(0)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(inuse),const_i(1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[op_assi(+=),ident(inuse),const_i(2)]],estmt(NONE)],sel_if[ident(inuse),{}stmt[estmt[call[ident(printk),const_s(%s: %s vci already in use.\n),->expr[ident(card),ident(name)],condexpr3[expr(N/H),const_s(tx),condexpr3[expr(N/H),const_s(rx),const_s(tx and rx)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[const_i(0)]]],def[fname(idt77252_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_close: vc = %d (%d.%d)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]],estmt[call[ident(clear_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[call[ident(clear_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(NULL)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const_s(%s: closing a VC with pending rx buffers.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]],estmt(NONE)],statem(N/H),estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]]]],def[fname(idt77252_change_qos),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],{}stmt[statem(N/H)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[call[ident(memcpy),&expr[->expr[ident(vcc),ident(qos)]],ident(qos),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(set_bit),ident(ATM_VF_HASQOS),&expr[->expr[ident(vcc),ident(flags)]]]],statem(N/H),st_return[ident(error)]]],def[fname(idt77252_proc_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(left),expr(N/H)]],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Interrupts:\n)]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSIF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(15)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TXICP: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(14)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(12)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TMROF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(11)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(PHYI:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(10)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ3A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(8)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ2A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(7)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(6)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(EPDU:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(5)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RAWCF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(4)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ1A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(3)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ0A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(2)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQAF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Transmit Connection Table:\n)]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(p),ident(page)]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(  %4u: %u.%u: ),ident(i),->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]]],estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(\n)]]],st_return[binary[aop(-),ident(p),ident(page)]]]],st_return[const_i(0)]]],def[fname(idt77252_collect_stat),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(cdc),call[ident(readl),ident(SAR_REG_CDC)]]],estmt[assign[simple_assi(=),ident(vpec),call[ident(readl),ident(SAR_REG_VPEC)]]],estmt[assign[simple_assi(=),ident(icc),call[ident(readl),ident(SAR_REG_ICC)]]],estmt[call[ident(printk),const_s(%s:),->expr[ident(card),ident(name)]]],sel_if[binary[aop(N/H),ident(cdc),const_i(0x7f0000)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s( [)]],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(22)]],{}stmt[estmt[call[ident(printk),const_s(%sRM ID),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(21)]],{}stmt[estmt[call[ident(printk),const_s(%sCON TAB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(20)]],{}stmt[estmt[call[ident(printk),const_s(%sNO FB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(19)]],{}stmt[estmt[call[ident(printk),const_s(%sOAM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(18)]],{}stmt[estmt[call[ident(printk),const_s(%sRM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(17)]],{}stmt[estmt[call[ident(printk),const_s(%sRM FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(16)]],{}stmt[estmt[call[ident(printk),const_s(%sRX FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],estmt[call[ident(printk),const_s(])]]],estmt(NONE)],estmt[call[ident(printk),const_s( CDC %04x, VPEC %04x, ICC: %04x\n),binary[aop(N/H),ident(cdc),const_i(0xffff)],binary[aop(N/H),ident(vpec),const_i(0xffff)],binary[aop(N/H),ident(icc),const_i(0xffff)]]]]],def[fname(idt77252_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(0xffff)]]],sel_if[expr(N/H),st_return[ident(IRQ_NONE)],estmt(NONE)],sel_if[call[ident(test_and_set_bit),ident(IDT77252_BIT_INTERRUPT),&expr[->expr[ident(card),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Re-entering irq_handler()\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(writel),ident(stat),ident(SAR_REG_STAT)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSIF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSIF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TXICP)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TXICP\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx_dump),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TMROF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TMROF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_collect_stat),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_EPDU)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: EPDU\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQAF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQAF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RAWCF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RAWCF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx_raw),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_PHYI)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: PHYI),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[call[->expr[->expr[->expr[ident(card),ident(atmdev)],ident(phy)],ident(interrupt)],->expr[ident(card),ident(atmdev)]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_STAT_FBQ0A),ident(SAR_STAT_FBQ1A)],ident(SAR_STAT_FBQ2A)],ident(SAR_STAT_FBQ3A)]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(INTPRINTK),const_s(%s: FBQA: %04x\n),->expr[ident(card),ident(name)],ident(stat)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ0A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ1A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ2A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ3A)],estmt[expr(N/H)],estmt(NONE)],estmt[call[ident(schedule_work),&expr[->expr[ident(card),ident(tqueue)]]]]],estmt(NONE)],statem(N/H),st_return[ident(IRQ_HANDLED)]]],def[fname(idt77252_softint),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(done),const_i(1)],expr(NONE),assign[simple_assi(=),ident(done),const_i(1)],{}stmt[estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(16)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],sel_if[ident(done),statem(N/H),estmt(NONE)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(SAR_CFG_FBIE)],ident(SAR_REG_CFG)]]]],def[fname(open_card_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(index)],ident(index)]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(vc)]],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[simple_assi(=),ident(rcte),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_RCTE_CONNECTOPEN),ident(SAR_RCTE_RAWCELLINTEN)],ident(SAR_RCTE_RCQ)],ident(SAR_RCTE_FBP_1)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]]]],st_return[const_i(0)]]],def[fname(close_card_oam),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const(N/H),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]]]]]]],def[fname(open_card_ubr0),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR0)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],const_i(0)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],->expr[ident(card),ident(scd_base)]]],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(0)],binary[aop(N/H),ident(TCT_UBR),->expr[ident(card),ident(scd_base)]]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(1)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(2)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(3)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(4)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(5)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(6)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(7)],ident(TCT_FLAG_UBR)]],estmt[call[ident(clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]]],estmt[call[ident(writel),binary[aop(N/H),ident(TCMDQ_START),const_i(0)],ident(SAR_REG_TCMDQ)]],st_return[const_i(0)]]],def[fname(idt77252_dev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)],ident(SAR_CFG_PHYIE)]]],estmt[assign[op_assi(|=),ident(conf),ident(SAR_CFG_VPECA)]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(conf)],ident(SAR_REG_CFG)]],sel_if[call[ident(open_card_oam),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing OAM.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(open_card_ubr0),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing UBR0.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(IPRINTK),const_s(%s: opened IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]],st_return[const_i(0)]]],def[fname(idt77252_dev_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(close_card_oam),ident(card)]],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(DIPRINTK),const_s(%s: closed IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]]]],def[fname(deinit_card),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: deinitialize card %u\n),->expr[ident(card),ident(index)]]],estmt[call[ident(writel),const_i(0),ident(SAR_REG_CFG)]],sel_if[->expr[ident(card),ident(atmdev)],estmt[call[ident(atm_dev_deregister),->expr[ident(card),ident(atmdev)]]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(j),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)]]],sel_if[ident(skb),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)],ident(NULL)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]]]],estmt[call[ident(vfree),->expr[ident(card),ident(soft_tst)]]],estmt[call[ident(vfree),->expr[ident(card),ident(scd2vc)]]],estmt[call[ident(vfree),->expr[ident(card),ident(vcs)]]],sel_if[->expr[ident(card),ident(raw_cell_hnd)],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]],->expr[ident(card),ident(raw_cell_hnd)],->expr[ident(card),ident(raw_cell_paddr)]]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(rsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release RSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_rsq),ident(card)]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(tsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release TSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_tsq),ident(card)]]],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: Release IRQ.\n)]],estmt[call[ident(free_irq),->expr[->expr[ident(card),ident(pcidev)],ident(irq)],ident(card)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[array_a[->expr[ident(card),ident(fbq)],ident(i)],estmt[call[ident(iounmap),array_a[->expr[ident(card),ident(fbq)],ident(i)]]],estmt(NONE)]]],sel_if[->expr[ident(card),ident(membase)],estmt[call[ident(iounmap),->expr[ident(card),ident(membase)]]],estmt(NONE)],estmt[call[ident(clear_bit),ident(IDT77252_BIT_INIT),&expr[->expr[ident(card),ident(flags)]]]],estmt[call[ident(DIPRINTK),const_s(%s: Card deinitialized.\n),->expr[ident(card),ident(name)]]]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[decl(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(poison.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(atmdev.h)],includeN[inc_elem(linux),inc_elem(atm.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(wait.h)],includeN[inc_elem(linux),inc_elem(jiffies.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(atomic.h)],includeN[inc_elem(asm),inc_elem(byteorder.h)],includeL[inc_elem(suni.h)],includeL[inc_elem(idt77252.h)],includeL[inc_elem(idt77252_tables.h)],decl(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(waitfor_idle),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]],while[binary[aop(N/H),ident(stat),ident(SAR_STAT_CMDBZ)],estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]]]]],def[fname(read_sram),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_READ_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_sram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: ERROR: TST JMP section at %08lx written: %08x\n),->expr[ident(card),ident(name)],ident(addr),ident(value)]]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_WRITE_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(read_utility),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_READ_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_utility),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),expr(N/H),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_WRITE_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(idt77252_read_gp),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),call[ident(readl),ident(SAR_REG_GP)]]],st_return[ident(gp)]]],def[fname(idt77252_write_gp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_GP)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(idt77252_eeprom_read_status),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdsrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_read_byte),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_write_byte),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrentab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(data),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(idt77252_eeprom_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(dump_tct),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],estmt[call[ident(printk),const_s(%s: TCT %x:),->expr[ident(card),ident(name)],ident(index)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(printk),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[call[ident(printk),const_s(\n)]]]],def[fname(idt77252_tx_dump),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(printk),const_s(%s\n),ident(__FUNCTION__)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(rx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(printk),const_s(%s: Connection %d:\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)]]],estmt[call[ident(dump_tct),ident(card),->expr[ident(vc),ident(index)]]]]]]],def[fname(sb_pool_add),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(index),->expr[ident(pool),ident(index)]]],while[array_a[->expr[ident(pool),ident(skb)],ident(index)],{}stmt[estmt[assign[simple_assi(=),ident(index),binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(pool),ident(skb)],ident(index)],ident(skb)]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_POOL),ident(skb)],call[ident(POOL_HANDLE),ident(queue),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(pool),ident(index)],binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],st_return[const_i(0)]]],def[fname(sb_pool_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)],ident(NULL)]]]],def[fname(sb_pool_skb),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(handle),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],st_return[array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)]]]],def[fname(alloc_scq),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(scq),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(scq),ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),&expr[->expr[ident(scq),ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(scq)]],st_return[ident(NULL)]],estmt(NONE)],estmt[call[ident(memset),->expr[ident(scq),ident(base)],const_i(0),ident(SCQ_SIZE)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(last)],binary[aop(+),->expr[ident(scq),ident(base)],binary[aop(-),ident(SCQ_ENTRIES),const_i(1)]]]],estmt[call[ident(atomic_set),&expr[->expr[ident(scq),ident(used)]],const_i(0)]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(lock)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(skblock)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(transmit)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(pending)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252: SCQ: base 0x%p, next 0x%p, last 0x%p, paddr %08llx\n),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(next)],->expr[ident(scq),ident(last)],expr(N/H)]],st_return[ident(scq)]]],def[fname(free_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(paddr)]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],estmt[call[ident(kfree),ident(scq)]]]],def[fname(push_on_scq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ: next 0x%p\n),->expr[ident(card),ident(name)],->expr[ident(scq),ident(next)]]],estmt[call[ident(atomic_inc),&expr[->expr[ident(scq),ident(used)]]]],estmt[assign[simple_assi(=),ident(entries),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],statem(N/H)],estmt(NONE)],estmt[call[ident(skb_queue_tail),&expr[->expr[ident(scq),ident(transmit)]],ident(skb)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[statem(N/H),statem(N/H),estmt[assign[op_assi(+=),->expr[->expr[ident(vc),ident(estimator)],ident(cells)],binary[aop(/),binary[aop(+),->expr[ident(skb),ident(len)],const_i(47)],const_i(48)]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(cps)],ident(cps)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(avcps)],binary[aop(N/H),ident(cps),const_i(5)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_1)],call[ident(cpu_to_le32),binary[aop(N/H),binary[aop(N/H),->expr[ident(tbd),ident(word_1)],ident(SAR_TBD_TSIF)],ident(SAR_TBD_GTSI)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_2)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_2)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_3)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_3)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_4)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_4)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[expr(N/H)]],estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],binary[aop(+),->expr[ident(scq),ident(paddr)],expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(test_and_clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_START_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%d entries in SCQ used (push).\n),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],estmt[call[ident(XPRINTK),const_s(%s: SCQ (after push %2d) head = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],call[ident(read_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)]],->expr[ident(scq),ident(next)]]],st_return[const_i(0)],statem(N/H),st_return[expr(N/H)]]],def[fname(drain_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ (before drain %2d) next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],->expr[ident(scq),ident(next)]]],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]]],sel_if[ident(skb),{}stmt[estmt[call[ident(TXPRINTK),const_s(%s: freeing skb at %p.\n),->expr[ident(card),ident(name)],ident(skb)]],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx)]]]]],estmt(NONE)],estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],estmt[call[ident(spin_lock),&expr[->expr[ident(scq),ident(skblock)]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock),&expr[->expr[ident(scq),ident(skblock)]]]]]],def[fname(queue_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: invalid skb->len (%d)\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%s: Sending %d bytes of data.\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]]],estmt[assign[simple_assi(=),ident(error),expr(N/H)]],sel_if[ident(oam),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_1)],binary[aop(N/H),binary[aop(N/H),ident(SAR_TBD_OAM),ident(ATM_CELL_PAYLOAD)],ident(SAR_TBD_EPDU)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_2)],binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(skb)],const_i(4)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_3)],const_i(0x00000000)]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_4)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(0)],const_i(24)],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(1)],const_i(16)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(2)],const_i(8)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(3)],const_i(0)]]]],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],const_i(0)]]],estmt(NONE)],statem(N/H)],estmt(NONE)],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on reserved VC\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal),.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],statem(N/H),statem(N/H),estmt[call[ident(skb_queue_tail),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[->expr[ident(vc),ident(scq)],ident(skblock)]],ident(flags)]],st_return[const_i(0)],statem(N/H),st_return[ident(error)]]],def[fname(get_free_scd),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],ident(i)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],ident(i)]],st_return[binary[aop(+),->expr[ident(card),ident(scd_base)],binary[aop(*),ident(i),ident(SAR_SRAM_SCD_SIZE)]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(fill_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],->expr[ident(scq),ident(paddr)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)],const_i(0x00000000)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(2)],const_i(0xffffffff)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(3)],const_i(0x00000000)]]]],def[fname(clear_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H)]],def[fname(init_rsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate RSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(rsq)],ident(base)],const_i(0),ident(RSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(base)],ident(RSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(next)],.expr[->expr[ident(card),ident(rsq)],ident(last)]]],for[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rsqe),ident(word_4)],const_i(0)]]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(rsq)],ident(paddr)],ident(SAR_REG_RSQB)]],estmt[call[ident(IPRINTK),const_s(%s: RSQ base at 0x%lx (0x%x).\n),->expr[ident(card),ident(name)],expr(N/H),call[ident(readl),ident(SAR_REG_RSQB)]]],estmt[call[ident(IPRINTK),const_s(%s: RSQ head = 0x%x, base = 0x%x, tail = 0x%x.\n),->expr[ident(card),ident(name)],call[ident(readl),ident(SAR_REG_RSQH)],call[ident(readl),ident(SAR_REG_RSQB)],call[ident(readl),ident(SAR_REG_RSQT)]]],st_return[const_i(0)]]],def[fname(deinit_rsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),.expr[->expr[ident(card),ident(rsq)],ident(base)],.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]],def[fname(idt77252_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(rsqe),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(next)],const_i(1)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: no entry in RSQ.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]]]],def[fname(idt77252_rx_raw),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],call[ident(sb_pool_skb),ident(card),ident(handle)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],estmt[assign[simple_assi(=),ident(tail),call[ident(readl),ident(SAR_REG_RAWCT)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(head)]],const_i(16)],ident(PCI_DMA_FROMDEVICE)]],while[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VPI_MASK)],ident(ATM_HDR_VPI_SHIFT)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VCI_MASK)],ident(ATM_HDR_VCI_SHIFT)]]],estmt[assign[simple_assi(=),ident(pti),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_PTI_MASK)],ident(ATM_HDR_PTI_SHIFT)]]],sel_if[binary[aop(N/H),ident(debug),ident(DBG_RAW_CELL)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s(%s: raw cell %x.%02x.%04x.%x.%x\n),->expr[ident(card),ident(name)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(28)],const_i(0x000f)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(20)],const_i(0x00ff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(4)],const_i(0xffff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(1)],const_i(0x0007)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0x0001)]]],for[assign[simple_assi(=),ident(i),const_i(16)],expr(N/H),expr(N/H),estmt[call[ident(printk),const_s( %02x),array_a[->expr[ident(queue),ident(data)],ident(i)]]]],estmt[call[ident(printk),const_s(\n)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: raw cell for non AAL0 vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for AAL0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped AAL0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(header)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],&expr[array_a[->expr[ident(queue),ident(data)],const_i(16)]],ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H),estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(head),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(next),call[ident(sb_pool_skb),ident(card),ident(handle)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(queue)]],sel_if[ident(next),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(next)]],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(NULL)]],estmt[call[ident(printk),const_s(%s: raw cell queue overrun\n),->expr[ident(card),ident(name)]]],statem(N/H)]]],estmt(NONE)]]]]],def[fname(init_tsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate TSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(tsq)],ident(base)],const_i(0),ident(TSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(base)],ident(TSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],for[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(tsqe),ident(word_2)],call[ident(cpu_to_le32),ident(SAR_TSQE_INVALID)]]]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(tsq)],ident(paddr)],ident(SAR_REG_TSQB)]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],st_return[const_i(0)]]],def[fname(deinit_tsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(TSQSIZE),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],def[fname(idt77252_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(tsqe),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(next)],const_i(1)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsq  %p: base %p, next %p, last %p\n),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsqb %08x, tsqt %08x, tsqh %08x, \n),call[ident(readl),ident(SAR_REG_TSQB)],call[ident(readl),ident(SAR_REG_TSQT)],call[ident(readl),ident(SAR_REG_TSQH)]]],estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(tsqe),ident(word_2)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_TSQE_INVALID)],statem(N/H),estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],estmt[call[ident(XPRINTK),const_s(idt77252_tx-after writel%d: TSQ head = 0x%x, tail = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(index)],call[ident(readl),ident(SAR_REG_TSQH)],call[ident(readl),ident(SAR_REG_TSQT)],.expr[->expr[ident(card),ident(tsq)],ident(next)]]]]],def[fname(tst_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],sel_if[call[ident(test_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[assign[simple_assi(=),ident(pc),binary[aop(N/H),call[ident(readl),ident(SAR_REG_NOW)],const_i(2)]]],sel_if[binary[aop(N/H),binary[aop(N/H),ident(pc),ident(idle)],expr(N/H)],{}stmt[estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(clear_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[assign[op_assi(x=),->expr[ident(card),ident(tst_index)],const_i(1)]],estmt[call[ident(write_sram),ident(card),ident(jump),binary[aop(N/H),ident(TSTE_OPC_JMP),binary[aop(N/H),ident(base),const_i(2)]]]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]]],estmt(NONE)]]]],estmt(NONE)],sel_if[call[ident(test_and_clear_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[call[ident(write_sram),ident(card),ident(jump),ident(TSTE_OPC_NULL)]],estmt[call[ident(set_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]]],estmt(NONE)],statem(N/H)]],def[fname(__fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(avail),binary[aop(-),->expr[ident(card),ident(tst_size)],const_i(2)]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No free TST entries found\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(NPRINTK),const_s(%s: conn %d: first TST entry at %d.\n),->expr[ident(card),ident(name)],condexpr3[ident(vc),->expr[ident(vc),ident(index)],expr(N/H)],ident(e)]],estmt[assign[simple_assi(=),ident(r),ident(n)]],estmt[assign[simple_assi(=),ident(cl),ident(avail)]],estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),ident(TSTE_OPC_MASK)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),->expr[ident(vc),ident(index)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[sel_if[ident(vc),estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(vc)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],expr(N/H)]]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(data)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(data)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]],estmt[assign[op_assi(-=),ident(cl),->expr[ident(card),ident(tst_size)]]],estmt[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(e),const_i(0)]],estmt(NONE)],estmt[assign[op_assi(+=),ident(cl),ident(n)]]]],st_return[const_i(0)]]],def[fname(fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(__clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(NULL)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_OPC_VAR)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(TSTE_OPC_VAR)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__clear_tst),ident(card),ident(vc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(change_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[call[ident(__clear_tst),ident(card),ident(vc)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(set_tct),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],statem(N/H),st_return[const_i(0)]]],def[fname(idt77252_fbq_level),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[binary[aop(N/H),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],binary[aop(+),const_i(16),binary[aop(N/H),ident(queue),const_i(2)]]],const_i(0x0f)]]]],def[fname(idt77252_fbq_full),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[expr(N/H)]]],def[fname(push_rx_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(head)]]],estmt[call[ident(skb_reset_tail_pointer),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],const_i(0)]],estmt[call[ident(skb_reserve),ident(skb),const_i(16)]],statem(N/H),sel_if[call[ident(idt77252_fbq_full),ident(card),ident(queue)],st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memset),&expr[array_a[->expr[ident(skb),ident(data)],binary[aop(-),binary[aop(N/H),->expr[ident(skb),ident(len)],expr(N/H)],const_i(64)]]],const_i(0),binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(addr),call[ident(IDT77252_PRV_PADDR),ident(skb)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(handle),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(writel),ident(addr),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(add_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(count),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),ident(size)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[call[ident(sb_pool_add),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: SB POOL full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(paddr),call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],ident(paddr)]],sel_if[call[ident(push_rx_skb),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: FB QUEUE full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)]]],statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],call[ident(POOL_QUEUE),ident(handle)]],ident(skb)],call[ident(POOL_INDEX),ident(handle)]],ident(NULL)]],statem(N/H)]],def[fname(recycle_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_dma_sync_single_for_device),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),ident(err),call[ident(push_rx_skb),ident(card),ident(skb),call[ident(POOL_QUEUE),ident(handle)]]]],sel_if[ident(err),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]],def[fname(flush_rx_pool),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(rpp),ident(len)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(count)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(NULL)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(rpp),ident(first)]]]]]],def[fname(recycle_rx_pool_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(next),->expr[ident(skb),ident(next)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],estmt[assign[simple_assi(=),ident(skb),ident(next)]]]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]]]],def[fname(idt77252_phy_put),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[estmt[call[ident(write_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]],ident(value)]]]],def[fname(idt77252_phy_get),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[call[ident(read_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]]]]]],def[fname(idt77252_send_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL connection in send().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on a non-tx VC.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No scatter-gather yet.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[assign[simple_assi(=),ident(err),call[ident(queue_skb),ident(card),ident(vc),ident(skb),ident(oam)]]],sel_if[ident(err),{}stmt[estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[ident(err)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(idt77252_send),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(0)]]]],def[fname(idt77252_send_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(cell),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),const_i(64)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Out of memory in send_oam().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(atomic_add),->expr[ident(skb),ident(truesize)],&expr[->expr[call[ident(sk_atm),ident(vcc)],ident(sk_wmem_alloc)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),const_i(52)],ident(cell),const_i(52)]],st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(1)]]]],def[fname(idt77252_fls),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(x),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xffff0000)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(16)]],estmt[assign[op_assi(+=),ident(r),const_i(16)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xff00)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(8)]],estmt[assign[op_assi(+=),ident(r),const_i(8)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xf0)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(4)]],estmt[assign[op_assi(+=),ident(r),const_i(4)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xc)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(2)]],estmt[assign[op_assi(+=),ident(r),const_i(2)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0x2)],estmt[assign[op_assi(+=),ident(r),const_i(1)]],estmt(NONE)],st_return[ident(r)]]],def[fname(idt77252_int_to_atmfp),funtype[fulltype[typec(N/H)],param[reg(),name(rate),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(e),binary[aop(-),call[ident(idt77252_fls),ident(rate)],const_i(1)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),const_i(9),ident(e)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]]]],estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),ident(e),const_i(9)]]]]]],st_return[binary[aop(N/H),binary[aop(N/H),const_i(0x4000),binary[aop(N/H),ident(e),const_i(9)]],ident(m)]]]],def[fname(idt77252_rate_logindex),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(afp),call[ident(idt77252_int_to_atmfp),condexpr3[expr(N/H),expr(N/H),ident(pcr)]]]],sel_if[expr(N/H),st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(N/H),ident(afp),const_i(5)],const_i(0x1ff)]]],estmt(NONE)],st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(+),binary[aop(N/H),ident(afp),const_i(5)],const_i(1)],const_i(0x1ff)]]]]],def[fname(idt77252_est_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(est),->expr[ident(vc),ident(estimator)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(ncells),->expr[ident(est),ident(cells)]]],estmt[assign[simple_assi(=),ident(rate),binary[aop(N/H),expr(N/H),binary[aop(-),const_i(7),->expr[ident(est),ident(interval)]]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(last_cells)],ident(ncells)]],estmt[assign[op_assi(+=),->expr[ident(est),ident(avcps)],binary[aop(N/H),binary[aop(-),expr(N/H),expr(N/H)],->expr[ident(est),ident(ewma_log)]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],binary[aop(N/H),binary[aop(+),->expr[ident(est),ident(avcps)],const_i(0x1f)],const_i(5)]]],estmt[assign[simple_assi(=),ident(cps),->expr[ident(est),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(cps),binary[aop(N/H),->expr[ident(est),ident(maxcps)],const_i(4)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(lacr),call[ident(idt77252_rate_logindex),ident(card),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(lacr),->expr[ident(vc),ident(max_er)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],ident(lacr)]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],statem(N/H)]],def[fname(idt77252_init_est),funtype[fulltype[typec(N/H)],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(est),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(est),ident(maxcps)],condexpr3[expr(N/H),expr(N/H),ident(pcr)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],->expr[ident(est),ident(maxcps)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(avcps)],binary[aop(N/H),->expr[ident(est),ident(cps)],const_i(5)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(interval)],const_i(2)]],estmt[assign[simple_assi(=),->expr[ident(est),ident(ewma_log)],const_i(2)]],estmt[call[ident(init_timer),&expr[->expr[ident(est),ident(timer)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(data)],expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(function)],ident(idt77252_est_timer)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],st_return[ident(est)]]],def[fname(idt77252_init_cbr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: trying to open a CBR VC with cell rate = 0\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(tst_used),const_i(0)]],estmt[assign[simple_assi(=),ident(tst_free),->expr[ident(card),ident(tst_free)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(tst_used),->expr[ident(vc),ident(ntste)]]],estmt(NONE)],estmt[assign[op_assi(+=),ident(tst_free),ident(tst_used)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],estmt[assign[simple_assi(=),ident(tcra),condexpr3[expr(N/H),ident(tcr),expr(N/H)]]],estmt[call[ident(TXPRINTK),const_s(%s: CBR target cell rate = %d\n),->expr[ident(card),ident(name)],ident(tcra)]],estmt[assign[simple_assi(=),ident(tmpl),binary[aop(*),expr(N/H),binary[aop(-),expr(N/H),const_i(2)]]]],estmt[assign[simple_assi(=),ident(modl),binary[aop(%),ident(tmpl),expr(N/H)]]],estmt[assign[simple_assi(=),ident(tst_entries),expr(N/H)]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tst_entries),binary[aop(-),ident(tst_free),ident(SAR_TST_RESERVED)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)]],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: selected CBR bandwidth < granularity.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: not enough CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(ntste)],ident(tst_entries)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(tst_free)],binary[aop(-),ident(tst_free),ident(tst_entries)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: modify %d -> %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_used),ident(tst_entries)]],estmt[call[ident(change_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: setting %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_entries)]],estmt[call[ident(fill_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]]],def[fname(idt77252_init_ubr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[estmt[call[ident(del_timer),&expr[->expr[->expr[ident(vc),ident(estimator)],ident(timer)]]]],estmt[call[ident(kfree),->expr[ident(vc),ident(estimator)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],ident(NULL)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tcr),->expr[ident(card),ident(link_pcr)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],call[ident(idt77252_init_est),ident(vc),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(init_er)],call[ident(idt77252_rate_logindex),ident(card),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],->expr[ident(vc),ident(init_er)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],const_i(0xff)]]],st_return[const_i(0)]]],def[fname(idt77252_init_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],call[ident(get_free_scd),ident(card),ident(vc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no SCD available.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],sel_if[call[ident(set_tct),ident(card),ident(vc)],{}stmt[estmt[call[ident(printk),const_s(%s: class %d not supported.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(qos),ident(txtp)],ident(traffic_class)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],->expr[ident(vc),ident(scd_index)]],ident(NULL)]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(tx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]]],st_return[const_i(0)]]],def[fname(idt77252_init_rx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[call[ident(test_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_CONNECTOPEN)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_RAWCELLINTEN)]],statem(N/H),sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_3)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_2)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_01)]]]]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(OPRINTK),const_s(%s: writing RCT at 0x%lx\n),->expr[ident(card),ident(name)],ident(addr)]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(idt77252_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VPI: %d\n),->expr[ident(card),ident(name)],ident(vpi)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VCI: %d\n),->expr[ident(card),ident(name)],ident(vci)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_ADDR),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(OPRINTK),const_s(%s: opening vpi.vci: %d.%d\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H),estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc in open()\n),->expr[ident(card),ident(name)]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(card)],ident(card)]],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(index)],ident(index)]],estmt[call[ident(spin_lock_init),&expr[->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(lock)]]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(vcc),ident(dev_data)],ident(vc)]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_open: vc = %d (%d.%d) %s/%s (max RX SDU: %u)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)],condexpr3[expr(N/H),const_s(rx),const_s(--)],condexpr3[expr(N/H),const_s(tx),const_s(--)],.expr[.expr[->expr[ident(vcc),ident(qos)],ident(rxtp)],ident(max_sdu)]]],estmt[assign[simple_assi(=),ident(inuse),const_i(0)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(inuse),const_i(1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[op_assi(+=),ident(inuse),const_i(2)]],estmt(NONE)],sel_if[ident(inuse),{}stmt[estmt[call[ident(printk),const_s(%s: %s vci already in use.\n),->expr[ident(card),ident(name)],condexpr3[expr(N/H),const_s(tx),condexpr3[expr(N/H),const_s(rx),const_s(tx and rx)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[const_i(0)]]],def[fname(idt77252_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_close: vc = %d (%d.%d)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]],estmt[call[ident(clear_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[call[ident(clear_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(NULL)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const_s(%s: closing a VC with pending rx buffers.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]],estmt(NONE)],statem(N/H),estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]]]],def[fname(idt77252_change_qos),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],{}stmt[statem(N/H)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[call[ident(memcpy),&expr[->expr[ident(vcc),ident(qos)]],ident(qos),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(set_bit),ident(ATM_VF_HASQOS),&expr[->expr[ident(vcc),ident(flags)]]]],statem(N/H),st_return[ident(error)]]],def[fname(idt77252_proc_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(left),expr(N/H)]],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Interrupts:\n)]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSIF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(15)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TXICP: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(14)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(12)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TMROF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(11)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(PHYI:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(10)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ3A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(8)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ2A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(7)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(6)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(EPDU:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(5)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RAWCF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(4)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ1A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(3)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ0A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(2)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQAF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Transmit Connection Table:\n)]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(p),ident(page)]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(  %4u: %u.%u: ),ident(i),->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]]],estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(\n)]]],st_return[binary[aop(-),ident(p),ident(page)]]]],st_return[const_i(0)]]],def[fname(idt77252_collect_stat),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(cdc),call[ident(readl),ident(SAR_REG_CDC)]]],estmt[assign[simple_assi(=),ident(vpec),call[ident(readl),ident(SAR_REG_VPEC)]]],estmt[assign[simple_assi(=),ident(icc),call[ident(readl),ident(SAR_REG_ICC)]]],estmt[call[ident(printk),const_s(%s:),->expr[ident(card),ident(name)]]],sel_if[binary[aop(N/H),ident(cdc),const_i(0x7f0000)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s( [)]],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(22)]],{}stmt[estmt[call[ident(printk),const_s(%sRM ID),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(21)]],{}stmt[estmt[call[ident(printk),const_s(%sCON TAB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(20)]],{}stmt[estmt[call[ident(printk),const_s(%sNO FB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(19)]],{}stmt[estmt[call[ident(printk),const_s(%sOAM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(18)]],{}stmt[estmt[call[ident(printk),const_s(%sRM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(17)]],{}stmt[estmt[call[ident(printk),const_s(%sRM FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(16)]],{}stmt[estmt[call[ident(printk),const_s(%sRX FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],estmt[call[ident(printk),const_s(])]]],estmt(NONE)],estmt[call[ident(printk),const_s( CDC %04x, VPEC %04x, ICC: %04x\n),binary[aop(N/H),ident(cdc),const_i(0xffff)],binary[aop(N/H),ident(vpec),const_i(0xffff)],binary[aop(N/H),ident(icc),const_i(0xffff)]]]]],def[fname(idt77252_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(0xffff)]]],sel_if[expr(N/H),st_return[ident(IRQ_NONE)],estmt(NONE)],sel_if[call[ident(test_and_set_bit),ident(IDT77252_BIT_INTERRUPT),&expr[->expr[ident(card),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Re-entering irq_handler()\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(writel),ident(stat),ident(SAR_REG_STAT)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSIF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSIF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TXICP)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TXICP\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx_dump),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TMROF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TMROF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_collect_stat),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_EPDU)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: EPDU\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQAF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQAF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RAWCF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RAWCF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx_raw),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_PHYI)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: PHYI),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[call[->expr[->expr[->expr[ident(card),ident(atmdev)],ident(phy)],ident(interrupt)],->expr[ident(card),ident(atmdev)]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_STAT_FBQ0A),ident(SAR_STAT_FBQ1A)],ident(SAR_STAT_FBQ2A)],ident(SAR_STAT_FBQ3A)]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(INTPRINTK),const_s(%s: FBQA: %04x\n),->expr[ident(card),ident(name)],ident(stat)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ0A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ1A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ2A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ3A)],estmt[expr(N/H)],estmt(NONE)],estmt[call[ident(schedule_work),&expr[->expr[ident(card),ident(tqueue)]]]]],estmt(NONE)],statem(N/H),st_return[ident(IRQ_HANDLED)]]],def[fname(idt77252_softint),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(done),const_i(1)],expr(NONE),assign[simple_assi(=),ident(done),const_i(1)],{}stmt[estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(16)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],sel_if[ident(done),statem(N/H),estmt(NONE)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(SAR_CFG_FBIE)],ident(SAR_REG_CFG)]]]],def[fname(open_card_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(index)],ident(index)]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(vc)]],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[simple_assi(=),ident(rcte),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_RCTE_CONNECTOPEN),ident(SAR_RCTE_RAWCELLINTEN)],ident(SAR_RCTE_RCQ)],ident(SAR_RCTE_FBP_1)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]]]],st_return[const_i(0)]]],def[fname(close_card_oam),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const(N/H),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]]]]]]],def[fname(open_card_ubr0),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR0)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],const_i(0)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],->expr[ident(card),ident(scd_base)]]],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(0)],binary[aop(N/H),ident(TCT_UBR),->expr[ident(card),ident(scd_base)]]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(1)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(2)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(3)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(4)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(5)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(6)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(7)],ident(TCT_FLAG_UBR)]],estmt[call[ident(clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]]],estmt[call[ident(writel),binary[aop(N/H),ident(TCMDQ_START),const_i(0)],ident(SAR_REG_TCMDQ)]],st_return[const_i(0)]]],def[fname(idt77252_dev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)],ident(SAR_CFG_PHYIE)]]],estmt[assign[op_assi(|=),ident(conf),ident(SAR_CFG_VPECA)]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(conf)],ident(SAR_REG_CFG)]],sel_if[call[ident(open_card_oam),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing OAM.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(open_card_ubr0),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing UBR0.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(IPRINTK),const_s(%s: opened IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]],st_return[const_i(0)]]],def[fname(idt77252_dev_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(close_card_oam),ident(card)]],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(DIPRINTK),const_s(%s: closed IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]]]],def[fname(deinit_card),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: deinitialize card %u\n),->expr[ident(card),ident(index)]]],estmt[call[ident(writel),const_i(0),ident(SAR_REG_CFG)]],sel_if[->expr[ident(card),ident(atmdev)],estmt[call[ident(atm_dev_deregister),->expr[ident(card),ident(atmdev)]]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(j),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)]]],sel_if[ident(skb),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)],ident(NULL)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]]]],estmt[call[ident(vfree),->expr[ident(card),ident(soft_tst)]]],estmt[call[ident(vfree),->expr[ident(card),ident(scd2vc)]]],estmt[call[ident(vfree),->expr[ident(card),ident(vcs)]]],sel_if[->expr[ident(card),ident(raw_cell_hnd)],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]],->expr[ident(card),ident(raw_cell_hnd)],->expr[ident(card),ident(raw_cell_paddr)]]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(rsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release RSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_rsq),ident(card)]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(tsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release TSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_tsq),ident(card)]]],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: Release IRQ.\n)]],estmt[call[ident(free_irq),->expr[->expr[ident(card),ident(pcidev)],ident(irq)],ident(card)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[array_a[->expr[ident(card),ident(fbq)],ident(i)],estmt[call[ident(iounmap),array_a[->expr[ident(card),ident(fbq)],ident(i)]]],estmt(NONE)]]],sel_if[->expr[ident(card),ident(membase)],estmt[call[ident(iounmap),->expr[ident(card),ident(membase)]]],estmt(NONE)],estmt[call[ident(clear_bit),ident(IDT77252_BIT_INIT),&expr[->expr[ident(card),ident(flags)]]]],estmt[call[ident(DIPRINTK),const_s(%s: Card deinitialized.\n),->expr[ident(card),ident(name)]]]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[decl(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(poison.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(atmdev.h)],includeN[inc_elem(linux),inc_elem(atm.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(wait.h)],includeN[inc_elem(linux),inc_elem(jiffies.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(atomic.h)],includeN[inc_elem(asm),inc_elem(byteorder.h)],includeL[inc_elem(suni.h)],includeL[inc_elem(idt77252.h)],includeL[inc_elem(idt77252_tables.h)],decl(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(waitfor_idle),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]],while[binary[aop(N/H),ident(stat),ident(SAR_STAT_CMDBZ)],estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]]]]],def[fname(read_sram),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_READ_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_sram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: ERROR: TST JMP section at %08lx written: %08x\n),->expr[ident(card),ident(name)],ident(addr),ident(value)]]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_WRITE_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(read_utility),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_READ_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_utility),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),expr(N/H),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_WRITE_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(idt77252_read_gp),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),call[ident(readl),ident(SAR_REG_GP)]]],st_return[ident(gp)]]],def[fname(idt77252_write_gp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_GP)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(idt77252_eeprom_read_status),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdsrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_read_byte),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_write_byte),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrentab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(data),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(idt77252_eeprom_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(dump_tct),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],estmt[call[ident(printk),const_s(%s: TCT %x:),->expr[ident(card),ident(name)],ident(index)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(printk),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[call[ident(printk),const_s(\n)]]]],def[fname(idt77252_tx_dump),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(printk),const_s(%s\n),ident(__FUNCTION__)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(rx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(printk),const_s(%s: Connection %d:\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)]]],estmt[call[ident(dump_tct),ident(card),->expr[ident(vc),ident(index)]]]]]]],def[fname(sb_pool_add),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(index),->expr[ident(pool),ident(index)]]],while[array_a[->expr[ident(pool),ident(skb)],ident(index)],{}stmt[estmt[assign[simple_assi(=),ident(index),binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(pool),ident(skb)],ident(index)],ident(skb)]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_POOL),ident(skb)],call[ident(POOL_HANDLE),ident(queue),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(pool),ident(index)],binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],st_return[const_i(0)]]],def[fname(sb_pool_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)],ident(NULL)]]]],def[fname(sb_pool_skb),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(handle),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],st_return[array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)]]]],def[fname(alloc_scq),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(scq),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(scq),ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),&expr[->expr[ident(scq),ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(scq)]],st_return[ident(NULL)]],estmt(NONE)],estmt[call[ident(memset),->expr[ident(scq),ident(base)],const_i(0),ident(SCQ_SIZE)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(last)],binary[aop(+),->expr[ident(scq),ident(base)],binary[aop(-),ident(SCQ_ENTRIES),const_i(1)]]]],estmt[call[ident(atomic_set),&expr[->expr[ident(scq),ident(used)]],const_i(0)]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(lock)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(skblock)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(transmit)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(pending)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252: SCQ: base 0x%p, next 0x%p, last 0x%p, paddr %08llx\n),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(next)],->expr[ident(scq),ident(last)],expr(N/H)]],st_return[ident(scq)]]],def[fname(free_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(paddr)]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],estmt[call[ident(kfree),ident(scq)]]]],def[fname(push_on_scq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ: next 0x%p\n),->expr[ident(card),ident(name)],->expr[ident(scq),ident(next)]]],estmt[call[ident(atomic_inc),&expr[->expr[ident(scq),ident(used)]]]],estmt[assign[simple_assi(=),ident(entries),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],statem(N/H)],estmt(NONE)],estmt[call[ident(skb_queue_tail),&expr[->expr[ident(scq),ident(transmit)]],ident(skb)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[statem(N/H),statem(N/H),estmt[assign[op_assi(+=),->expr[->expr[ident(vc),ident(estimator)],ident(cells)],binary[aop(/),binary[aop(+),->expr[ident(skb),ident(len)],const_i(47)],const_i(48)]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(cps)],ident(cps)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(avcps)],binary[aop(N/H),ident(cps),const_i(5)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_1)],call[ident(cpu_to_le32),binary[aop(N/H),binary[aop(N/H),->expr[ident(tbd),ident(word_1)],ident(SAR_TBD_TSIF)],ident(SAR_TBD_GTSI)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_2)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_2)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_3)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_3)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_4)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_4)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[expr(N/H)]],estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],binary[aop(+),->expr[ident(scq),ident(paddr)],expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(test_and_clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_START_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%d entries in SCQ used (push).\n),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],estmt[call[ident(XPRINTK),const_s(%s: SCQ (after push %2d) head = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],call[ident(read_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)]],->expr[ident(scq),ident(next)]]],st_return[const_i(0)],statem(N/H),st_return[expr(N/H)]]],def[fname(drain_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ (before drain %2d) next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],->expr[ident(scq),ident(next)]]],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]]],sel_if[ident(skb),{}stmt[estmt[call[ident(TXPRINTK),const_s(%s: freeing skb at %p.\n),->expr[ident(card),ident(name)],ident(skb)]],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx)]]]]],estmt(NONE)],estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],estmt[call[ident(spin_lock),&expr[->expr[ident(scq),ident(skblock)]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock),&expr[->expr[ident(scq),ident(skblock)]]]]]],def[fname(queue_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: invalid skb->len (%d)\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%s: Sending %d bytes of data.\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]]],estmt[assign[simple_assi(=),ident(error),expr(N/H)]],sel_if[ident(oam),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_1)],binary[aop(N/H),binary[aop(N/H),ident(SAR_TBD_OAM),ident(ATM_CELL_PAYLOAD)],ident(SAR_TBD_EPDU)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_2)],binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(skb)],const_i(4)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_3)],const_i(0x00000000)]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_4)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(0)],const_i(24)],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(1)],const_i(16)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(2)],const_i(8)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(3)],const_i(0)]]]],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],const_i(0)]]],estmt(NONE)],statem(N/H)],estmt(NONE)],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on reserved VC\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal),.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],statem(N/H),statem(N/H),estmt[call[ident(skb_queue_tail),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[->expr[ident(vc),ident(scq)],ident(skblock)]],ident(flags)]],st_return[const_i(0)],statem(N/H),st_return[ident(error)]]],def[fname(get_free_scd),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],ident(i)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],ident(i)]],st_return[binary[aop(+),->expr[ident(card),ident(scd_base)],binary[aop(*),ident(i),ident(SAR_SRAM_SCD_SIZE)]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(fill_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],->expr[ident(scq),ident(paddr)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)],const_i(0x00000000)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(2)],const_i(0xffffffff)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(3)],const_i(0x00000000)]]]],def[fname(clear_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H)]],def[fname(init_rsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate RSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(rsq)],ident(base)],const_i(0),ident(RSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(base)],ident(RSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(next)],.expr[->expr[ident(card),ident(rsq)],ident(last)]]],for[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rsqe),ident(word_4)],const_i(0)]]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(rsq)],ident(paddr)],ident(SAR_REG_RSQB)]],estmt[call[ident(IPRINTK),const_s(%s: RSQ base at 0x%lx (0x%x).\n),->expr[ident(card),ident(name)],expr(N/H),call[ident(readl),ident(SAR_REG_RSQB)]]],estmt[call[ident(IPRINTK),const_s(%s: RSQ head = 0x%x, base = 0x%x, tail = 0x%x.\n),->expr[ident(card),ident(name)],call[ident(readl),ident(SAR_REG_RSQH)],call[ident(readl),ident(SAR_REG_RSQB)],call[ident(readl),ident(SAR_REG_RSQT)]]],st_return[const_i(0)]]],def[fname(deinit_rsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),.expr[->expr[ident(card),ident(rsq)],ident(base)],.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(data)],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]],def[fname(idt77252_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(rsqe),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(next)],const_i(1)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: no entry in RSQ.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]]]],def[fname(idt77252_rx_raw),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],call[ident(sb_pool_skb),ident(card),ident(handle)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],estmt[assign[simple_assi(=),ident(tail),call[ident(readl),ident(SAR_REG_RAWCT)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(head)]],const_i(16)],ident(PCI_DMA_FROMDEVICE)]],while[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VPI_MASK)],ident(ATM_HDR_VPI_SHIFT)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VCI_MASK)],ident(ATM_HDR_VCI_SHIFT)]]],estmt[assign[simple_assi(=),ident(pti),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_PTI_MASK)],ident(ATM_HDR_PTI_SHIFT)]]],sel_if[binary[aop(N/H),ident(debug),ident(DBG_RAW_CELL)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s(%s: raw cell %x.%02x.%04x.%x.%x\n),->expr[ident(card),ident(name)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(28)],const_i(0x000f)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(20)],const_i(0x00ff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(4)],const_i(0xffff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(1)],const_i(0x0007)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0x0001)]]],for[assign[simple_assi(=),ident(i),const_i(16)],expr(N/H),expr(N/H),estmt[call[ident(printk),const_s( %02x),array_a[->expr[ident(queue),ident(data)],ident(i)]]]],estmt[call[ident(printk),const_s(\n)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: raw cell for non AAL0 vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for AAL0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped AAL0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(header)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],&expr[array_a[->expr[ident(queue),ident(data)],const_i(16)]],ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H),estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(head),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(next),call[ident(sb_pool_skb),ident(card),ident(handle)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(queue)]],sel_if[ident(next),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(next)]],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(NULL)]],estmt[call[ident(printk),const_s(%s: raw cell queue overrun\n),->expr[ident(card),ident(name)]]],statem(N/H)]]],estmt(NONE)]]]]],def[fname(init_tsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate TSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(tsq)],ident(base)],const_i(0),ident(TSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(base)],ident(TSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],for[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(tsqe),ident(word_2)],call[ident(cpu_to_le32),ident(SAR_TSQE_INVALID)]]]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(tsq)],ident(paddr)],ident(SAR_REG_TSQB)]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],st_return[const_i(0)]]],def[fname(deinit_tsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(TSQSIZE),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],def[fname(idt77252_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(tsqe),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(next)],const_i(1)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsq  %p: base %p, next %p, last %p\n),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsqb %08x, tsqt %08x, tsqh %08x, \n),call[ident(readl),ident(SAR_REG_TSQB)],call[ident(readl),ident(SAR_REG_TSQT)],call[ident(readl),ident(SAR_REG_TSQH)]]],estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(tsqe),ident(word_2)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_TSQE_INVALID)],statem(N/H),estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],estmt[call[ident(XPRINTK),const_s(idt77252_tx-after writel%d: TSQ head = 0x%x, tail = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(index)],call[ident(readl),ident(SAR_REG_TSQH)],call[ident(readl),ident(SAR_REG_TSQT)],.expr[->expr[ident(card),ident(tsq)],ident(next)]]]]],def[fname(tst_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],sel_if[call[ident(test_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[assign[simple_assi(=),ident(pc),binary[aop(N/H),call[ident(readl),ident(SAR_REG_NOW)],const_i(2)]]],sel_if[binary[aop(N/H),binary[aop(N/H),ident(pc),ident(idle)],expr(N/H)],{}stmt[estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(clear_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[assign[op_assi(x=),->expr[ident(card),ident(tst_index)],const_i(1)]],estmt[call[ident(write_sram),ident(card),ident(jump),binary[aop(N/H),ident(TSTE_OPC_JMP),binary[aop(N/H),ident(base),const_i(2)]]]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]]],estmt(NONE)]]]],estmt(NONE)],sel_if[call[ident(test_and_clear_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[call[ident(write_sram),ident(card),ident(jump),ident(TSTE_OPC_NULL)]],estmt[call[ident(set_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]]],estmt(NONE)],statem(N/H)]],def[fname(__fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(avail),binary[aop(-),->expr[ident(card),ident(tst_size)],const_i(2)]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No free TST entries found\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(NPRINTK),const_s(%s: conn %d: first TST entry at %d.\n),->expr[ident(card),ident(name)],condexpr3[ident(vc),->expr[ident(vc),ident(index)],expr(N/H)],ident(e)]],estmt[assign[simple_assi(=),ident(r),ident(n)]],estmt[assign[simple_assi(=),ident(cl),ident(avail)]],estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),ident(TSTE_OPC_MASK)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),->expr[ident(vc),ident(index)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[sel_if[ident(vc),estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(vc)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],expr(N/H)]]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(data)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(data)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]],estmt[assign[op_assi(-=),ident(cl),->expr[ident(card),ident(tst_size)]]],estmt[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(e),const_i(0)]],estmt(NONE)],estmt[assign[op_assi(+=),ident(cl),ident(n)]]]],st_return[const_i(0)]]],def[fname(fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(__clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(NULL)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_OPC_VAR)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(TSTE_OPC_VAR)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__clear_tst),ident(card),ident(vc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(change_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[call[ident(__clear_tst),ident(card),ident(vc)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(set_tct),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],statem(N/H),st_return[const_i(0)]]],def[fname(idt77252_fbq_level),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[binary[aop(N/H),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],binary[aop(+),const_i(16),binary[aop(N/H),ident(queue),const_i(2)]]],const_i(0x0f)]]]],def[fname(idt77252_fbq_full),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[expr(N/H)]]],def[fname(push_rx_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(head)]]],estmt[call[ident(skb_reset_tail_pointer),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],const_i(0)]],estmt[call[ident(skb_reserve),ident(skb),const_i(16)]],statem(N/H),sel_if[call[ident(idt77252_fbq_full),ident(card),ident(queue)],st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memset),&expr[array_a[->expr[ident(skb),ident(data)],binary[aop(-),binary[aop(N/H),->expr[ident(skb),ident(len)],expr(N/H)],const_i(64)]]],const_i(0),binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(addr),call[ident(IDT77252_PRV_PADDR),ident(skb)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(handle),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(writel),ident(addr),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(add_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(count),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),ident(size)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[call[ident(sb_pool_add),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: SB POOL full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(paddr),call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],ident(paddr)]],sel_if[call[ident(push_rx_skb),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: FB QUEUE full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)]]],statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],call[ident(POOL_QUEUE),ident(handle)]],ident(skb)],call[ident(POOL_INDEX),ident(handle)]],ident(NULL)]],statem(N/H)]],def[fname(recycle_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_dma_sync_single_for_device),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),ident(err),call[ident(push_rx_skb),ident(card),ident(skb),call[ident(POOL_QUEUE),ident(handle)]]]],sel_if[ident(err),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]],def[fname(flush_rx_pool),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(rpp),ident(len)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(count)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(NULL)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(rpp),ident(first)]]]]]],def[fname(recycle_rx_pool_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(next),->expr[ident(skb),ident(next)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],estmt[assign[simple_assi(=),ident(skb),ident(next)]]]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]]]],def[fname(idt77252_phy_put),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[estmt[call[ident(write_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]],ident(value)]]]],def[fname(idt77252_phy_get),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[call[ident(read_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]]]]]],def[fname(idt77252_send_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL connection in send().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on a non-tx VC.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No scatter-gather yet.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[assign[simple_assi(=),ident(err),call[ident(queue_skb),ident(card),ident(vc),ident(skb),ident(oam)]]],sel_if[ident(err),{}stmt[estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[ident(err)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(idt77252_send),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(0)]]]],def[fname(idt77252_send_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(cell),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),const_i(64)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Out of memory in send_oam().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(atomic_add),->expr[ident(skb),ident(truesize)],&expr[->expr[call[ident(sk_atm),ident(vcc)],ident(sk_wmem_alloc)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),const_i(52)],ident(cell),const_i(52)]],st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(1)]]]],def[fname(idt77252_fls),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(x),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xffff0000)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(16)]],estmt[assign[op_assi(+=),ident(r),const_i(16)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xff00)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(8)]],estmt[assign[op_assi(+=),ident(r),const_i(8)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xf0)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(4)]],estmt[assign[op_assi(+=),ident(r),const_i(4)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xc)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(2)]],estmt[assign[op_assi(+=),ident(r),const_i(2)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0x2)],estmt[assign[op_assi(+=),ident(r),const_i(1)]],estmt(NONE)],st_return[ident(r)]]],def[fname(idt77252_int_to_atmfp),funtype[fulltype[typec(N/H)],param[reg(),name(rate),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(e),binary[aop(-),call[ident(idt77252_fls),ident(rate)],const_i(1)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),const_i(9),ident(e)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]]]],estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),ident(e),const_i(9)]]]]]],st_return[binary[aop(N/H),binary[aop(N/H),const_i(0x4000),binary[aop(N/H),ident(e),const_i(9)]],ident(m)]]]],def[fname(idt77252_rate_logindex),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(afp),call[ident(idt77252_int_to_atmfp),condexpr3[expr(N/H),expr(N/H),ident(pcr)]]]],sel_if[expr(N/H),st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(N/H),ident(afp),const_i(5)],const_i(0x1ff)]]],estmt(NONE)],st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(+),binary[aop(N/H),ident(afp),const_i(5)],const_i(1)],const_i(0x1ff)]]]]],def[fname(idt77252_est_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(est),->expr[ident(vc),ident(estimator)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(ncells),->expr[ident(est),ident(cells)]]],estmt[assign[simple_assi(=),ident(rate),binary[aop(N/H),expr(N/H),binary[aop(-),const_i(7),->expr[ident(est),ident(interval)]]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(last_cells)],ident(ncells)]],estmt[assign[op_assi(+=),->expr[ident(est),ident(avcps)],binary[aop(N/H),binary[aop(-),expr(N/H),expr(N/H)],->expr[ident(est),ident(ewma_log)]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],binary[aop(N/H),binary[aop(+),->expr[ident(est),ident(avcps)],const_i(0x1f)],const_i(5)]]],estmt[assign[simple_assi(=),ident(cps),->expr[ident(est),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(cps),binary[aop(N/H),->expr[ident(est),ident(maxcps)],const_i(4)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(lacr),call[ident(idt77252_rate_logindex),ident(card),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(lacr),->expr[ident(vc),ident(max_er)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],ident(lacr)]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],statem(N/H)]],def[fname(idt77252_init_est),funtype[fulltype[typec(N/H)],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(est),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(est),ident(maxcps)],condexpr3[expr(N/H),expr(N/H),ident(pcr)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],->expr[ident(est),ident(maxcps)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(avcps)],binary[aop(N/H),->expr[ident(est),ident(cps)],const_i(5)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(interval)],const_i(2)]],estmt[assign[simple_assi(=),->expr[ident(est),ident(ewma_log)],const_i(2)]],estmt[call[ident(init_timer),&expr[->expr[ident(est),ident(timer)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(data)],expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(function)],ident(idt77252_est_timer)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],st_return[ident(est)]]],def[fname(idt77252_init_cbr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: trying to open a CBR VC with cell rate = 0\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(tst_used),const_i(0)]],estmt[assign[simple_assi(=),ident(tst_free),->expr[ident(card),ident(tst_free)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(tst_used),->expr[ident(vc),ident(ntste)]]],estmt(NONE)],estmt[assign[op_assi(+=),ident(tst_free),ident(tst_used)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],estmt[assign[simple_assi(=),ident(tcra),condexpr3[expr(N/H),ident(tcr),expr(N/H)]]],estmt[call[ident(TXPRINTK),const_s(%s: CBR target cell rate = %d\n),->expr[ident(card),ident(name)],ident(tcra)]],estmt[assign[simple_assi(=),ident(tmpl),binary[aop(*),expr(N/H),binary[aop(-),expr(N/H),const_i(2)]]]],estmt[assign[simple_assi(=),ident(modl),binary[aop(%),ident(tmpl),expr(N/H)]]],estmt[assign[simple_assi(=),ident(tst_entries),expr(N/H)]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tst_entries),binary[aop(-),ident(tst_free),ident(SAR_TST_RESERVED)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)]],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: selected CBR bandwidth < granularity.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: not enough CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(ntste)],ident(tst_entries)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(tst_free)],binary[aop(-),ident(tst_free),ident(tst_entries)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: modify %d -> %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_used),ident(tst_entries)]],estmt[call[ident(change_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: setting %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_entries)]],estmt[call[ident(fill_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]]],def[fname(idt77252_init_ubr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[estmt[call[ident(del_timer),&expr[->expr[->expr[ident(vc),ident(estimator)],ident(timer)]]]],estmt[call[ident(kfree),->expr[ident(vc),ident(estimator)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],ident(NULL)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tcr),->expr[ident(card),ident(link_pcr)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],call[ident(idt77252_init_est),ident(vc),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(init_er)],call[ident(idt77252_rate_logindex),ident(card),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],->expr[ident(vc),ident(init_er)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],const_i(0xff)]]],st_return[const_i(0)]]],def[fname(idt77252_init_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],call[ident(get_free_scd),ident(card),ident(vc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no SCD available.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],sel_if[call[ident(set_tct),ident(card),ident(vc)],{}stmt[estmt[call[ident(printk),const_s(%s: class %d not supported.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(qos),ident(txtp)],ident(traffic_class)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],->expr[ident(vc),ident(scd_index)]],ident(NULL)]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(tx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]]],st_return[const_i(0)]]],def[fname(idt77252_init_rx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[call[ident(test_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_CONNECTOPEN)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_RAWCELLINTEN)]],statem(N/H),sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_3)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_2)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_01)]]]]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(OPRINTK),const_s(%s: writing RCT at 0x%lx\n),->expr[ident(card),ident(name)],ident(addr)]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(idt77252_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VPI: %d\n),->expr[ident(card),ident(name)],ident(vpi)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VCI: %d\n),->expr[ident(card),ident(name)],ident(vci)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_ADDR),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(OPRINTK),const_s(%s: opening vpi.vci: %d.%d\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H),estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc in open()\n),->expr[ident(card),ident(name)]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(card)],ident(card)]],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(index)],ident(index)]],estmt[call[ident(spin_lock_init),&expr[->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(lock)]]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(vcc),ident(dev_data)],ident(vc)]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_open: vc = %d (%d.%d) %s/%s (max RX SDU: %u)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)],condexpr3[expr(N/H),const_s(rx),const_s(--)],condexpr3[expr(N/H),const_s(tx),const_s(--)],.expr[.expr[->expr[ident(vcc),ident(qos)],ident(rxtp)],ident(max_sdu)]]],estmt[assign[simple_assi(=),ident(inuse),const_i(0)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(inuse),const_i(1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[op_assi(+=),ident(inuse),const_i(2)]],estmt(NONE)],sel_if[ident(inuse),{}stmt[estmt[call[ident(printk),const_s(%s: %s vci already in use.\n),->expr[ident(card),ident(name)],condexpr3[expr(N/H),const_s(tx),condexpr3[expr(N/H),const_s(rx),const_s(tx and rx)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[const_i(0)]]],def[fname(idt77252_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_close: vc = %d (%d.%d)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]],estmt[call[ident(clear_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[call[ident(clear_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(NULL)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const_s(%s: closing a VC with pending rx buffers.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]],estmt(NONE)],statem(N/H),estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]]]],def[fname(idt77252_change_qos),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],{}stmt[statem(N/H)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[call[ident(memcpy),&expr[->expr[ident(vcc),ident(qos)]],ident(qos),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(set_bit),ident(ATM_VF_HASQOS),&expr[->expr[ident(vcc),ident(flags)]]]],statem(N/H),st_return[ident(error)]]],def[fname(idt77252_proc_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(left),expr(N/H)]],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Interrupts:\n)]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSIF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(15)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TXICP: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(14)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(12)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TMROF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(11)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(PHYI:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(10)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ3A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(8)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ2A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(7)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(6)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(EPDU:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(5)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RAWCF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(4)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ1A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(3)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ0A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(2)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQAF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Transmit Connection Table:\n)]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(p),ident(page)]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(  %4u: %u.%u: ),ident(i),->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]]],estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(\n)]]],st_return[binary[aop(-),ident(p),ident(page)]]]],st_return[const_i(0)]]],def[fname(idt77252_collect_stat),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(cdc),call[ident(readl),ident(SAR_REG_CDC)]]],estmt[assign[simple_assi(=),ident(vpec),call[ident(readl),ident(SAR_REG_VPEC)]]],estmt[assign[simple_assi(=),ident(icc),call[ident(readl),ident(SAR_REG_ICC)]]],estmt[call[ident(printk),const_s(%s:),->expr[ident(card),ident(name)]]],sel_if[binary[aop(N/H),ident(cdc),const_i(0x7f0000)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s( [)]],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(22)]],{}stmt[estmt[call[ident(printk),const_s(%sRM ID),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(21)]],{}stmt[estmt[call[ident(printk),const_s(%sCON TAB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(20)]],{}stmt[estmt[call[ident(printk),const_s(%sNO FB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(19)]],{}stmt[estmt[call[ident(printk),const_s(%sOAM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(18)]],{}stmt[estmt[call[ident(printk),const_s(%sRM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(17)]],{}stmt[estmt[call[ident(printk),const_s(%sRM FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(16)]],{}stmt[estmt[call[ident(printk),const_s(%sRX FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],estmt[call[ident(printk),const_s(])]]],estmt(NONE)],estmt[call[ident(printk),const_s( CDC %04x, VPEC %04x, ICC: %04x\n),binary[aop(N/H),ident(cdc),const_i(0xffff)],binary[aop(N/H),ident(vpec),const_i(0xffff)],binary[aop(N/H),ident(icc),const_i(0xffff)]]]]],def[fname(idt77252_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(0xffff)]]],sel_if[expr(N/H),st_return[ident(IRQ_NONE)],estmt(NONE)],sel_if[call[ident(test_and_set_bit),ident(IDT77252_BIT_INTERRUPT),&expr[->expr[ident(card),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Re-entering irq_handler()\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(writel),ident(stat),ident(SAR_REG_STAT)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSIF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSIF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TXICP)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TXICP\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx_dump),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TMROF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TMROF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_collect_stat),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_EPDU)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: EPDU\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQAF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQAF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RAWCF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RAWCF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx_raw),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_PHYI)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: PHYI),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[call[->expr[->expr[->expr[ident(card),ident(atmdev)],ident(phy)],ident(interrupt)],->expr[ident(card),ident(atmdev)]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_STAT_FBQ0A),ident(SAR_STAT_FBQ1A)],ident(SAR_STAT_FBQ2A)],ident(SAR_STAT_FBQ3A)]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(INTPRINTK),const_s(%s: FBQA: %04x\n),->expr[ident(card),ident(name)],ident(stat)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ0A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ1A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ2A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ3A)],estmt[expr(N/H)],estmt(NONE)],estmt[call[ident(schedule_work),&expr[->expr[ident(card),ident(tqueue)]]]]],estmt(NONE)],statem(N/H),st_return[ident(IRQ_HANDLED)]]],def[fname(idt77252_softint),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(done),const_i(1)],expr(NONE),assign[simple_assi(=),ident(done),const_i(1)],{}stmt[estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(16)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],sel_if[ident(done),statem(N/H),estmt(NONE)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(SAR_CFG_FBIE)],ident(SAR_REG_CFG)]]]],def[fname(open_card_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(index)],ident(index)]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(vc)]],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[simple_assi(=),ident(rcte),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_RCTE_CONNECTOPEN),ident(SAR_RCTE_RAWCELLINTEN)],ident(SAR_RCTE_RCQ)],ident(SAR_RCTE_FBP_1)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]]]],st_return[const_i(0)]]],def[fname(close_card_oam),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const(N/H),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]]]]]]],def[fname(open_card_ubr0),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR0)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],const_i(0)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],->expr[ident(card),ident(scd_base)]]],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(0)],binary[aop(N/H),ident(TCT_UBR),->expr[ident(card),ident(scd_base)]]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(1)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(2)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(3)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(4)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(5)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(6)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(7)],ident(TCT_FLAG_UBR)]],estmt[call[ident(clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]]],estmt[call[ident(writel),binary[aop(N/H),ident(TCMDQ_START),const_i(0)],ident(SAR_REG_TCMDQ)]],st_return[const_i(0)]]],def[fname(idt77252_dev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)],ident(SAR_CFG_PHYIE)]]],estmt[assign[op_assi(|=),ident(conf),ident(SAR_CFG_VPECA)]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(conf)],ident(SAR_REG_CFG)]],sel_if[call[ident(open_card_oam),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing OAM.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(open_card_ubr0),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing UBR0.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(IPRINTK),const_s(%s: opened IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]],st_return[const_i(0)]]],def[fname(idt77252_dev_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(close_card_oam),ident(card)]],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(DIPRINTK),const_s(%s: closed IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]]]],def[fname(deinit_card),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: deinitialize card %u\n),->expr[ident(card),ident(index)]]],estmt[call[ident(writel),const_i(0),ident(SAR_REG_CFG)]],sel_if[->expr[ident(card),ident(atmdev)],estmt[call[ident(atm_dev_deregister),->expr[ident(card),ident(atmdev)]]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(j),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)]]],sel_if[ident(skb),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)],ident(NULL)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]]]],estmt[call[ident(vfree),->expr[ident(card),ident(soft_tst)]]],estmt[call[ident(vfree),->expr[ident(card),ident(scd2vc)]]],estmt[call[ident(vfree),->expr[ident(card),ident(vcs)]]],sel_if[->expr[ident(card),ident(raw_cell_hnd)],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]],->expr[ident(card),ident(raw_cell_hnd)],->expr[ident(card),ident(raw_cell_paddr)]]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(rsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release RSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_rsq),ident(card)]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(tsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release TSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_tsq),ident(card)]]],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: Release IRQ.\n)]],estmt[call[ident(free_irq),->expr[->expr[ident(card),ident(pcidev)],ident(irq)],ident(card)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[array_a[->expr[ident(card),ident(fbq)],ident(i)],estmt[call[ident(iounmap),array_a[->expr[ident(card),ident(fbq)],ident(i)]]],estmt(NONE)]]],sel_if[->expr[ident(card),ident(membase)],estmt[call[ident(iounmap),->expr[ident(card),ident(membase)]]],estmt(NONE)],estmt[call[ident(clear_bit),ident(IDT77252_BIT_INIT),&expr[->expr[ident(card),ident(flags)]]]],estmt[call[ident(DIPRINTK),const_s(%s: Card deinitialized.\n),->expr[ident(card),ident(name)]]]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)] ==> prg2[decl(N/H),includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(poison.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(vmalloc.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(atmdev.h)],includeN[inc_elem(linux),inc_elem(atm.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(wait.h)],includeN[inc_elem(linux),inc_elem(jiffies.h)],includeN[inc_elem(linux),inc_elem(mutex.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(atomic.h)],includeN[inc_elem(asm),inc_elem(byteorder.h)],includeL[inc_elem(suni.h)],includeL[inc_elem(idt77252.h)],includeL[inc_elem(idt77252_tables.h)],decl(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(waitfor_idle),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]],while[binary[aop(N/H),ident(stat),ident(SAR_STAT_CMDBZ)],estmt[assign[simple_assi(=),ident(stat),call[ident(readl),ident(SAR_REG_STAT)]]]]]],def[fname(read_sram),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_READ_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_sram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: ERROR: TST JMP section at %08lx written: %08x\n),->expr[ident(card),ident(name)],ident(addr),ident(value)]]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_WRITE_SRAM),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(read_utility),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_READ_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[assign[simple_assi(=),ident(value),call[ident(readl),ident(SAR_REG_DR0)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[ident(value)]]],def[fname(write_utility),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ubus_addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(Error: No such device.\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),expr(N/H),ident(SAR_REG_DR0)]],estmt[call[ident(writel),binary[aop(+),ident(SAR_CMD_WRITE_UTILITY),ident(ubus_addr)],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(idt77252_read_gp),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),call[ident(readl),ident(SAR_REG_GP)]]],st_return[ident(gp)]]],def[fname(idt77252_write_gp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(writel),ident(value),ident(SAR_REG_GP)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]],def[fname(idt77252_eeprom_read_status),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdsrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_read_byte),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(rdtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[simple_assi(=),ident(byte),const_i(0)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[assign[op_assi(N/H),ident(byte),const_i(1)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(|=),ident(byte),condexpr3[binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],ident(SAR_GP_EEDI)],const_i(1),const_i(0)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],st_return[ident(byte)]]],def[fname(idt77252_eeprom_write_byte),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrentab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),array_a[ident(wrtab),ident(i)]]]],estmt[call[ident(udelay),const_i(5)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(offset),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(offset),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),array_a[ident(clktab),expr(N/H)]],condexpr3[binary[aop(N/H),ident(data),const_i(1)],ident(SAR_GP_EEDO),const_i(0)]]]],estmt[call[ident(udelay),const_i(5)]],estmt[assign[op_assi(N/H),ident(data),const_i(1)]]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(idt77252_eeprom_init),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(gp),binary[aop(N/H),call[ident(idt77252_read_gp),ident(card)],expr(N/H)]]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)],ident(SAR_GP_EESCLK)]]],estmt[call[ident(udelay),const_i(5)]],estmt[call[ident(idt77252_write_gp),ident(card),binary[aop(N/H),ident(gp),ident(SAR_GP_EECS)]]],estmt[call[ident(udelay),const_i(5)]]]],def[fname(dump_tct),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],estmt[call[ident(printk),const_s(%s: TCT %x:),->expr[ident(card),ident(name)],ident(index)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(printk),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[call[ident(printk),const_s(\n)]]]],def[fname(idt77252_tx_dump),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(printk),const_s(%s\n),ident(__FUNCTION__)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(rx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(printk),const_s(%s: Connection %d:\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)]]],estmt[call[ident(dump_tct),ident(card),->expr[ident(vc),ident(index)]]]]]]],def[fname(sb_pool_add),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(index),->expr[ident(pool),ident(index)]]],while[array_a[->expr[ident(pool),ident(skb)],ident(index)],{}stmt[estmt[assign[simple_assi(=),ident(index),binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(pool),ident(skb)],ident(index)],ident(skb)]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_POOL),ident(skb)],call[ident(POOL_HANDLE),ident(queue),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(pool),ident(index)],binary[aop(N/H),binary[aop(+),ident(index),const_i(1)],ident(FBQ_MASK)]]],st_return[const_i(0)]]],def[fname(sb_pool_remove),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)],ident(NULL)]]]],def[fname(sb_pool_skb),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(handle),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(queue),call[ident(POOL_QUEUE),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),ident(index),call[ident(POOL_INDEX),ident(handle)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],st_return[array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(queue)],ident(skb)],ident(index)]]]],def[fname(alloc_scq),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(scq),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(scq),ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),&expr[->expr[ident(scq),ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(scq)]],st_return[ident(NULL)]],estmt(NONE)],estmt[call[ident(memset),->expr[ident(scq),ident(base)],const_i(0),ident(SCQ_SIZE)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(last)],binary[aop(+),->expr[ident(scq),ident(base)],binary[aop(-),ident(SCQ_ENTRIES),const_i(1)]]]],estmt[call[ident(atomic_set),&expr[->expr[ident(scq),ident(used)]],const_i(0)]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(lock)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(scq),ident(skblock)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(transmit)]]]],estmt[call[ident(skb_queue_head_init),&expr[->expr[ident(scq),ident(pending)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252: SCQ: base 0x%p, next 0x%p, last 0x%p, paddr %08llx\n),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(next)],->expr[ident(scq),ident(last)],expr(N/H)]],st_return[ident(scq)]]],def[fname(free_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(SCQ_SIZE),->expr[ident(scq),ident(base)],->expr[ident(scq),ident(paddr)]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]]]],estmt[call[ident(kfree),ident(scq)]]]],def[fname(push_on_scq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ: next 0x%p\n),->expr[ident(card),ident(name)],->expr[ident(scq),ident(next)]]],estmt[call[ident(atomic_inc),&expr[->expr[ident(scq),ident(used)]]]],estmt[assign[simple_assi(=),ident(entries),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],statem(N/H)],estmt(NONE)],estmt[call[ident(skb_queue_tail),&expr[->expr[ident(scq),ident(transmit)]],ident(skb)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[statem(N/H),statem(N/H),estmt[assign[op_assi(+=),->expr[->expr[ident(vc),ident(estimator)],ident(cells)],binary[aop(/),binary[aop(+),->expr[ident(skb),ident(len)],const_i(47)],const_i(48)]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(cps)],ident(cps)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(estimator)],ident(avcps)],binary[aop(N/H),ident(cps),const_i(5)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_1)],call[ident(cpu_to_le32),binary[aop(N/H),binary[aop(N/H),->expr[ident(tbd),ident(word_1)],ident(SAR_TBD_TSIF)],ident(SAR_TBD_GTSI)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_2)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_2)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_3)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_3)]]]],estmt[assign[simple_assi(=),->expr[->expr[ident(scq),ident(next)],ident(word_4)],call[ident(cpu_to_le32),->expr[ident(tbd),ident(word_4)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(scq),ident(next)],->expr[ident(scq),ident(base)]]],estmt[expr(N/H)]],estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],binary[aop(+),->expr[ident(scq),ident(paddr)],expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(scq),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(scq),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(test_and_clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_START_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%d entries in SCQ used (push).\n),call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]]]],estmt[call[ident(XPRINTK),const_s(%s: SCQ (after push %2d) head = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],call[ident(read_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)]],->expr[ident(scq),ident(next)]]],st_return[const_i(0)],statem(N/H),st_return[expr(N/H)]]],def[fname(drain_scq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(TXPRINTK),const_s(%s: SCQ (before drain %2d) next = 0x%p.\n),->expr[ident(card),ident(name)],call[ident(atomic_read),&expr[->expr[ident(scq),ident(used)]]],->expr[ident(scq),ident(next)]]],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(transmit)]]]]],sel_if[ident(skb),{}stmt[estmt[call[ident(TXPRINTK),const_s(%s: freeing skb at %p.\n),->expr[ident(card),ident(name)],ident(skb)]],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],sel_if[->expr[ident(vcc),ident(pop)],estmt[call[->expr[ident(vcc),ident(pop)],ident(vcc),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx)]]]]],estmt(NONE)],estmt[call[ident(atomic_dec),&expr[->expr[ident(scq),ident(used)]]]],estmt[call[ident(spin_lock),&expr[->expr[ident(scq),ident(skblock)]]]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[ident(scq),ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock),&expr[->expr[ident(scq),ident(skblock)]]]]]],def[fname(queue_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: invalid skb->len (%d)\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(TXPRINTK),const_s(%s: Sending %d bytes of data.\n),->expr[ident(card),ident(name)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),ident(tbd),&expr[call[ident(IDT77252_PRV_TBD),ident(skb)]]]],estmt[assign[simple_assi(=),ident(vcc),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)],ident(PCI_DMA_TODEVICE)]]],estmt[assign[simple_assi(=),ident(error),expr(N/H)]],sel_if[ident(oam),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_1)],binary[aop(N/H),binary[aop(N/H),ident(SAR_TBD_OAM),ident(ATM_CELL_PAYLOAD)],ident(SAR_TBD_EPDU)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_2)],binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(skb)],const_i(4)]]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_3)],const_i(0x00000000)]],estmt[assign[simple_assi(=),->expr[ident(tbd),ident(word_4)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(0)],const_i(24)],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(1)],const_i(16)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(2)],const_i(8)]],binary[aop(N/H),array_a[->expr[ident(skb),ident(data)],const_i(3)],const_i(0)]]]],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],const_i(0)]]],estmt(NONE)],statem(N/H)],estmt(NONE)],sel_if[call[ident(test_bit),ident(VCF_RSV),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on reserved VC\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal),.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],statem(N/H),statem(N/H),estmt[call[ident(skb_queue_tail),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],while[assign[simple_assi(=),ident(skb),call[ident(skb_dequeue),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]]]],{}stmt[sel_if[call[ident(push_on_scq),ident(card),ident(vc),ident(skb)],{}stmt[estmt[call[ident(skb_queue_head),&expr[->expr[->expr[ident(vc),ident(scq)],ident(pending)]],ident(skb)]],statem(N/H)],estmt(NONE)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[->expr[ident(vc),ident(scq)],ident(skblock)]],ident(flags)]],st_return[const_i(0)],statem(N/H),st_return[ident(error)]]],def[fname(get_free_scd),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],ident(i)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],ident(i)]],st_return[binary[aop(+),->expr[ident(card),ident(scd_base)],binary[aop(*),ident(i),ident(SAR_SRAM_SCD_SIZE)]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(fill_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(write_sram),ident(card),->expr[ident(scq),ident(scd)],->expr[ident(scq),ident(paddr)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(1)],const_i(0x00000000)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(2)],const_i(0xffffffff)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(scq),ident(scd)],const_i(3)],const_i(0x00000000)]]]],def[fname(clear_scd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(scq),fulltype[typec(N/H)]],param[reg(),name(class),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H)]],def[fname(init_rsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate RSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(rsq)],ident(base)],const_i(0),ident(RSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(base)],ident(RSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(rsq)],ident(next)],.expr[->expr[ident(card),ident(rsq)],ident(last)]]],for[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rsqe),ident(word_4)],const_i(0)]]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(rsq)],ident(paddr)],ident(SAR_REG_RSQB)]],estmt[call[ident(IPRINTK),const_s(%s: RSQ base at 0x%lx (0x%x).\n),->expr[ident(card),ident(name)],expr(N/H),call[ident(readl),ident(SAR_REG_RSQB)]]],estmt[call[ident(IPRINTK),const_s(%s: RSQ head = 0x%x, base = 0x%x, tail = 0x%x.\n),->expr[ident(card),ident(name)],call[ident(readl),ident(SAR_REG_RSQH)],call[ident(readl),ident(SAR_REG_RSQB)],call[ident(readl),ident(SAR_REG_RSQT)]]],st_return[const_i(0)]]],def[fname(deinit_rsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),.expr[->expr[ident(card),ident(rsq)],ident(base)],.expr[->expr[ident(card),ident(rsq)],ident(paddr)]]]]],def[fname(dequeue_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rsqe),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_IDLE)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: message about inactive connection.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(sb_pool_skb),ident(card),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL skb in %s, rsqe: %08x %08x %08x %08x\n),->expr[ident(card),ident(name)],ident(__FUNCTION__),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_2)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_3)]],call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_4)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),->expr[ident(rsqe),ident(word_1)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(16)],const_i(0x00ff)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0xffff)]]],estmt[call[ident(RXPRINTK),const_s(%s: SDU for %d.%d received in buffer 0x%p (data 0x%p).\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci),ident(skb),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(cell),->expr[ident(skb),ident(data)]]],for[assign[simple_assi(=),ident(i),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)]],ident(i),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for aal0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),ident(i),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped aal0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_add),binary[aop(-),ident(i),const_i(1)],&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(aal0),binary[aop(N/H),binary[aop(N/H),ident(vpi),ident(ATM_HDR_VPI_SHIFT)],binary[aop(N/H),ident(vci),ident(ATM_HDR_VCI_SHIFT)]]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],const_i(0x00000002),const_i(0)]]],estmt[assign[op_assi(|=),ident(aal0),condexpr3[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CLP)],const_i(0x00000001),const_i(0)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(aal0)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],ident(cell),ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],estmt[assign[op_assi(+=),ident(cell),ident(ATM_CELL_PAYLOAD)]]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Unexpected AAL type in dequeue_rx(): %d.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(vcc),ident(qos)],ident(aal)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],binary[aop(*),binary[aop(N/H),ident(stat),ident(SAR_RSQE_CELLCNT)],ident(ATM_CELL_PAYLOAD)]]],estmt[assign[simple_assi(=),ident(rpp),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(+=),->expr[ident(rpp),ident(len)],->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(skb)]],estmt(NONE)],estmt[assign[simple_assi(=),*expr[->expr[ident(rpp),ident(last)]],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(skb),ident(next)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_EPDU)],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(l1l2),expr(N/H)]],estmt[assign[simple_assi(=),ident(len),binary[aop(N/H),binary[aop(N/H),array_a[ident(l1l2),const_i(0)],const_i(8)],array_a[ident(l1l2),const_i(1)]]]],estmt[assign[simple_assi(=),ident(len),condexpr3[ident(len),ident(len),const_i(0x10000)]]],estmt[call[ident(RXPRINTK),const_s(%s: PDU has %d bytes.\n),->expr[ident(card),ident(name)],ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const(N/H),->expr[ident(card),ident(name)],ident(len),->expr[ident(rpp),ident(len)],call[ident(readl),ident(SAR_REG_CDC)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_RSQE_CRC)],{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: AAL5 CRC error.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),->expr[ident(rpp),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: Can't alloc RX skb.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(sb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(sb),call[ident(skb_put),ident(skb),->expr[ident(sb),ident(len)]],->expr[ident(sb),ident(len)]]],estmt[assign[simple_assi(=),ident(sb),->expr[ident(sb),ident(next)]]]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),ident(rpp)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],statem(N/H)],estmt(NONE)],estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(skb_trim),ident(skb),ident(len)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(skb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(skb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(1)]],sel_if[expr(N/H),estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(1)]],estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(1)]]]]],statem(N/H)],estmt(NONE)]]],def[fname(idt77252_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rsqe),.expr[->expr[ident(card),ident(rsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(rsqe),binary[aop(+),.expr[->expr[ident(card),ident(rsq)],ident(next)],const_i(1)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: no entry in RSQ.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_RSQH)]]]],def[fname(idt77252_rx_raw),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],call[ident(sb_pool_skb),ident(card),ident(handle)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],estmt[assign[simple_assi(=),ident(tail),call[ident(readl),ident(SAR_REG_RAWCT)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(head)]],const_i(16)],ident(PCI_DMA_FROMDEVICE)]],while[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(header),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(vpi),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VPI_MASK)],ident(ATM_HDR_VPI_SHIFT)]]],estmt[assign[simple_assi(=),ident(vci),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_VCI_MASK)],ident(ATM_HDR_VCI_SHIFT)]]],estmt[assign[simple_assi(=),ident(pti),binary[aop(N/H),binary[aop(N/H),ident(header),ident(ATM_HDR_PTI_MASK)],ident(ATM_HDR_PTI_SHIFT)]]],sel_if[binary[aop(N/H),ident(debug),ident(DBG_RAW_CELL)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s(%s: raw cell %x.%02x.%04x.%x.%x\n),->expr[ident(card),ident(name)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(28)],const_i(0x000f)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(20)],const_i(0x00ff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(4)],const_i(0xffff)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(1)],const_i(0x0007)],binary[aop(N/H),binary[aop(N/H),ident(header),const_i(0)],const_i(0x0001)]]],for[assign[simple_assi(=),ident(i),const_i(16)],expr(N/H),expr(N/H),estmt[call[ident(printk),const_s( %02x),array_a[->expr[ident(queue),ident(data)],ident(i)]]]],estmt[call[ident(printk),const_s(\n)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received for out-of-range vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: SDU received on non RX vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(rx_vcc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(RPRINTK),const_s(%s: raw cell for non AAL0 vc %u.%u\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_drop)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Can't allocate buffers for AAL0.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx_err)]]]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(RXPRINTK),const_s(%s: atm_charge() dropped AAL0 packets.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(dev_kfree_skb),ident(sb)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),*expr[expr(N/H)],ident(header)]],estmt[call[ident(skb_put),ident(sb),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(sb),ident(ATM_CELL_PAYLOAD)],&expr[array_a[->expr[ident(queue),ident(data)],const_i(16)]],ident(ATM_CELL_PAYLOAD)]],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(sb)],ident(vcc)],ident(vcc)]],estmt[call[ident(__net_timestamp),ident(sb)]],estmt[call[->expr[ident(vcc),ident(push)],ident(vcc),ident(sb)]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(rx)]]]],statem(N/H),estmt[assign[simple_assi(=),ident(head),binary[aop(+),call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),binary[aop(-),->expr[ident(queue),ident(data)],->expr[ident(queue),ident(head)]],const_i(16)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(head),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(le32_to_cpu),*expr[expr(N/H)]]]],estmt[assign[simple_assi(=),ident(next),call[ident(sb_pool_skb),ident(card),ident(handle)]]],estmt[call[ident(recycle_rx_skb),ident(card),ident(queue)]],sel_if[ident(next),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(next)]],estmt[assign[simple_assi(=),ident(queue),->expr[ident(card),ident(raw_cell_head)]]],estmt[call[ident(pci_dma_sync_single_for_cpu),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(queue)],binary[aop(-),call[ident(skb_end_pointer),ident(queue)],->expr[ident(queue),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(raw_cell_head)],ident(NULL)]],estmt[call[ident(printk),const_s(%s: raw cell queue overrun\n),->expr[ident(card),ident(name)]]],statem(N/H)]]],estmt(NONE)]]]]],def[fname(init_tsq),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(base)],call[ident(pci_alloc_consistent),->expr[ident(card),ident(pcidev)],ident(RSQSIZE),&expr[.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't allocate TSQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(memset),.expr[->expr[ident(card),ident(tsq)],ident(base)],const_i(0),ident(TSQSIZE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(last)],binary[aop(-),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(base)],ident(TSQ_NUM_ENTRIES)],const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],for[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]],expr(N/H),expr(N/H),estmt[assign[simple_assi(=),->expr[ident(tsqe),ident(word_2)],call[ident(cpu_to_le32),ident(SAR_TSQE_INVALID)]]]],estmt[call[ident(writel),.expr[->expr[ident(card),ident(tsq)],ident(paddr)],ident(SAR_REG_TSQB)]],estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],st_return[const_i(0)]]],def[fname(deinit_tsq),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],ident(TSQSIZE),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(paddr)]]]]],def[fname(idt77252_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)]]],estmt[assign[simple_assi(=),ident(tsqe),binary[aop(+),.expr[->expr[ident(card),ident(tsq)],ident(next)],const_i(1)]]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsq  %p: base %p, next %p, last %p\n),ident(tsqe),.expr[->expr[ident(card),ident(tsq)],ident(base)],.expr[->expr[ident(card),ident(tsq)],ident(next)],.expr[->expr[ident(card),ident(tsq)],ident(last)]]],estmt[call[ident(TXPRINTK),const_s(idt77252_tx: tsqb %08x, tsqt %08x, tsqh %08x, \n),call[ident(readl),ident(SAR_REG_TSQB)],call[ident(readl),ident(SAR_REG_TSQT)],call[ident(readl),ident(SAR_REG_TSQH)]]],estmt[assign[simple_assi(=),ident(stat),call[ident(le32_to_cpu),->expr[ident(tsqe),ident(word_2)]]]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_TSQE_INVALID)],statem(N/H),estmt(NONE)],statem(N/H),estmt[call[ident(writel),binary[aop(-),expr(N/H),expr(N/H)],ident(SAR_REG_TSQH)]],estmt[call[ident(XPRINTK),const_s(idt77252_tx-after writel%d: TSQ head = 0x%x, tail = 0x%x, next = 0x%p.\n),->expr[ident(card),ident(index)],call[ident(readl),ident(SAR_REG_TSQH)],call[ident(readl),ident(SAR_REG_TSQT)],.expr[->expr[ident(card),ident(tsq)],ident(next)]]]]],def[fname(tst_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],sel_if[call[ident(test_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[assign[simple_assi(=),ident(pc),binary[aop(N/H),call[ident(readl),ident(SAR_REG_NOW)],const_i(2)]]],sel_if[binary[aop(N/H),binary[aop(N/H),ident(pc),ident(idle)],expr(N/H)],{}stmt[estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(clear_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[assign[op_assi(x=),->expr[ident(card),ident(tst_index)],const_i(1)]],estmt[call[ident(write_sram),ident(card),ident(jump),binary[aop(N/H),ident(TSTE_OPC_JMP),binary[aop(N/H),ident(base),const_i(2)]]]],estmt[assign[simple_assi(=),ident(base),array_a[->expr[ident(card),ident(tst)],->expr[ident(card),ident(tst_index)]]]],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]]],estmt(NONE)]]]],estmt(NONE)],sel_if[call[ident(test_and_clear_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]],{}stmt[for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],binary[aop(N/H),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_MASK)]]],estmt[assign[op_assi(&=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],expr(N/H)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),ident(jump),binary[aop(-),binary[aop(+),ident(base),->expr[ident(card),ident(tst_size)]],const_i(2)]]],estmt[call[ident(write_sram),ident(card),ident(jump),ident(TSTE_OPC_NULL)]],estmt[call[ident(set_bit),ident(TST_SWITCH_WAIT),&expr[->expr[ident(card),ident(tst_state)]]]],estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]]],estmt(NONE)],statem(N/H)]],def[fname(__fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(avail),binary[aop(-),->expr[ident(card),ident(tst_size)],const_i(2)]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No free TST entries found\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(NPRINTK),const_s(%s: conn %d: first TST entry at %d.\n),->expr[ident(card),ident(name)],condexpr3[ident(vc),->expr[ident(vc),ident(index)],expr(N/H)],ident(e)]],estmt[assign[simple_assi(=),ident(r),ident(n)]],estmt[assign[simple_assi(=),ident(cl),ident(avail)]],estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),ident(TSTE_OPC_MASK)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(data),binary[aop(N/H),ident(opc),->expr[ident(vc),ident(index)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[sel_if[ident(vc),estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(vc)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],expr(N/H)]]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(data)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(data)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]],estmt[assign[op_assi(-=),ident(cl),->expr[ident(card),ident(tst_size)]]],estmt[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(e),const_i(0)]],estmt(NONE)],estmt[assign[op_assi(+=),ident(cl),ident(n)]]]],st_return[const_i(0)]]],def[fname(fill_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(__clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(idle),array_a[->expr[ident(card),ident(tst)],binary[aop(N/H),->expr[ident(card),ident(tst_index)],const_i(1)]]]],for[assign[simple_assi(=),ident(e),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(vc)],ident(NULL)]],estmt[assign[simple_assi(=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_OPC_VAR)]],sel_if[call[ident(timer_pending),&expr[->expr[ident(card),ident(tst_timer)]]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_ACTIVE)]],{}stmt[estmt[call[ident(write_sram),ident(card),binary[aop(+),ident(idle),ident(e)],ident(TSTE_OPC_VAR)]],estmt[assign[op_assi(|=),.expr[array_a[->expr[ident(card),ident(soft_tst)],ident(e)],ident(tste)],ident(TSTE_PUSH_IDLE)]]]]],estmt(NONE)]]],st_return[const_i(0)]]],def[fname(clear_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(res),call[ident(__clear_tst),ident(card),ident(vc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(change_tst),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(n),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(opc),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],estmt[call[ident(__clear_tst),ident(card),ident(vc)]],estmt[assign[simple_assi(=),ident(res),call[ident(__fill_tst),ident(card),ident(vc),ident(n),ident(opc)]]],estmt[call[ident(set_bit),ident(TST_SWITCH_PENDING),&expr[->expr[ident(card),ident(tst_state)]]]],sel_if[expr(N/H),estmt[call[ident(mod_timer),&expr[->expr[ident(card),ident(tst_timer)]],binary[aop(+),ident(jiffies),const_i(1)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(tst_lock)]],ident(flags)]],st_return[ident(res)]]],def[fname(set_tct),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],statem(N/H),st_return[const_i(0)]]],def[fname(idt77252_fbq_level),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[binary[aop(N/H),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],binary[aop(+),const_i(16),binary[aop(N/H),ident(queue),const_i(2)]]],const_i(0x0f)]]]],def[fname(idt77252_fbq_full),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[st_return[expr(N/H)]]],def[fname(push_rx_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(head)]]],estmt[call[ident(skb_reset_tail_pointer),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(len)],const_i(0)]],estmt[call[ident(skb_reserve),ident(skb),const_i(16)]],statem(N/H),sel_if[call[ident(idt77252_fbq_full),ident(card),ident(queue)],st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memset),&expr[array_a[->expr[ident(skb),ident(data)],binary[aop(-),binary[aop(N/H),->expr[ident(skb),ident(len)],expr(N/H)],const_i(64)]]],const_i(0),binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),ident(addr),call[ident(IDT77252_PRV_PADDR),ident(skb)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),ident(handle),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(writel),ident(addr),array_a[->expr[ident(card),ident(fbq)],ident(queue)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(add_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(queue),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(size),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(count),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),ident(size)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[call[ident(sb_pool_add),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: SB POOL full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(paddr),call[ident(pci_map_single),->expr[ident(card),ident(pcidev)],->expr[ident(skb),ident(data)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]]],estmt[assign[simple_assi(=),call[ident(IDT77252_PRV_PADDR),ident(skb)],ident(paddr)]],sel_if[call[ident(push_rx_skb),ident(card),ident(skb),ident(queue)],{}stmt[estmt[call[ident(printk),const_s(%s: FB QUEUE full\n),ident(__FUNCTION__)]],statem(N/H)],estmt(NONE)]]],statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(handle),call[ident(IDT77252_PRV_POOL),ident(skb)]]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],call[ident(POOL_QUEUE),ident(handle)]],ident(skb)],call[ident(POOL_INDEX),ident(handle)]],ident(NULL)]],statem(N/H)]],def[fname(recycle_rx_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(pci_dma_sync_single_for_device),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),ident(err),call[ident(push_rx_skb),ident(card),ident(skb),call[ident(POOL_QUEUE),ident(handle)]]]],sel_if[ident(err),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[call[ident(sb_pool_remove),ident(card),ident(skb)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]],def[fname(flush_rx_pool),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(rpp),ident(len)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(count)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(first)],ident(NULL)]],estmt[assign[simple_assi(=),->expr[ident(rpp),ident(last)],&expr[->expr[ident(rpp),ident(first)]]]]]],def[fname(recycle_rx_pool_skb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(rpp),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),->expr[ident(rpp),ident(first)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(next),->expr[ident(skb),ident(next)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(next)],ident(NULL)]],estmt[call[ident(recycle_rx_skb),ident(card),ident(skb)]],estmt[assign[simple_assi(=),ident(skb),ident(next)]]]],estmt[call[ident(flush_rx_pool),ident(card),ident(rpp)]]]],def[fname(idt77252_phy_put),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(value),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[estmt[call[ident(write_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]],ident(value)]]]],def[fname(idt77252_phy_get),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[st_return[call[ident(read_utility),->expr[ident(dev),ident(dev_data)],binary[aop(+),const_i(0x100),binary[aop(N/H),ident(addr),const_i(0x1ff)]]]]]],def[fname(idt77252_send_skb),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(oam),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: NULL connection in send().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Trying to transmit on a non-tx VC.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: No scatter-gather yet.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[call[ident(ATM_SKB),ident(skb)],ident(vcc)],ident(vcc)]],estmt[assign[simple_assi(=),ident(err),call[ident(queue_skb),ident(card),ident(vc),ident(skb),ident(oam)]]],sel_if[ident(err),{}stmt[estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],estmt[call[ident(dev_kfree_skb),ident(skb)]],st_return[ident(err)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(idt77252_send),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(0)]]]],def[fname(idt77252_send_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(cell),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),const_i(64)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: Out of memory in send_oam().\n),->expr[ident(card),ident(name)]]],estmt[call[ident(atomic_inc),&expr[->expr[->expr[ident(vcc),ident(stats)],ident(tx_err)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(atomic_add),->expr[ident(skb),ident(truesize)],&expr[->expr[call[ident(sk_atm),ident(vcc)],ident(sk_wmem_alloc)]]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),const_i(52)],ident(cell),const_i(52)]],st_return[call[ident(idt77252_send_skb),ident(vcc),ident(skb),const_i(1)]]]],def[fname(idt77252_fls),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(x),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xffff0000)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(16)]],estmt[assign[op_assi(+=),ident(r),const_i(16)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xff00)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(8)]],estmt[assign[op_assi(+=),ident(r),const_i(8)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xf0)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(4)]],estmt[assign[op_assi(+=),ident(r),const_i(4)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0xc)],{}stmt[estmt[assign[op_assi(N/H),ident(x),const_i(2)]],estmt[assign[op_assi(+=),ident(r),const_i(2)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(x),const_i(0x2)],estmt[assign[op_assi(+=),ident(r),const_i(1)]],estmt(NONE)],st_return[ident(r)]]],def[fname(idt77252_int_to_atmfp),funtype[fulltype[typec(N/H)],param[reg(),name(rate),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(e),binary[aop(-),call[ident(idt77252_fls),ident(rate)],const_i(1)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),const_i(9),ident(e)]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(m),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]]]],estmt[assign[simple_assi(=),ident(m),binary[aop(N/H),binary[aop(-),ident(rate),binary[aop(N/H),const_i(1),ident(e)]],binary[aop(-),ident(e),const_i(9)]]]]]],st_return[binary[aop(N/H),binary[aop(N/H),const_i(0x4000),binary[aop(N/H),ident(e),const_i(9)]],ident(m)]]]],def[fname(idt77252_rate_logindex),funtype[fulltype[typec(N/H)],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(afp),call[ident(idt77252_int_to_atmfp),condexpr3[expr(N/H),expr(N/H),ident(pcr)]]]],sel_if[expr(N/H),st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(N/H),ident(afp),const_i(5)],const_i(0x1ff)]]],estmt(NONE)],st_return[array_a[ident(rate_to_log),binary[aop(N/H),binary[aop(+),binary[aop(N/H),ident(afp),const_i(5)],const_i(1)],const_i(0x1ff)]]]]],def[fname(idt77252_est_timer),funtype[fulltype[ctype[btype(void)]],param[reg(),name(data),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(est),->expr[ident(vc),ident(estimator)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(ncells),->expr[ident(est),ident(cells)]]],estmt[assign[simple_assi(=),ident(rate),binary[aop(N/H),expr(N/H),binary[aop(-),const_i(7),->expr[ident(est),ident(interval)]]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(last_cells)],ident(ncells)]],estmt[assign[op_assi(+=),->expr[ident(est),ident(avcps)],binary[aop(N/H),binary[aop(-),expr(N/H),expr(N/H)],->expr[ident(est),ident(ewma_log)]]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],binary[aop(N/H),binary[aop(+),->expr[ident(est),ident(avcps)],const_i(0x1f)],const_i(5)]]],estmt[assign[simple_assi(=),ident(cps),->expr[ident(est),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(cps),binary[aop(N/H),->expr[ident(est),ident(maxcps)],const_i(4)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(lacr),call[ident(idt77252_rate_logindex),ident(card),ident(cps)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(lacr),->expr[ident(vc),ident(max_er)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],ident(lacr)]],estmt[call[ident(writel),binary[aop(N/H),binary[aop(N/H),ident(TCMDQ_LACR),binary[aop(N/H),->expr[ident(vc),ident(lacr)],const_i(16)]],->expr[ident(vc),ident(index)]],ident(SAR_REG_TCMDQ)]]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],statem(N/H)]],def[fname(idt77252_init_est),funtype[fulltype[typec(N/H)],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(pcr),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(est),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[ident(NULL)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(est),ident(maxcps)],condexpr3[expr(N/H),expr(N/H),ident(pcr)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(cps)],->expr[ident(est),ident(maxcps)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(avcps)],binary[aop(N/H),->expr[ident(est),ident(cps)],const_i(5)]]],estmt[assign[simple_assi(=),->expr[ident(est),ident(interval)],const_i(2)]],estmt[assign[simple_assi(=),->expr[ident(est),ident(ewma_log)],const_i(2)]],estmt[call[ident(init_timer),&expr[->expr[ident(est),ident(timer)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(data)],expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(function)],ident(idt77252_est_timer)]],estmt[assign[simple_assi(=),.expr[->expr[ident(est),ident(timer)],ident(expires)],binary[aop(+),ident(jiffies),binary[aop(N/H),binary[aop(/),ident(HZ),const_i(4)],->expr[ident(est),ident(interval)]]]]],estmt[call[ident(add_timer),&expr[->expr[ident(est),ident(timer)]]]],st_return[ident(est)]]],def[fname(idt77252_init_cbr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: trying to open a CBR VC with cell rate = 0\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(tst_used),const_i(0)]],estmt[assign[simple_assi(=),ident(tst_free),->expr[ident(card),ident(tst_free)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],estmt[assign[simple_assi(=),ident(tst_used),->expr[ident(vc),ident(ntste)]]],estmt(NONE)],estmt[assign[op_assi(+=),ident(tst_free),ident(tst_used)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],estmt[assign[simple_assi(=),ident(tcra),condexpr3[expr(N/H),ident(tcr),expr(N/H)]]],estmt[call[ident(TXPRINTK),const_s(%s: CBR target cell rate = %d\n),->expr[ident(card),ident(name)],ident(tcra)]],estmt[assign[simple_assi(=),ident(tmpl),binary[aop(*),expr(N/H),binary[aop(-),expr(N/H),const_i(2)]]]],estmt[assign[simple_assi(=),ident(modl),binary[aop(%),ident(tmpl),expr(N/H)]]],estmt[assign[simple_assi(=),ident(tst_entries),expr(N/H)]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tst_entries),binary[aop(-),ident(tst_free),ident(SAR_TST_RESERVED)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)]],estmt(NONE)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: selected CBR bandwidth < granularity.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: not enough CBR bandwidth free.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(ntste)],ident(tst_entries)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(tst_free)],binary[aop(-),ident(tst_free),ident(tst_entries)]]],sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],{}stmt[sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: modify %d -> %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_used),ident(tst_entries)]],estmt[call[ident(change_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(OPRINTK),const_s(%s: setting %d entries in TST.\n),->expr[ident(card),ident(name)],ident(tst_entries)]],estmt[call[ident(fill_tst),ident(card),ident(vc),ident(tst_entries),ident(TSTE_OPC_CBR)]],st_return[const_i(0)]]],def[fname(idt77252_init_ubr),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[->expr[ident(vc),ident(estimator)],{}stmt[estmt[call[ident(del_timer),&expr[->expr[->expr[ident(vc),ident(estimator)],ident(timer)]]]],estmt[call[ident(kfree),->expr[ident(vc),ident(estimator)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],ident(NULL)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(tcr),call[ident(atm_pcr_goal),&expr[->expr[ident(qos),ident(txtp)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(tcr),->expr[ident(card),ident(link_pcr)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(estimator)],call[ident(idt77252_init_est),ident(vc),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(init_er)],call[ident(idt77252_rate_logindex),ident(card),ident(tcr)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(lacr)],->expr[ident(vc),ident(init_er)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],->expr[ident(vc),ident(init_er)]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(max_er)],const_i(0xff)]]],st_return[const_i(0)]]],def[fname(idt77252_init_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[call[ident(test_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],call[ident(get_free_scd),ident(card),ident(vc)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: no SCD available.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],sel_if[call[ident(set_tct),ident(card),ident(vc)],{}stmt[estmt[call[ident(printk),const_s(%s: class %d not supported.\n),->expr[ident(card),ident(name)],.expr[->expr[ident(qos),ident(txtp)],ident(traffic_class)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],->expr[ident(vc),ident(scd_index)]],ident(NULL)]],estmt[call[ident(free_scq),ident(card),->expr[ident(vc),ident(scq)]]],st_return[expr(N/H)]],estmt(NONE)],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(vc),ident(tx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_TX),&expr[->expr[ident(vc),ident(flags)]]]],st_return[const_i(0)]]],def[fname(idt77252_init_rx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(vc),fulltype[typec(N/H)]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[call[ident(test_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(vcc)]],estmt[call[ident(set_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_CONNECTOPEN)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_RAWCELLINTEN)]],statem(N/H),sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_3)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_2)]],sel_if[expr(N/H),estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_1)]],estmt[assign[op_assi(|=),ident(rcte),ident(SAR_RCTE_FBP_01)]]]]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(OPRINTK),const_s(%s: writing RCT at 0x%lx\n),->expr[ident(card),ident(name)],ident(addr)]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],st_return[const_i(0)]]],def[fname(idt77252_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VPI: %d\n),->expr[ident(card),ident(name)],ident(vpi)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: unsupported VCI: %d\n),->expr[ident(card),ident(name)],ident(vci)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_ADDR),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(OPRINTK),const_s(%s: opening vpi.vci: %d.%d\n),->expr[ident(card),ident(name)],ident(vpi),ident(vci)]],statem(N/H),estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc in open()\n),->expr[ident(card),ident(name)]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(card)],ident(card)]],estmt[assign[simple_assi(=),->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(index)],ident(index)]],estmt[call[ident(spin_lock_init),&expr[->expr[array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(lock)]]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(vcc),ident(dev_data)],ident(vc)]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_open: vc = %d (%d.%d) %s/%s (max RX SDU: %u)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)],condexpr3[expr(N/H),const_s(rx),const_s(--)],condexpr3[expr(N/H),const_s(tx),const_s(--)],.expr[.expr[->expr[ident(vcc),ident(qos)],ident(rxtp)],ident(max_sdu)]]],estmt[assign[simple_assi(=),ident(inuse),const_i(0)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(inuse),const_i(1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[op_assi(+=),ident(inuse),const_i(2)]],estmt(NONE)],sel_if[ident(inuse),{}stmt[estmt[call[ident(printk),const_s(%s: %s vci already in use.\n),->expr[ident(card),ident(name)],condexpr3[expr(N/H),const_s(tx),condexpr3[expr(N/H),const_s(rx),const_s(tx and rx)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),&expr[->expr[ident(vcc),ident(qos)]]]]],sel_if[ident(error),{}stmt[estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[ident(error)]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(set_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]],st_return[const_i(0)]]],def[fname(idt77252_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(vcc),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],estmt[call[ident(IPRINTK),const_s(%s: idt77252_close: vc = %d (%d.%d)\n),->expr[ident(card),ident(name)],->expr[ident(vc),ident(index)],->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]],estmt[call[ident(clear_bit),ident(ATM_VF_READY),&expr[->expr[ident(vcc),ident(flags)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],estmt[call[ident(clear_bit),ident(VCF_RX),&expr[->expr[ident(vc),ident(flags)]]]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(rx_vcc)],ident(NULL)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(vc),ident(lock)]],ident(flags)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const_s(%s: closing a VC with pending rx buffers.\n),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]],estmt(NONE)],statem(N/H),estmt[call[ident(mutex_unlock),&expr[->expr[ident(card),ident(mutex)]]]]]],def[fname(idt77252_change_qos),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(vcc),fulltype[typec(N/H)]],param[reg(),name(qos),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(mutex_lock),&expr[->expr[ident(card),ident(mutex)]]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_tx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],{}stmt[statem(N/H)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(error),call[ident(idt77252_init_rx),ident(card),ident(vc),ident(vcc),ident(qos)]]],sel_if[ident(error),statem(N/H),estmt(NONE)]],estmt(NONE)],estmt[call[ident(memcpy),&expr[->expr[ident(vcc),ident(qos)]],ident(qos),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(set_bit),ident(ATM_VF_HASQOS),&expr[->expr[ident(vcc),ident(flags)]]]],statem(N/H),st_return[ident(error)]]],def[fname(idt77252_proc_read),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pos),fulltype[typec(N/H)]],param[reg(),name(page),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(left),expr(N/H)]],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Interrupts:\n)]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSIF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(15)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TXICP: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(14)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(12)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(TMROF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(11)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(PHYI:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(10)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ3A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(8)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ2A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(7)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQF:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(6)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(EPDU:  %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(5)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RAWCF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(4)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ1A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(3)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(FBQ0A: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(2)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(RSQAF: %lu\n),array_a[->expr[ident(card),ident(irqstat)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),st_return[call[ident(sprintf),ident(page),const_s(IDT77252 Transmit Connection Table:\n)]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(i)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(vcc),ident(NULL)]],sel_if[->expr[ident(vc),ident(tx_vcc)],estmt[assign[simple_assi(=),ident(vcc),->expr[ident(vc),ident(tx_vcc)]]],estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(p),ident(page)]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(  %4u: %u.%u: ),ident(i),->expr[ident(vcc),ident(vpi)],->expr[ident(vcc),ident(vci)]]]],estmt[assign[simple_assi(=),ident(tct),expr(N/H)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s( %08x),call[ident(read_sram),ident(card),binary[aop(+),ident(tct),ident(i)]]]]]],estmt[assign[op_assi(+=),ident(p),call[ident(sprintf),ident(p),const_s(\n)]]],st_return[binary[aop(-),ident(p),ident(page)]]]],st_return[const_i(0)]]],def[fname(idt77252_collect_stat),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(cdc),call[ident(readl),ident(SAR_REG_CDC)]]],estmt[assign[simple_assi(=),ident(vpec),call[ident(readl),ident(SAR_REG_VPEC)]]],estmt[assign[simple_assi(=),ident(icc),call[ident(readl),ident(SAR_REG_ICC)]]],estmt[call[ident(printk),const_s(%s:),->expr[ident(card),ident(name)]]],sel_if[binary[aop(N/H),ident(cdc),const_i(0x7f0000)],{}stmt[statem(N/H),estmt[call[ident(printk),const_s( [)]],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(22)]],{}stmt[estmt[call[ident(printk),const_s(%sRM ID),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(21)]],{}stmt[estmt[call[ident(printk),const_s(%sCON TAB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(20)]],{}stmt[estmt[call[ident(printk),const_s(%sNO FB),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(19)]],{}stmt[estmt[call[ident(printk),const_s(%sOAM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(18)]],{}stmt[estmt[call[ident(printk),const_s(%sRM CRC),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(17)]],{}stmt[estmt[call[ident(printk),const_s(%sRM FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(cdc),binary[aop(N/H),const_i(1),const_i(16)]],{}stmt[estmt[call[ident(printk),const_s(%sRX FIFO),ident(s)]],estmt[assign[simple_assi(=),ident(s),const_s( | )]]],estmt(NONE)],estmt[call[ident(printk),const_s(])]]],estmt(NONE)],estmt[call[ident(printk),const_s( CDC %04x, VPEC %04x, ICC: %04x\n),binary[aop(N/H),ident(cdc),const_i(0xffff)],binary[aop(N/H),ident(vpec),const_i(0xffff)],binary[aop(N/H),ident(icc),const_i(0xffff)]]]]],def[fname(idt77252_interrupt),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(0xffff)]]],sel_if[expr(N/H),st_return[ident(IRQ_NONE)],estmt(NONE)],sel_if[call[ident(test_and_set_bit),ident(IDT77252_BIT_INTERRUPT),&expr[->expr[ident(card),ident(flags)]]],{}stmt[estmt[call[ident(printk),const_s(%s: Re-entering irq_handler()\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(writel),ident(stat),ident(SAR_REG_STAT)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSIF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSIF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TXICP)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TXICP\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx_dump),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_tx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_TMROF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: TMROF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_collect_stat),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_EPDU)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: EPDU\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQAF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQAF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RSQF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RSQF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_RAWCF)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: RAWCF\n),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],estmt[call[ident(idt77252_rx_raw),ident(card)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_PHYI)],{}stmt[estmt[call[ident(INTPRINTK),const_s(%s: PHYI),->expr[ident(card),ident(name)]]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[call[->expr[->expr[->expr[ident(card),ident(atmdev)],ident(phy)],ident(interrupt)],->expr[ident(card),ident(atmdev)]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_STAT_FBQ0A),ident(SAR_STAT_FBQ1A)],ident(SAR_STAT_FBQ2A)],ident(SAR_STAT_FBQ3A)]],{}stmt[estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(INTPRINTK),const_s(%s: FBQA: %04x\n),->expr[ident(card),ident(name)],ident(stat)]],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ0A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ1A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ2A)],estmt[expr(N/H)],estmt(NONE)],sel_if[binary[aop(N/H),ident(stat),ident(SAR_STAT_FBQ3A)],estmt[expr(N/H)],estmt(NONE)],estmt[call[ident(schedule_work),&expr[->expr[ident(card),ident(tqueue)]]]]],estmt(NONE)],statem(N/H),st_return[ident(IRQ_HANDLED)]]],def[fname(idt77252_softint),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(done),const_i(1)],expr(NONE),assign[simple_assi(=),ident(done),const_i(1)],{}stmt[estmt[assign[simple_assi(=),ident(stat),binary[aop(N/H),call[ident(readl),ident(SAR_REG_STAT)],const_i(16)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(0),ident(SAR_FB_SIZE_0),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(1),ident(SAR_FB_SIZE_1),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(2),ident(SAR_FB_SIZE_2),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],estmt[assign[op_assi(N/H),ident(stat),const_i(4)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(add_rx_skb),ident(card),const_i(3),ident(SAR_FB_SIZE_3),const_i(32)]],estmt[assign[simple_assi(=),ident(done),const_i(0)]]],estmt(NONE)],sel_if[ident(done),statem(N/H),estmt(NONE)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(SAR_CFG_FBIE)],ident(SAR_REG_CFG)]]]],def[fname(open_card_oam),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(vc),ident(index)],ident(index)]],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],ident(index)],ident(vc)]],estmt[call[ident(flush_rx_pool),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]],estmt[assign[simple_assi(=),ident(rcte),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_RCTE_CONNECTOPEN),ident(SAR_RCTE_RAWCELLINTEN)],ident(SAR_RCTE_RCQ)],ident(SAR_RCTE_FBP_1)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(N/H),->expr[ident(vc),ident(index)],const_i(2)]]]],estmt[call[ident(write_sram),ident(card),ident(addr),ident(rcte)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_OPEN_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]]]]]],st_return[const_i(0)]]],def[fname(close_card_oam),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),for[assign[simple_assi(=),ident(vpi),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(vci),const_i(3)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(index),call[ident(VPCI2VC),ident(card),ident(vpi),ident(vci)]]],estmt[assign[simple_assi(=),ident(vc),array_a[->expr[ident(card),ident(vcs)],ident(index)]]],estmt[assign[simple_assi(=),ident(addr),binary[aop(+),->expr[ident(card),ident(rct_base)],binary[aop(*),->expr[ident(vc),ident(index)],ident(SAR_SRAM_RCT_SIZE)]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],estmt[call[ident(writel),binary[aop(N/H),ident(SAR_CMD_CLOSE_CONNECTION),binary[aop(N/H),ident(addr),const_i(2)]],ident(SAR_REG_CMD)]],estmt[call[ident(waitfor_idle),ident(card)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(cmd_lock)]],ident(flags)]],sel_if[.expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)],ident(count)],{}stmt[estmt[call[ident(DPRINTK),const(N/H),->expr[ident(card),ident(name)]]],estmt[call[ident(recycle_rx_pool_skb),ident(card),&expr[.expr[->expr[ident(vc),ident(rcv)],ident(rx_pool)]]]]],estmt(NONE)]]]]]]],def[fname(open_card_ubr0),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(vc),call[ident(kzalloc),sizeoftype_expr[fulltype[typec(N/H)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't alloc vc\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(vcs)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(class)],ident(SCHED_UBR0)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scq)],call[ident(alloc_scq),ident(card),->expr[ident(vc),ident(class)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: can't get SCQ.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),array_a[->expr[ident(card),ident(scd2vc)],const_i(0)],ident(vc)]],estmt[assign[simple_assi(=),->expr[ident(vc),ident(scd_index)],const_i(0)]],estmt[assign[simple_assi(=),->expr[->expr[ident(vc),ident(scq)],ident(scd)],->expr[ident(card),ident(scd_base)]]],estmt[call[ident(fill_scd),ident(card),->expr[ident(vc),ident(scq)],->expr[ident(vc),ident(class)]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(0)],binary[aop(N/H),ident(TCT_UBR),->expr[ident(card),ident(scd_base)]]]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(1)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(2)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(3)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(4)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(5)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(6)],const_i(0)]],estmt[call[ident(write_sram),ident(card),binary[aop(+),->expr[ident(card),ident(tct_base)],const_i(7)],ident(TCT_FLAG_UBR)]],estmt[call[ident(clear_bit),ident(VCF_IDLE),&expr[->expr[ident(vc),ident(flags)]]]],estmt[call[ident(writel),binary[aop(N/H),ident(TCMDQ_START),const_i(0)],ident(SAR_REG_TCMDQ)]],st_return[const_i(0)]]],def[fname(idt77252_dev_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)],ident(SAR_CFG_PHYIE)]]],estmt[assign[op_assi(|=),ident(conf),ident(SAR_CFG_VPECA)]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],ident(conf)],ident(SAR_REG_CFG)]],sel_if[call[ident(open_card_oam),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing OAM.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(open_card_ubr0),ident(card)],{}stmt[estmt[call[ident(printk),const_s(%s: Error initializing UBR0.\n),->expr[ident(card),ident(name)]]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(IPRINTK),const_s(%s: opened IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]],st_return[const_i(0)]]],def[fname(idt77252_dev_close),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(close_card_oam),ident(card)]],estmt[assign[simple_assi(=),ident(conf),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(SAR_CFG_RXPTH),ident(SAR_RX_DELAY)],ident(SAR_CFG_RAWIE)],ident(SAR_CFG_RQFIE)],ident(SAR_CFG_TMOIE)],ident(SAR_CFG_FBIE)],ident(SAR_CFG_TXEN)],ident(SAR_CFG_TXINT)],ident(SAR_CFG_TXUIE)],ident(SAR_CFG_TXSFI)]]],estmt[call[ident(writel),binary[aop(N/H),call[ident(readl),ident(SAR_REG_CFG)],expr(N/H)],ident(SAR_REG_CFG)]],estmt[call[ident(DIPRINTK),const_s(%s: closed IDT77252 ABR SAR.\n),->expr[ident(card),ident(name)]]]]],def[fname(deinit_card),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk),const_s(%s: SAR not yet initialized.\n),->expr[ident(card),ident(name)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: deinitialize card %u\n),->expr[ident(card),ident(index)]]],estmt[call[ident(writel),const_i(0),ident(SAR_REG_CFG)]],sel_if[->expr[ident(card),ident(atmdev)],estmt[call[ident(atm_dev_deregister),->expr[ident(card),ident(atmdev)]]],estmt(NONE)],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[for[assign[simple_assi(=),ident(j),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)]]],sel_if[ident(skb),{}stmt[estmt[call[ident(pci_unmap_single),->expr[ident(card),ident(pcidev)],call[ident(IDT77252_PRV_PADDR),ident(skb)],binary[aop(-),call[ident(skb_end_pointer),ident(skb)],->expr[ident(skb),ident(data)]],ident(PCI_DMA_FROMDEVICE)]],estmt[assign[simple_assi(=),array_a[.expr[array_a[->expr[ident(card),ident(sbpool)],ident(i)],ident(skb)],ident(j)],ident(NULL)]],estmt[call[ident(dev_kfree_skb),ident(skb)]]],estmt(NONE)]]]]],estmt[call[ident(vfree),->expr[ident(card),ident(soft_tst)]]],estmt[call[ident(vfree),->expr[ident(card),ident(scd2vc)]]],estmt[call[ident(vfree),->expr[ident(card),ident(vcs)]]],sel_if[->expr[ident(card),ident(raw_cell_hnd)],{}stmt[estmt[call[ident(pci_free_consistent),->expr[ident(card),ident(pcidev)],binary[aop(*),const_i(2),sizeoftype_expr[fulltype[typec(N/H)]]],->expr[ident(card),ident(raw_cell_hnd)],->expr[ident(card),ident(raw_cell_paddr)]]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(rsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release RSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_rsq),ident(card)]]],estmt(NONE)],sel_if[.expr[->expr[ident(card),ident(tsq)],ident(base)],{}stmt[estmt[call[ident(DIPRINTK),const_s(%s: Release TSQ ...\n),->expr[ident(card),ident(name)]]],estmt[call[ident(deinit_tsq),ident(card)]]],estmt(NONE)],estmt[call[ident(DIPRINTK),const_s(idt77252: Release IRQ.\n)]],estmt[call[ident(free_irq),->expr[->expr[ident(card),ident(pcidev)],ident(irq)],ident(card)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[array_a[->expr[ident(card),ident(fbq)],ident(i)],estmt[call[ident(iounmap),array_a[->expr[ident(card),ident(fbq)],ident(i)]]],estmt(NONE)]]],sel_if[->expr[ident(card),ident(membase)],estmt[call[ident(iounmap),->expr[ident(card),ident(membase)]]],estmt(NONE)],estmt[call[ident(clear_bit),ident(IDT77252_BIT_INIT),&expr[->expr[ident(card),ident(flags)]]]],estmt[call[ident(DIPRINTK),const_s(%s: Card deinitialized.\n),->expr[ident(card),ident(name)]]]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),mtop(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H)]
Making safe parts for pair 2
[Diff] abstracting concrete update:&expr[ident(hdr_buf)] ==> ident(skb)
[Diff] resulting abstract updates: 2
&expr[meta(X1)] ==> ident(skb)
meta(X0) ==> ident(skb)
[Diff] abstracting concrete update:call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]
[Diff] resulting abstract updates: 42
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[meta(X5),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),&expr[meta(X2)],->expr[ident(skb),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[ident(skb),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[ident(skb),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),&expr[meta(X2)],->expr[ident(skb),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),&expr[meta(X2)],meta(X3),sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],meta(X3),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),&expr[meta(X2)],meta(X3),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X5),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X5),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X5),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X5),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X5),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X5),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X5),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X5),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X5),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X5),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X4)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X4)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),meta(X3),sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),&expr[meta(X2)],sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),meta(X3),sizeof_expr[meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),sizeof_expr[meta(X2)]]
call[ident(memcpy),meta(X6),meta(X3),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
[Diff] abstracting concrete update:estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
[Diff] resulting abstract updates: 20
estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],meta(X2)]]
estmt[call[ident(memcpy),&expr[ident(hdr_buf)],meta(X3),sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),&expr[ident(hdr_buf)],meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),&expr[ident(hdr_buf)],meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],meta(X2)]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],meta(X2)]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),meta(X2)]]
estmt[call[ident(memcpy),meta(X4),meta(X3),sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),sizeof_expr[ident(hdr_buf)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],meta(X2)]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),sizeof_expr[ident(hdr_buf)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),meta(X2)]]
estmt[meta(X1)] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
meta(X0) ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]
[Diff] abstracting concrete update:def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]] ==> def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]]
[Diff] resulting abstract updates: 1
def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]] ==> def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(inetdevice.h)],includeN[inc_elem(linux),inc_elem(if_arp.h)],includeN[inc_elem(linux),inc_elem(if_ether.h)],includeN[inc_elem(linux),inc_elem(ip.h)],includeN[inc_elem(linux),inc_elem(in.h)],includeN[inc_elem(linux),inc_elem(tcp.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(ethtool.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(delay.h)],includeN[inc_elem(asm),inc_elem(unaligned.h)],includeN[inc_elem(net),inc_elem(arp.h)],includeL[inc_elem(config_roms.h)],includeL[inc_elem(csr1212.h)],includeL[inc_elem(eth1394.h)],includeL[inc_elem(highlevel.h)],includeL[inc_elem(ieee1394.h)],includeL[inc_elem(ieee1394_core.h)],includeL[inc_elem(ieee1394_hotplug.h)],includeL[inc_elem(ieee1394_transactions.h)],includeL[inc_elem(ieee1394_types.h)],includeL[inc_elem(iso.h)],includeL[inc_elem(nodemgr.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(ether1394_recv_init),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(priv),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(iso_buf_size),call[ident(min),expr(N/H),binary[aop(*),const_i(2),binary[aop(N/H),const_i(1U),binary[aop(+),.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)],const_i(1)]]]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(iso)],call[ident(hpsb_iso_recv_init),->expr[ident(priv),ident(host)],binary[aop(*),ident(ETHER1394_GASP_BUFFERS),ident(iso_buf_size)],ident(ETHER1394_GASP_BUFFERS),->expr[ident(priv),ident(broadcast_channel)],ident(HPSB_ISO_DMA_PACKET_PER_BUFFER),const_i(1),ident(ether1394_iso)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Failed to allocate IR context\n)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_ERROR)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_STOPPED)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_RUNNING)]]],st_return[const_i(0)]]],def[fname(ether1394_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_recv_init),ident(priv)]]],sel_if[ident(ret),st_return[ident(ret)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(netif_start_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stop),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(flush_scheduled_work)]],estmt[call[ident(netif_stop_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stats),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[&expr[->expr[expr(N/H),ident(stats)]]]]],def[fname(ether1394_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(ETH1394_PRINT),ident(KERN_ERR),->expr[ident(dev),ident(name)],const_s(Timeout, resetting host\n)]],estmt[call[ident(ether1394_host_reset),ident(host)]]]],def[fname(ether1394_max_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[st_return[binary[aop(-),binary[aop(-),binary[aop(N/H),const_i(1),binary[aop(+),.expr[->expr[ident(host),ident(csr)],ident(max_rec)],const_i(1)]],sizeoftype_expr[fulltype[typec(N/H)]]],ident(ETHER1394_GASP_OVERHEAD)]]]],def[fname(ether1394_change_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(new_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(max_mtu),call[ident(ether1394_max_mtu),->expr[expr(N/H),ident(host)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(Local node constrains MTU to %d\n),ident(max_mtu)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],ident(new_mtu)]],st_return[const_i(0)]]],def[fname(purge_partial_datagram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(old),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(old),argtype(N/H),ident(list)]]],statem(N/H),estmt[call[ident(list_del),ident(old)]],estmt[call[ident(kfree_skb),->expr[ident(pd),ident(skb)]]],estmt[call[ident(kfree),ident(pd)]]]],def[fname(eth1394_find_node),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_guid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(guid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_nodeid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(nodeid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_new_node),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hi),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new_node),call[ident(kmalloc),sizeof_expr[*expr[ident(new_node)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),call[ident(kmalloc),sizeof_expr[*expr[ident(node_info)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new_node)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_init),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]]]],estmt[call[ident(INIT_LIST_HEAD),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(list)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(node_info),ident(pdg)],ident(sz)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(CSR1212_INVALID_ADDR_SPACE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(node_info)]],estmt[assign[simple_assi(=),->expr[ident(new_node),ident(ud)],ident(ud)]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(list_add_tail),&expr[->expr[ident(new_node),ident(list)]],&expr[->expr[ident(priv),ident(ip_node_list)]]]],st_return[const_i(0)]]],def[fname(eth1394_probe),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],def[fname(eth1394_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(old_node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(list_del),&expr[->expr[ident(old_node),ident(list)]]]],estmt[call[ident(kfree),ident(old_node)]],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[call[ident(spin_lock_irqsave),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],statem(N/H),estmt[call[ident(spin_unlock_irqrestore),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],estmt[call[ident(kfree),ident(node_info)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(NULL)]],st_return[const_i(0)]]],def[fname(eth1394_update),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[ident(node),st_return[const_i(0)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],decl(N/H),mtop(N/H),decl(N/H),def[fname(ether1394_reset_priv),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(set_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(memset),->expr[ident(priv),ident(ud_list)],const_i(0),sizeof_expr[->expr[ident(priv),ident(ud_list)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_maxpayload)],const_i(512)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(max_speed),ident(IEEE1394_SPEED_100)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(max_speed),array_a[->expr[ident(host),ident(speed)],ident(i)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_sspd)],ident(max_speed)]],sel_if[ident(set_mtu),{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],call[ident(min),const_i(1500),call[ident(ether1394_max_mtu),ident(host)]]]],estmt[call[ident(memcpy),->expr[ident(dev),ident(dev_addr)],&expr[ident(guid)],sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memset),->expr[ident(dev),ident(broadcast)],const_i(0xff),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]]]],decl(N/H),def[fname(ether1394_init_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(open)],ident(ether1394_open)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(stop)],ident(ether1394_stop)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_start_xmit)],ident(ether1394_tx)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(get_stats)],ident(ether1394_stats)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_timeout)],ident(ether1394_tx_timeout)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(change_mtu)],ident(ether1394_change_mtu)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(header_ops)],&expr[ident(ether1394_header_ops)]]],estmt[call[ident(SET_ETHTOOL_OPS),ident(dev),&expr[ident(ethtool_ops)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(watchdog_timeo)],ident(ETHER1394_TIMEOUT)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_BROADCAST),ident(IFF_MULTICAST)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(features)],ident(NETIF_F_HIGHDMA)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(addr_len)],ident(ETH1394_ALEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_header_len)],ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(type)],ident(ARPHRD_IEEE1394)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_queue_len)],const_i(1000)]]]],def[fname(ether1394_wake_queue),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(priv),call[ident(container_of),ident(work),argtype(N/H),ident(wake)]]],estmt[assign[simple_assi(=),ident(packet),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(packet),ident(host)],->expr[ident(priv),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(packet),ident(node_id)],->expr[ident(priv),ident(wake_node)]]],sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]],statem(N/H)]],def[fname(ether1394_add_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Can't add IP-over-1394 ROM entry\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(fifo_addr),call[ident(hpsb_allocate_and_register_addrspace),&expr[ident(eth1394_highlevel)],ident(host),&expr[ident(addr_ops)],ident(ETHER1394_REGION_ADDR_LEN),ident(ETHER1394_REGION_ADDR_LEN),ident(CSR1212_INVALID_ADDR_SPACE),ident(CSR1212_INVALID_ADDR_SPACE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register CSR space\n)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(alloc_netdev),sizeof_expr[*expr[ident(priv)]],const_s(eth%d),ident(ether1394_init_dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(SET_NETDEV_DEV),ident(dev),&expr[->expr[ident(host),ident(device)]]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(priv),ident(ip_node_list)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(priv),ident(lock)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(local_fifo)],ident(fifo_addr)]],estmt[call[ident(INIT_WORK),&expr[->expr[ident(priv),ident(wake)]],ident(ether1394_wake_queue)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_dev)],ident(dev)]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_create_hostinfo),&expr[ident(eth1394_highlevel)],ident(host),sizeof_expr[*expr[ident(hi)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(1)]],sel_if[call[ident(register_netdev),ident(dev)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register the driver\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(IPv4 over IEEE 1394 (fw-host%d)\n),->expr[ident(host),ident(id)]]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(broadcast_channel)],binary[aop(N/H),.expr[->expr[ident(host),ident(csr)],ident(broadcast_channel)],const_i(0x3f)]]],estmt[call[ident(ether1394_recv_init),ident(priv)]],statem(N/H),statem(N/H),sel_if[ident(hi),estmt[call[ident(hpsb_destroy_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]],estmt(NONE)],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),ident(fifo_addr)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]]]],def[fname(ether1394_remove_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),->expr[ident(priv),ident(local_fifo)]]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],sel_if[->expr[ident(priv),ident(iso)],estmt[call[ident(hpsb_iso_shutdown),->expr[ident(priv),ident(iso)]]],estmt(NONE)],estmt[call[ident(unregister_netdev),->expr[ident(hi),ident(dev)]]],estmt[call[ident(free_netdev),->expr[ident(hi),ident(dev)]]]]],def[fname(ether1394_host_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(0)]],statem(N/H),estmt[call[ident(netif_wake_queue),ident(dev)]]]],def[fname(ether1394_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(type),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(daddr),fulltype[typec(N/H)]],param[reg(),name(saddr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],call[ident(htons),ident(type)]]],sel_if[binary[aop(N/H),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_LOOPBACK),ident(IFF_NOARP)]],{}stmt[estmt[call[ident(memset),->expr[ident(eth),ident(h_dest)],const_i(0),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],sel_if[ident(daddr),{}stmt[estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],ident(daddr),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],st_return[expr(N/H)]]],def[fname(ether1394_rebuild_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[call[ident(arp_find),expr(N/H),ident(skb)]],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_DEBUG),->expr[->expr[ident(skb),ident(dev)],ident(name)],const_s(unable to resolve type %04x addresses\n),call[ident(ntohs),->expr[ident(eth),ident(h_proto)]]]],st_return[const_i(0)]]],def[fname(ether1394_header_parse),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),ident(haddr),->expr[->expr[ident(skb),ident(dev)],ident(dev_addr)],ident(ETH1394_ALEN)]],st_return[ident(ETH1394_ALEN)]]],def[fname(ether1394_header_cache),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(neigh),fulltype[typec(N/H)]],param[reg(),name(hh),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],ident(type)]],estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],->expr[ident(neigh),ident(ha)],->expr[ident(dev),ident(addr_len)]]],estmt[assign[simple_assi(=),->expr[ident(hh),ident(hh_len)],ident(ETH1394_HLEN)]],st_return[const_i(0)]]],def[fname(ether1394_header_cache_update),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hh),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),binary[aop(-),binary[aop(+),expr(N/H),const_i(16)],ident(ETH1394_HLEN)],ident(haddr),->expr[ident(dev),ident(addr_len)]]]]],def[fname(ether1394_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(eth),call[ident(eth1394_hdr),ident(skb)]]],sel_if[binary[aop(N/H),*expr[->expr[ident(eth),ident(h_dest)]],const_i(1)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_BROADCAST)]],estmt(NONE)]],{}stmt[sel_if[call[ident(memcmp),->expr[ident(eth),ident(h_dest)],->expr[ident(dev),ident(dev_addr)],->expr[ident(dev),ident(addr_len)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_OTHERHOST)]],estmt(NONE)]]],sel_if[expr(N/H),st_return[->expr[ident(eth),ident(h_proto)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rawp),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),st_return[call[ident(htons),ident(ETH_P_802_3)]],estmt(NONE)],st_return[call[ident(htons),ident(ETH_P_802_2)]]]],def[fname(ether1394_parse_encap),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[typec(N/H)]],param[reg(),name(destid),fulltype[typec(N/H)]],param[reg(),name(ether_type),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(dest_hw),expr(N/H)]],estmt[assign[simple_assi(=),ident(dest_hw),call[ident(cpu_to_be64),binary[aop(N/H),binary[aop(N/H),expr(N/H),const_i(32)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(guid_lo)]]]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(sspd),const_i(0)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(maxpayload),call[ident(min),array_a[ident(eth1394_speedto_maxpayload),ident(sspd)],expr(N/H)]]],estmt[assign[simple_assi(=),ident(guid),call[ident(get_unaligned),&expr[->expr[ident(arp1394),ident(s_uniq_id)]]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(maxpayload)],ident(maxpayload)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(sspd)],ident(sspd)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(fifo_addr)]],estmt[assign[simple_assi(=),->expr[ident(arp),ident(ar_hln)],const_i(8)]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_hln)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],->expr[ident(arp1394),ident(sip)]]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_pln)]]],sel_if[expr(N/H),estmt[call[ident(memset),ident(arp_ptr),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),ident(arp_ptr),->expr[ident(dev),ident(dev_addr)],sizeoftype_expr[fulltype[typec(N/H)]]]]]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_type_trans),ident(skb),ident(dev)]]],estmt(NONE)],st_return[ident(ret)]]],def[fname(fragment_overlap),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_list),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[const_i(0)]]],def[fname(find_partial_datagram),funtype[fulltype[typec(N/H)],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(new_fragment),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_info),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(offset)],ident(offset)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(len)],ident(len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(lh)]],st_return[const_i(0)]]],def[fname(new_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(new),ident(frag_info)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(dg_size)],ident(dg_size)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(skb)],call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(dg_size),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(kfree),ident(fi)]],estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),->expr[ident(new),ident(skb)],binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(new),ident(pbuf)],call[ident(skb_put),->expr[ident(new),ident(skb)],ident(dg_size)]]],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(new),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(pdgl)]],st_return[const_i(0)]]],def[fname(update_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(pd),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_move),ident(lh),ident(pdgl)]],st_return[const_i(0)]]],def[fname(is_datagram_complete),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],estmt[assign[simple_assi(=),ident(fi),call[ident(list_entry),.expr[->expr[ident(pd),ident(frag_info)],ident(next)],argtype(N/H),ident(list)]]],st_return[expr(N/H)]]],def[fname(ether1394_data_handler),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(buf),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_nodeid),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(srcid)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(HPSB_PRINT),ident(KERN_ERR),const(N/H),call[ident(NODE_BUS_ARGS),->expr[ident(priv),ident(host)],ident(srcid)]]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(ud),->expr[ident(node),ident(ud)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(priv),ident(ud_list)],call[ident(NODEID_TO_NODE),ident(srcid)]],ident(ud)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word1)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word1)]]]],estmt[assign[simple_assi(=),ident(hdr_len),array_a[ident(hdr_type_len),.expr[->expr[ident(hdr),ident(common)],ident(lf)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(len),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),ident(skb),binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),binary[aop(-),ident(len),ident(hdr_len)]],binary[aop(+),ident(buf),ident(hdr_len)],binary[aop(-),ident(len),ident(hdr_len)]]],estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word3)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word3)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),const_i(0)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word2)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word2)]]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(sf)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(sf)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),.expr[->expr[ident(hdr),ident(sf)],ident(fg_off)]]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(pdgl),&expr[->expr[ident(pdg),ident(list)]]]],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]],sel_if[expr(N/H),{}stmt[while[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),->expr[ident(pdgl),ident(prev)]]],estmt[expr(N/H)]]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]]],{}stmt[estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[call[ident(fragment_overlap),&expr[->expr[ident(pd),ident(frag_info)]],ident(fg_off),ident(fg_len)],{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(retval),call[ident(update_partial_datagram),ident(pdgl),ident(lh),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]]]]],estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(pd),ident(ether_type)],ident(ether_type)]],estmt(NONE)],sel_if[call[ident(is_datagram_complete),ident(lh),ident(dg_size)],{}stmt[estmt[assign[simple_assi(=),ident(ether_type),->expr[ident(pd),ident(ether_type)]]],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_get),->expr[ident(pd),ident(skb)]]]],estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]]],{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],st_return[const_i(0)]]]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(ip_summed)],ident(CHECKSUM_UNNECESSARY)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(ether1394_parse_encap),ident(skb),ident(dev),ident(srcid),ident(destid),ident(ether_type)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dev_kfree_skb_any),ident(skb)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[expr(N/H)],estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(rx_bytes)],->expr[ident(skb),ident(len)]]]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]],st_return[const_i(0)]]],def[fname(ether1394_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[ident(host),ident(id)]]],st_return[ident(RCODE_ADDRESS_ERROR)]],estmt(NONE)],sel_if[call[ident(ether1394_data_handler),->expr[ident(hi),ident(dev)],ident(srcid),ident(destid),expr(N/H),ident(len)],st_return[ident(RCODE_ADDRESS_ERROR)],st_return[ident(RCODE_COMPLETE)]]]],def[fname(ether1394_iso),funtype[fulltype[ctype[btype(void)]],param[reg(),name(iso),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[ident(iso),ident(host)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[->expr[ident(iso),ident(host)],ident(id)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(nready),call[ident(hpsb_iso_n_ready),ident(iso)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(data),expr(N/H)]],estmt[assign[simple_assi(=),ident(buf),binary[aop(+),expr(N/H),const_i(8)]]],estmt[assign[simple_assi(=),ident(len),binary[aop(-),->expr[ident(info),ident(len)],const_i(8)]]],estmt[assign[simple_assi(=),ident(specifier_id),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(0xffff)],const_i(8)],binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(1)]],const_i(0xff000000)],const_i(24)]]]],estmt[assign[simple_assi(=),ident(source_id),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(16)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],sel_if[expr(N/H),{}stmt[statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_data_handler),ident(dev),ident(source_id),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)],ident(buf),ident(len)]]]],estmt[call[ident(hpsb_iso_recv_release_packets),ident(iso),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(ether1394_arp_to_1394arp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(hw_addr_len)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sip)],*expr[expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(max_rec)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sspd)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(lnk_spd)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_hi)],call[ident(htons),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],const_i(32)]]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_lo)],call[ident(htonl),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],expr(N/H)]]]]]],def[fname(ether1394_encapsulate_prep),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(proto),fulltype[typec(N/H)]],param[reg(),name(hdr),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(lf)],ident(ETH1394_HDR_LF_UF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)],ident(proto)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(lf)],ident(ETH1394_HDR_LF_FF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)],ident(proto)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],binary[aop(-),ident(dg_size),const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),ident(adj_max_payload),binary[aop(-),ident(max_payload),array_a[ident(hdr_type_len),ident(ETH1394_HDR_LF_FF)]]]]]],st_return[binary[aop(/),binary[aop(-),binary[aop(+),ident(dg_size),ident(adj_max_payload)],const_i(1)],ident(adj_max_payload)]]]],def[fname(ether1394_encapsulate),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(hdr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),st_return[call[ident(min),ident(max_payload),->expr[ident(skb),ident(len)]]]]],def[fname(ether1394_alloc_common_packet),funtype[fulltype[typec(N/H)],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(p),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[ident(p),{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(generation)],call[ident(get_hpsb_generation),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(type)],ident(hpsb_async)]]],estmt(NONE)],st_return[ident(p)]]],def[fname(ether1394_prep_write_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(node),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],ident(node)]],sel_if[call[ident(hpsb_get_tlabel),ident(p)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_WRITEB)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(expect_response)],const_i(1)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),->expr[ident(p),ident(node_id)],const_i(16)],binary[aop(N/H),->expr[ident(p),ident(tlabel)],const_i(10)]],binary[aop(N/H),const_i(1),const_i(8)]],binary[aop(N/H),ident(TCODE_WRITEB),const_i(4)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(1)],binary[aop(N/H),binary[aop(N/H),->expr[ident(host),ident(node_id)],const_i(16)],binary[aop(N/H),ident(addr),const_i(32)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(2)],binary[aop(N/H),ident(addr),const_i(0xffffffff)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(3)],binary[aop(N/H),ident(tx_len),const_i(16)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],binary[aop(N/H),binary[aop(+),ident(tx_len),const_i(3)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],ident(data)]],st_return[const_i(0)]]],def[fname(ether1394_prep_gasp_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(priv),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(length),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(4)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_STREAM_DATA)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(length),const_i(16)],binary[aop(N/H),const_i(3),const_i(14)]],binary[aop(N/H),->expr[ident(priv),ident(broadcast_channel)],const_i(8)]],binary[aop(N/H),ident(TCODE_STREAM_DATA),const_i(4)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],ident(length)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],binary[aop(-),expr(N/H),const_i(2)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(0)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),->expr[->expr[ident(priv),ident(host)],ident(node_id)],const_i(16)],ident(ETHER1394_GASP_SPECIFIER_ID_HI)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(1)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),ident(ETHER1394_GASP_SPECIFIER_ID_LO),const_i(24)],ident(ETHER1394_GASP_VERSION)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(speed_code)],->expr[ident(priv),ident(bc_sspd)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]]]],def[fname(ether1394_free_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(packet),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]]]],decl(N/H),def[fname(ether1394_send_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(packet),call[ident(ether1394_alloc_common_packet),->expr[ident(priv),ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(ether1394_prep_gasp_packet),ident(packet),ident(priv),->expr[ident(ptask),ident(skb)],ident(length)]]],sel_if[call[ident(ether1394_prep_write_packet),ident(packet),->expr[ident(priv),ident(host)],->expr[ident(ptask),ident(dest_node)],->expr[ident(ptask),ident(addr)],->expr[->expr[ident(ptask),ident(skb)],ident(data)],ident(tx_len)],{}stmt[estmt[call[ident(hpsb_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(packet)],ident(packet)]],estmt[call[ident(hpsb_set_packet_complete_task),->expr[ident(ptask),ident(packet)],ident(ether1394_complete_cb),ident(ptask)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ether1394_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(ether1394_dg_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(fail),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[ident(fail),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(dev_kfree_skb_any),ident(skb)]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]]]],def[fname(ether1394_complete_cb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(__ptask),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(fail),call[ident(hpsb_packet_success),ident(packet)]]],estmt(NONE)],estmt[call[ident(ether1394_free_packet),ident(packet)]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),->expr[ident(ptask),ident(skb)],->expr[ident(ptask),ident(max_payload)],&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),ident(err),call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)]]],sel_if[ident(err),{}stmt[sel_if[expr(N/H),estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of tlabels\n)]],estmt(NONE)],estmt[call[ident(ether1394_dg_complete),ident(ptask),const_i(1)]]],estmt(NONE)]],{}stmt[estmt[call[ident(ether1394_dg_complete),ident(ptask),ident(fail)]]]]]],def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]],def[fname(ether1394_get_drvinfo),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(strcpy),->expr[ident(info),ident(driver)],ident(driver_name)]],estmt[call[ident(strcpy),->expr[ident(info),ident(bus_info)],const_s(ieee1394)]]]],decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(inetdevice.h)],includeN[inc_elem(linux),inc_elem(if_arp.h)],includeN[inc_elem(linux),inc_elem(if_ether.h)],includeN[inc_elem(linux),inc_elem(ip.h)],includeN[inc_elem(linux),inc_elem(in.h)],includeN[inc_elem(linux),inc_elem(tcp.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(ethtool.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(delay.h)],includeN[inc_elem(asm),inc_elem(unaligned.h)],includeN[inc_elem(net),inc_elem(arp.h)],includeL[inc_elem(config_roms.h)],includeL[inc_elem(csr1212.h)],includeL[inc_elem(eth1394.h)],includeL[inc_elem(highlevel.h)],includeL[inc_elem(ieee1394.h)],includeL[inc_elem(ieee1394_core.h)],includeL[inc_elem(ieee1394_hotplug.h)],includeL[inc_elem(ieee1394_transactions.h)],includeL[inc_elem(ieee1394_types.h)],includeL[inc_elem(iso.h)],includeL[inc_elem(nodemgr.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(ether1394_recv_init),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(priv),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(iso_buf_size),call[ident(min),expr(N/H),binary[aop(*),const_i(2),binary[aop(N/H),const_i(1U),binary[aop(+),.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)],const_i(1)]]]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(iso)],call[ident(hpsb_iso_recv_init),->expr[ident(priv),ident(host)],binary[aop(*),ident(ETHER1394_GASP_BUFFERS),ident(iso_buf_size)],ident(ETHER1394_GASP_BUFFERS),->expr[ident(priv),ident(broadcast_channel)],ident(HPSB_ISO_DMA_PACKET_PER_BUFFER),const_i(1),ident(ether1394_iso)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Failed to allocate IR context\n)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_ERROR)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_STOPPED)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_RUNNING)]]],st_return[const_i(0)]]],def[fname(ether1394_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_recv_init),ident(priv)]]],sel_if[ident(ret),st_return[ident(ret)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(netif_start_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stop),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(flush_scheduled_work)]],estmt[call[ident(netif_stop_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stats),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[&expr[->expr[expr(N/H),ident(stats)]]]]],def[fname(ether1394_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(ETH1394_PRINT),ident(KERN_ERR),->expr[ident(dev),ident(name)],const_s(Timeout, resetting host\n)]],estmt[call[ident(ether1394_host_reset),ident(host)]]]],def[fname(ether1394_max_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[st_return[binary[aop(-),binary[aop(-),binary[aop(N/H),const_i(1),binary[aop(+),.expr[->expr[ident(host),ident(csr)],ident(max_rec)],const_i(1)]],sizeoftype_expr[fulltype[typec(N/H)]]],ident(ETHER1394_GASP_OVERHEAD)]]]],def[fname(ether1394_change_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(new_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(max_mtu),call[ident(ether1394_max_mtu),->expr[expr(N/H),ident(host)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(Local node constrains MTU to %d\n),ident(max_mtu)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],ident(new_mtu)]],st_return[const_i(0)]]],def[fname(purge_partial_datagram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(old),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(old),argtype(N/H),ident(list)]]],statem(N/H),estmt[call[ident(list_del),ident(old)]],estmt[call[ident(kfree_skb),->expr[ident(pd),ident(skb)]]],estmt[call[ident(kfree),ident(pd)]]]],def[fname(eth1394_find_node),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_guid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(guid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_nodeid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(nodeid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_new_node),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hi),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new_node),call[ident(kmalloc),sizeof_expr[*expr[ident(new_node)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),call[ident(kmalloc),sizeof_expr[*expr[ident(node_info)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new_node)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_init),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]]]],estmt[call[ident(INIT_LIST_HEAD),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(list)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(node_info),ident(pdg)],ident(sz)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(CSR1212_INVALID_ADDR_SPACE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(node_info)]],estmt[assign[simple_assi(=),->expr[ident(new_node),ident(ud)],ident(ud)]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(list_add_tail),&expr[->expr[ident(new_node),ident(list)]],&expr[->expr[ident(priv),ident(ip_node_list)]]]],st_return[const_i(0)]]],def[fname(eth1394_probe),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],def[fname(eth1394_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(old_node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(list_del),&expr[->expr[ident(old_node),ident(list)]]]],estmt[call[ident(kfree),ident(old_node)]],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[call[ident(spin_lock_irqsave),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],statem(N/H),estmt[call[ident(spin_unlock_irqrestore),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],estmt[call[ident(kfree),ident(node_info)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(NULL)]],st_return[const_i(0)]]],def[fname(eth1394_update),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[ident(node),st_return[const_i(0)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],decl(N/H),mtop(N/H),decl(N/H),def[fname(ether1394_reset_priv),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(set_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(memset),->expr[ident(priv),ident(ud_list)],const_i(0),sizeof_expr[->expr[ident(priv),ident(ud_list)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_maxpayload)],const_i(512)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(max_speed),ident(IEEE1394_SPEED_100)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(max_speed),array_a[->expr[ident(host),ident(speed)],ident(i)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_sspd)],ident(max_speed)]],sel_if[ident(set_mtu),{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],call[ident(min),const_i(1500),call[ident(ether1394_max_mtu),ident(host)]]]],estmt[call[ident(memcpy),->expr[ident(dev),ident(dev_addr)],&expr[ident(guid)],sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memset),->expr[ident(dev),ident(broadcast)],const_i(0xff),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]]]],decl(N/H),def[fname(ether1394_init_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(open)],ident(ether1394_open)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(stop)],ident(ether1394_stop)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_start_xmit)],ident(ether1394_tx)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(get_stats)],ident(ether1394_stats)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_timeout)],ident(ether1394_tx_timeout)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(change_mtu)],ident(ether1394_change_mtu)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(header_ops)],&expr[ident(ether1394_header_ops)]]],estmt[call[ident(SET_ETHTOOL_OPS),ident(dev),&expr[ident(ethtool_ops)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(watchdog_timeo)],ident(ETHER1394_TIMEOUT)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_BROADCAST),ident(IFF_MULTICAST)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(features)],ident(NETIF_F_HIGHDMA)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(addr_len)],ident(ETH1394_ALEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_header_len)],ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(type)],ident(ARPHRD_IEEE1394)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_queue_len)],const_i(1000)]]]],def[fname(ether1394_wake_queue),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(priv),call[ident(container_of),ident(work),argtype(N/H),ident(wake)]]],estmt[assign[simple_assi(=),ident(packet),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(packet),ident(host)],->expr[ident(priv),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(packet),ident(node_id)],->expr[ident(priv),ident(wake_node)]]],sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]],statem(N/H)]],def[fname(ether1394_add_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Can't add IP-over-1394 ROM entry\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(fifo_addr),call[ident(hpsb_allocate_and_register_addrspace),&expr[ident(eth1394_highlevel)],ident(host),&expr[ident(addr_ops)],ident(ETHER1394_REGION_ADDR_LEN),ident(ETHER1394_REGION_ADDR_LEN),ident(CSR1212_INVALID_ADDR_SPACE),ident(CSR1212_INVALID_ADDR_SPACE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register CSR space\n)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(alloc_netdev),sizeof_expr[*expr[ident(priv)]],const_s(eth%d),ident(ether1394_init_dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(SET_NETDEV_DEV),ident(dev),&expr[->expr[ident(host),ident(device)]]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(priv),ident(ip_node_list)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(priv),ident(lock)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(local_fifo)],ident(fifo_addr)]],estmt[call[ident(INIT_WORK),&expr[->expr[ident(priv),ident(wake)]],ident(ether1394_wake_queue)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_dev)],ident(dev)]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_create_hostinfo),&expr[ident(eth1394_highlevel)],ident(host),sizeof_expr[*expr[ident(hi)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(1)]],sel_if[call[ident(register_netdev),ident(dev)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register the driver\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(IPv4 over IEEE 1394 (fw-host%d)\n),->expr[ident(host),ident(id)]]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(broadcast_channel)],binary[aop(N/H),.expr[->expr[ident(host),ident(csr)],ident(broadcast_channel)],const_i(0x3f)]]],estmt[call[ident(ether1394_recv_init),ident(priv)]],statem(N/H),statem(N/H),sel_if[ident(hi),estmt[call[ident(hpsb_destroy_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]],estmt(NONE)],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),ident(fifo_addr)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]]]],def[fname(ether1394_remove_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),->expr[ident(priv),ident(local_fifo)]]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],sel_if[->expr[ident(priv),ident(iso)],estmt[call[ident(hpsb_iso_shutdown),->expr[ident(priv),ident(iso)]]],estmt(NONE)],estmt[call[ident(unregister_netdev),->expr[ident(hi),ident(dev)]]],estmt[call[ident(free_netdev),->expr[ident(hi),ident(dev)]]]]],def[fname(ether1394_host_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(0)]],statem(N/H),estmt[call[ident(netif_wake_queue),ident(dev)]]]],def[fname(ether1394_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(type),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(daddr),fulltype[typec(N/H)]],param[reg(),name(saddr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],call[ident(htons),ident(type)]]],sel_if[binary[aop(N/H),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_LOOPBACK),ident(IFF_NOARP)]],{}stmt[estmt[call[ident(memset),->expr[ident(eth),ident(h_dest)],const_i(0),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],sel_if[ident(daddr),{}stmt[estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],ident(daddr),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],st_return[expr(N/H)]]],def[fname(ether1394_rebuild_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[call[ident(arp_find),expr(N/H),ident(skb)]],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_DEBUG),->expr[->expr[ident(skb),ident(dev)],ident(name)],const_s(unable to resolve type %04x addresses\n),call[ident(ntohs),->expr[ident(eth),ident(h_proto)]]]],st_return[const_i(0)]]],def[fname(ether1394_header_parse),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),ident(haddr),->expr[->expr[ident(skb),ident(dev)],ident(dev_addr)],ident(ETH1394_ALEN)]],st_return[ident(ETH1394_ALEN)]]],def[fname(ether1394_header_cache),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(neigh),fulltype[typec(N/H)]],param[reg(),name(hh),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],ident(type)]],estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],->expr[ident(neigh),ident(ha)],->expr[ident(dev),ident(addr_len)]]],estmt[assign[simple_assi(=),->expr[ident(hh),ident(hh_len)],ident(ETH1394_HLEN)]],st_return[const_i(0)]]],def[fname(ether1394_header_cache_update),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hh),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),binary[aop(-),binary[aop(+),expr(N/H),const_i(16)],ident(ETH1394_HLEN)],ident(haddr),->expr[ident(dev),ident(addr_len)]]]]],def[fname(ether1394_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(eth),call[ident(eth1394_hdr),ident(skb)]]],sel_if[binary[aop(N/H),*expr[->expr[ident(eth),ident(h_dest)]],const_i(1)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_BROADCAST)]],estmt(NONE)]],{}stmt[sel_if[call[ident(memcmp),->expr[ident(eth),ident(h_dest)],->expr[ident(dev),ident(dev_addr)],->expr[ident(dev),ident(addr_len)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_OTHERHOST)]],estmt(NONE)]]],sel_if[expr(N/H),st_return[->expr[ident(eth),ident(h_proto)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rawp),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),st_return[call[ident(htons),ident(ETH_P_802_3)]],estmt(NONE)],st_return[call[ident(htons),ident(ETH_P_802_2)]]]],def[fname(ether1394_parse_encap),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[typec(N/H)]],param[reg(),name(destid),fulltype[typec(N/H)]],param[reg(),name(ether_type),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(dest_hw),expr(N/H)]],estmt[assign[simple_assi(=),ident(dest_hw),call[ident(cpu_to_be64),binary[aop(N/H),binary[aop(N/H),expr(N/H),const_i(32)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(guid_lo)]]]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(sspd),const_i(0)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(maxpayload),call[ident(min),array_a[ident(eth1394_speedto_maxpayload),ident(sspd)],expr(N/H)]]],estmt[assign[simple_assi(=),ident(guid),call[ident(get_unaligned),&expr[->expr[ident(arp1394),ident(s_uniq_id)]]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(maxpayload)],ident(maxpayload)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(sspd)],ident(sspd)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(fifo_addr)]],estmt[assign[simple_assi(=),->expr[ident(arp),ident(ar_hln)],const_i(8)]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_hln)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],->expr[ident(arp1394),ident(sip)]]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_pln)]]],sel_if[expr(N/H),estmt[call[ident(memset),ident(arp_ptr),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),ident(arp_ptr),->expr[ident(dev),ident(dev_addr)],sizeoftype_expr[fulltype[typec(N/H)]]]]]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_type_trans),ident(skb),ident(dev)]]],estmt(NONE)],st_return[ident(ret)]]],def[fname(fragment_overlap),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_list),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[const_i(0)]]],def[fname(find_partial_datagram),funtype[fulltype[typec(N/H)],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(new_fragment),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_info),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(offset)],ident(offset)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(len)],ident(len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(lh)]],st_return[const_i(0)]]],def[fname(new_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(new),ident(frag_info)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(dg_size)],ident(dg_size)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(skb)],call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(dg_size),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(kfree),ident(fi)]],estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),->expr[ident(new),ident(skb)],binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(new),ident(pbuf)],call[ident(skb_put),->expr[ident(new),ident(skb)],ident(dg_size)]]],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(new),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(pdgl)]],st_return[const_i(0)]]],def[fname(update_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(pd),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_move),ident(lh),ident(pdgl)]],st_return[const_i(0)]]],def[fname(is_datagram_complete),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],estmt[assign[simple_assi(=),ident(fi),call[ident(list_entry),.expr[->expr[ident(pd),ident(frag_info)],ident(next)],argtype(N/H),ident(list)]]],st_return[expr(N/H)]]],def[fname(ether1394_data_handler),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(buf),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_nodeid),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(srcid)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(HPSB_PRINT),ident(KERN_ERR),const(N/H),call[ident(NODE_BUS_ARGS),->expr[ident(priv),ident(host)],ident(srcid)]]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(ud),->expr[ident(node),ident(ud)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(priv),ident(ud_list)],call[ident(NODEID_TO_NODE),ident(srcid)]],ident(ud)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word1)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word1)]]]],estmt[assign[simple_assi(=),ident(hdr_len),array_a[ident(hdr_type_len),.expr[->expr[ident(hdr),ident(common)],ident(lf)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(len),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),ident(skb),binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),binary[aop(-),ident(len),ident(hdr_len)]],binary[aop(+),ident(buf),ident(hdr_len)],binary[aop(-),ident(len),ident(hdr_len)]]],estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word3)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word3)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),const_i(0)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word2)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word2)]]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(sf)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(sf)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),.expr[->expr[ident(hdr),ident(sf)],ident(fg_off)]]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(pdgl),&expr[->expr[ident(pdg),ident(list)]]]],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]],sel_if[expr(N/H),{}stmt[while[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),->expr[ident(pdgl),ident(prev)]]],estmt[expr(N/H)]]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]]],{}stmt[estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[call[ident(fragment_overlap),&expr[->expr[ident(pd),ident(frag_info)]],ident(fg_off),ident(fg_len)],{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(retval),call[ident(update_partial_datagram),ident(pdgl),ident(lh),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]]]]],estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(pd),ident(ether_type)],ident(ether_type)]],estmt(NONE)],sel_if[call[ident(is_datagram_complete),ident(lh),ident(dg_size)],{}stmt[estmt[assign[simple_assi(=),ident(ether_type),->expr[ident(pd),ident(ether_type)]]],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_get),->expr[ident(pd),ident(skb)]]]],estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]]],{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],st_return[const_i(0)]]]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(ip_summed)],ident(CHECKSUM_UNNECESSARY)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(ether1394_parse_encap),ident(skb),ident(dev),ident(srcid),ident(destid),ident(ether_type)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dev_kfree_skb_any),ident(skb)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[expr(N/H)],estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(rx_bytes)],->expr[ident(skb),ident(len)]]]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]],st_return[const_i(0)]]],def[fname(ether1394_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[ident(host),ident(id)]]],st_return[ident(RCODE_ADDRESS_ERROR)]],estmt(NONE)],sel_if[call[ident(ether1394_data_handler),->expr[ident(hi),ident(dev)],ident(srcid),ident(destid),expr(N/H),ident(len)],st_return[ident(RCODE_ADDRESS_ERROR)],st_return[ident(RCODE_COMPLETE)]]]],def[fname(ether1394_iso),funtype[fulltype[ctype[btype(void)]],param[reg(),name(iso),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[ident(iso),ident(host)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[->expr[ident(iso),ident(host)],ident(id)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(nready),call[ident(hpsb_iso_n_ready),ident(iso)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(data),expr(N/H)]],estmt[assign[simple_assi(=),ident(buf),binary[aop(+),expr(N/H),const_i(8)]]],estmt[assign[simple_assi(=),ident(len),binary[aop(-),->expr[ident(info),ident(len)],const_i(8)]]],estmt[assign[simple_assi(=),ident(specifier_id),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(0xffff)],const_i(8)],binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(1)]],const_i(0xff000000)],const_i(24)]]]],estmt[assign[simple_assi(=),ident(source_id),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(16)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],sel_if[expr(N/H),{}stmt[statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_data_handler),ident(dev),ident(source_id),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)],ident(buf),ident(len)]]]],estmt[call[ident(hpsb_iso_recv_release_packets),ident(iso),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(ether1394_arp_to_1394arp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(hw_addr_len)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sip)],*expr[expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(max_rec)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sspd)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(lnk_spd)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_hi)],call[ident(htons),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],const_i(32)]]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_lo)],call[ident(htonl),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],expr(N/H)]]]]]],def[fname(ether1394_encapsulate_prep),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(proto),fulltype[typec(N/H)]],param[reg(),name(hdr),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(lf)],ident(ETH1394_HDR_LF_UF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)],ident(proto)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(lf)],ident(ETH1394_HDR_LF_FF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)],ident(proto)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],binary[aop(-),ident(dg_size),const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),ident(adj_max_payload),binary[aop(-),ident(max_payload),array_a[ident(hdr_type_len),ident(ETH1394_HDR_LF_FF)]]]]]],st_return[binary[aop(/),binary[aop(-),binary[aop(+),ident(dg_size),ident(adj_max_payload)],const_i(1)],ident(adj_max_payload)]]]],def[fname(ether1394_encapsulate),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(hdr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),st_return[call[ident(min),ident(max_payload),->expr[ident(skb),ident(len)]]]]],def[fname(ether1394_alloc_common_packet),funtype[fulltype[typec(N/H)],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(p),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[ident(p),{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(generation)],call[ident(get_hpsb_generation),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(type)],ident(hpsb_async)]]],estmt(NONE)],st_return[ident(p)]]],def[fname(ether1394_prep_write_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(node),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],ident(node)]],sel_if[call[ident(hpsb_get_tlabel),ident(p)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_WRITEB)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(expect_response)],const_i(1)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),->expr[ident(p),ident(node_id)],const_i(16)],binary[aop(N/H),->expr[ident(p),ident(tlabel)],const_i(10)]],binary[aop(N/H),const_i(1),const_i(8)]],binary[aop(N/H),ident(TCODE_WRITEB),const_i(4)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(1)],binary[aop(N/H),binary[aop(N/H),->expr[ident(host),ident(node_id)],const_i(16)],binary[aop(N/H),ident(addr),const_i(32)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(2)],binary[aop(N/H),ident(addr),const_i(0xffffffff)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(3)],binary[aop(N/H),ident(tx_len),const_i(16)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],binary[aop(N/H),binary[aop(+),ident(tx_len),const_i(3)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],ident(data)]],st_return[const_i(0)]]],def[fname(ether1394_prep_gasp_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(priv),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(length),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(4)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_STREAM_DATA)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(length),const_i(16)],binary[aop(N/H),const_i(3),const_i(14)]],binary[aop(N/H),->expr[ident(priv),ident(broadcast_channel)],const_i(8)]],binary[aop(N/H),ident(TCODE_STREAM_DATA),const_i(4)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],ident(length)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],binary[aop(-),expr(N/H),const_i(2)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(0)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),->expr[->expr[ident(priv),ident(host)],ident(node_id)],const_i(16)],ident(ETHER1394_GASP_SPECIFIER_ID_HI)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(1)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),ident(ETHER1394_GASP_SPECIFIER_ID_LO),const_i(24)],ident(ETHER1394_GASP_VERSION)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(speed_code)],->expr[ident(priv),ident(bc_sspd)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]]]],def[fname(ether1394_free_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(packet),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]]]],decl(N/H),def[fname(ether1394_send_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(packet),call[ident(ether1394_alloc_common_packet),->expr[ident(priv),ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(ether1394_prep_gasp_packet),ident(packet),ident(priv),->expr[ident(ptask),ident(skb)],ident(length)]]],sel_if[call[ident(ether1394_prep_write_packet),ident(packet),->expr[ident(priv),ident(host)],->expr[ident(ptask),ident(dest_node)],->expr[ident(ptask),ident(addr)],->expr[->expr[ident(ptask),ident(skb)],ident(data)],ident(tx_len)],{}stmt[estmt[call[ident(hpsb_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(packet)],ident(packet)]],estmt[call[ident(hpsb_set_packet_complete_task),->expr[ident(ptask),ident(packet)],ident(ether1394_complete_cb),ident(ptask)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ether1394_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(ether1394_dg_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(fail),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[ident(fail),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(dev_kfree_skb_any),ident(skb)]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]]]],def[fname(ether1394_complete_cb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(__ptask),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(fail),call[ident(hpsb_packet_success),ident(packet)]]],estmt(NONE)],estmt[call[ident(ether1394_free_packet),ident(packet)]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),->expr[ident(ptask),ident(skb)],->expr[ident(ptask),ident(max_payload)],&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),ident(err),call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)]]],sel_if[ident(err),{}stmt[sel_if[expr(N/H),estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of tlabels\n)]],estmt(NONE)],estmt[call[ident(ether1394_dg_complete),ident(ptask),const_i(1)]]],estmt(NONE)]],{}stmt[estmt[call[ident(ether1394_dg_complete),ident(ptask),ident(fail)]]]]]],def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]],def[fname(ether1394_get_drvinfo),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(strcpy),->expr[ident(info),ident(driver)],ident(driver_name)]],estmt[call[ident(strcpy),->expr[ident(info),ident(bus_info)],const_s(ieee1394)]]]],decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(inetdevice.h)],includeN[inc_elem(linux),inc_elem(if_arp.h)],includeN[inc_elem(linux),inc_elem(if_ether.h)],includeN[inc_elem(linux),inc_elem(ip.h)],includeN[inc_elem(linux),inc_elem(in.h)],includeN[inc_elem(linux),inc_elem(tcp.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(ethtool.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(delay.h)],includeN[inc_elem(asm),inc_elem(unaligned.h)],includeN[inc_elem(net),inc_elem(arp.h)],includeL[inc_elem(config_roms.h)],includeL[inc_elem(csr1212.h)],includeL[inc_elem(eth1394.h)],includeL[inc_elem(highlevel.h)],includeL[inc_elem(ieee1394.h)],includeL[inc_elem(ieee1394_core.h)],includeL[inc_elem(ieee1394_hotplug.h)],includeL[inc_elem(ieee1394_transactions.h)],includeL[inc_elem(ieee1394_types.h)],includeL[inc_elem(iso.h)],includeL[inc_elem(nodemgr.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(ether1394_recv_init),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(priv),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(iso_buf_size),call[ident(min),expr(N/H),binary[aop(*),const_i(2),binary[aop(N/H),const_i(1U),binary[aop(+),.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)],const_i(1)]]]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(iso)],call[ident(hpsb_iso_recv_init),->expr[ident(priv),ident(host)],binary[aop(*),ident(ETHER1394_GASP_BUFFERS),ident(iso_buf_size)],ident(ETHER1394_GASP_BUFFERS),->expr[ident(priv),ident(broadcast_channel)],ident(HPSB_ISO_DMA_PACKET_PER_BUFFER),const_i(1),ident(ether1394_iso)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Failed to allocate IR context\n)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_ERROR)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_STOPPED)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_RUNNING)]]],st_return[const_i(0)]]],def[fname(ether1394_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_recv_init),ident(priv)]]],sel_if[ident(ret),st_return[ident(ret)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(netif_start_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stop),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(flush_scheduled_work)]],estmt[call[ident(netif_stop_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stats),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[&expr[->expr[expr(N/H),ident(stats)]]]]],def[fname(ether1394_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(ETH1394_PRINT),ident(KERN_ERR),->expr[ident(dev),ident(name)],const_s(Timeout, resetting host\n)]],estmt[call[ident(ether1394_host_reset),ident(host)]]]],def[fname(ether1394_max_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[st_return[binary[aop(-),binary[aop(-),binary[aop(N/H),const_i(1),binary[aop(+),.expr[->expr[ident(host),ident(csr)],ident(max_rec)],const_i(1)]],sizeoftype_expr[fulltype[typec(N/H)]]],ident(ETHER1394_GASP_OVERHEAD)]]]],def[fname(ether1394_change_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(new_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(max_mtu),call[ident(ether1394_max_mtu),->expr[expr(N/H),ident(host)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(Local node constrains MTU to %d\n),ident(max_mtu)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],ident(new_mtu)]],st_return[const_i(0)]]],def[fname(purge_partial_datagram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(old),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(old),argtype(N/H),ident(list)]]],statem(N/H),estmt[call[ident(list_del),ident(old)]],estmt[call[ident(kfree_skb),->expr[ident(pd),ident(skb)]]],estmt[call[ident(kfree),ident(pd)]]]],def[fname(eth1394_find_node),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_guid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(guid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_nodeid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(nodeid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_new_node),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hi),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new_node),call[ident(kmalloc),sizeof_expr[*expr[ident(new_node)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),call[ident(kmalloc),sizeof_expr[*expr[ident(node_info)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new_node)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_init),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]]]],estmt[call[ident(INIT_LIST_HEAD),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(list)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(node_info),ident(pdg)],ident(sz)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(CSR1212_INVALID_ADDR_SPACE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(node_info)]],estmt[assign[simple_assi(=),->expr[ident(new_node),ident(ud)],ident(ud)]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(list_add_tail),&expr[->expr[ident(new_node),ident(list)]],&expr[->expr[ident(priv),ident(ip_node_list)]]]],st_return[const_i(0)]]],def[fname(eth1394_probe),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],def[fname(eth1394_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(old_node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(list_del),&expr[->expr[ident(old_node),ident(list)]]]],estmt[call[ident(kfree),ident(old_node)]],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[call[ident(spin_lock_irqsave),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],statem(N/H),estmt[call[ident(spin_unlock_irqrestore),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],estmt[call[ident(kfree),ident(node_info)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(NULL)]],st_return[const_i(0)]]],def[fname(eth1394_update),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[ident(node),st_return[const_i(0)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],decl(N/H),mtop(N/H),decl(N/H),def[fname(ether1394_reset_priv),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(set_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(memset),->expr[ident(priv),ident(ud_list)],const_i(0),sizeof_expr[->expr[ident(priv),ident(ud_list)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_maxpayload)],const_i(512)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(max_speed),ident(IEEE1394_SPEED_100)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(max_speed),array_a[->expr[ident(host),ident(speed)],ident(i)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_sspd)],ident(max_speed)]],sel_if[ident(set_mtu),{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],call[ident(min),const_i(1500),call[ident(ether1394_max_mtu),ident(host)]]]],estmt[call[ident(memcpy),->expr[ident(dev),ident(dev_addr)],&expr[ident(guid)],sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memset),->expr[ident(dev),ident(broadcast)],const_i(0xff),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]]]],decl(N/H),def[fname(ether1394_init_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(open)],ident(ether1394_open)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(stop)],ident(ether1394_stop)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_start_xmit)],ident(ether1394_tx)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(get_stats)],ident(ether1394_stats)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_timeout)],ident(ether1394_tx_timeout)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(change_mtu)],ident(ether1394_change_mtu)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(header_ops)],&expr[ident(ether1394_header_ops)]]],estmt[call[ident(SET_ETHTOOL_OPS),ident(dev),&expr[ident(ethtool_ops)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(watchdog_timeo)],ident(ETHER1394_TIMEOUT)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_BROADCAST),ident(IFF_MULTICAST)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(features)],ident(NETIF_F_HIGHDMA)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(addr_len)],ident(ETH1394_ALEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_header_len)],ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(type)],ident(ARPHRD_IEEE1394)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_queue_len)],const_i(1000)]]]],def[fname(ether1394_wake_queue),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(priv),call[ident(container_of),ident(work),argtype(N/H),ident(wake)]]],estmt[assign[simple_assi(=),ident(packet),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(packet),ident(host)],->expr[ident(priv),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(packet),ident(node_id)],->expr[ident(priv),ident(wake_node)]]],sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]],statem(N/H)]],def[fname(ether1394_add_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Can't add IP-over-1394 ROM entry\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(fifo_addr),call[ident(hpsb_allocate_and_register_addrspace),&expr[ident(eth1394_highlevel)],ident(host),&expr[ident(addr_ops)],ident(ETHER1394_REGION_ADDR_LEN),ident(ETHER1394_REGION_ADDR_LEN),ident(CSR1212_INVALID_ADDR_SPACE),ident(CSR1212_INVALID_ADDR_SPACE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register CSR space\n)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(alloc_netdev),sizeof_expr[*expr[ident(priv)]],const_s(eth%d),ident(ether1394_init_dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(SET_NETDEV_DEV),ident(dev),&expr[->expr[ident(host),ident(device)]]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(priv),ident(ip_node_list)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(priv),ident(lock)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(local_fifo)],ident(fifo_addr)]],estmt[call[ident(INIT_WORK),&expr[->expr[ident(priv),ident(wake)]],ident(ether1394_wake_queue)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_dev)],ident(dev)]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_create_hostinfo),&expr[ident(eth1394_highlevel)],ident(host),sizeof_expr[*expr[ident(hi)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(1)]],sel_if[call[ident(register_netdev),ident(dev)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register the driver\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(IPv4 over IEEE 1394 (fw-host%d)\n),->expr[ident(host),ident(id)]]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(broadcast_channel)],binary[aop(N/H),.expr[->expr[ident(host),ident(csr)],ident(broadcast_channel)],const_i(0x3f)]]],estmt[call[ident(ether1394_recv_init),ident(priv)]],statem(N/H),statem(N/H),sel_if[ident(hi),estmt[call[ident(hpsb_destroy_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]],estmt(NONE)],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),ident(fifo_addr)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]]]],def[fname(ether1394_remove_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),->expr[ident(priv),ident(local_fifo)]]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],sel_if[->expr[ident(priv),ident(iso)],estmt[call[ident(hpsb_iso_shutdown),->expr[ident(priv),ident(iso)]]],estmt(NONE)],estmt[call[ident(unregister_netdev),->expr[ident(hi),ident(dev)]]],estmt[call[ident(free_netdev),->expr[ident(hi),ident(dev)]]]]],def[fname(ether1394_host_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(0)]],statem(N/H),estmt[call[ident(netif_wake_queue),ident(dev)]]]],def[fname(ether1394_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(type),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(daddr),fulltype[typec(N/H)]],param[reg(),name(saddr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],call[ident(htons),ident(type)]]],sel_if[binary[aop(N/H),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_LOOPBACK),ident(IFF_NOARP)]],{}stmt[estmt[call[ident(memset),->expr[ident(eth),ident(h_dest)],const_i(0),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],sel_if[ident(daddr),{}stmt[estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],ident(daddr),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],st_return[expr(N/H)]]],def[fname(ether1394_rebuild_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[call[ident(arp_find),expr(N/H),ident(skb)]],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_DEBUG),->expr[->expr[ident(skb),ident(dev)],ident(name)],const_s(unable to resolve type %04x addresses\n),call[ident(ntohs),->expr[ident(eth),ident(h_proto)]]]],st_return[const_i(0)]]],def[fname(ether1394_header_parse),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),ident(haddr),->expr[->expr[ident(skb),ident(dev)],ident(dev_addr)],ident(ETH1394_ALEN)]],st_return[ident(ETH1394_ALEN)]]],def[fname(ether1394_header_cache),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(neigh),fulltype[typec(N/H)]],param[reg(),name(hh),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],ident(type)]],estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],->expr[ident(neigh),ident(ha)],->expr[ident(dev),ident(addr_len)]]],estmt[assign[simple_assi(=),->expr[ident(hh),ident(hh_len)],ident(ETH1394_HLEN)]],st_return[const_i(0)]]],def[fname(ether1394_header_cache_update),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hh),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),binary[aop(-),binary[aop(+),expr(N/H),const_i(16)],ident(ETH1394_HLEN)],ident(haddr),->expr[ident(dev),ident(addr_len)]]]]],def[fname(ether1394_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(eth),call[ident(eth1394_hdr),ident(skb)]]],sel_if[binary[aop(N/H),*expr[->expr[ident(eth),ident(h_dest)]],const_i(1)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_BROADCAST)]],estmt(NONE)]],{}stmt[sel_if[call[ident(memcmp),->expr[ident(eth),ident(h_dest)],->expr[ident(dev),ident(dev_addr)],->expr[ident(dev),ident(addr_len)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_OTHERHOST)]],estmt(NONE)]]],sel_if[expr(N/H),st_return[->expr[ident(eth),ident(h_proto)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rawp),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),st_return[call[ident(htons),ident(ETH_P_802_3)]],estmt(NONE)],st_return[call[ident(htons),ident(ETH_P_802_2)]]]],def[fname(ether1394_parse_encap),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[typec(N/H)]],param[reg(),name(destid),fulltype[typec(N/H)]],param[reg(),name(ether_type),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(dest_hw),expr(N/H)]],estmt[assign[simple_assi(=),ident(dest_hw),call[ident(cpu_to_be64),binary[aop(N/H),binary[aop(N/H),expr(N/H),const_i(32)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(guid_lo)]]]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(sspd),const_i(0)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(maxpayload),call[ident(min),array_a[ident(eth1394_speedto_maxpayload),ident(sspd)],expr(N/H)]]],estmt[assign[simple_assi(=),ident(guid),call[ident(get_unaligned),&expr[->expr[ident(arp1394),ident(s_uniq_id)]]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(maxpayload)],ident(maxpayload)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(sspd)],ident(sspd)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(fifo_addr)]],estmt[assign[simple_assi(=),->expr[ident(arp),ident(ar_hln)],const_i(8)]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_hln)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],->expr[ident(arp1394),ident(sip)]]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_pln)]]],sel_if[expr(N/H),estmt[call[ident(memset),ident(arp_ptr),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),ident(arp_ptr),->expr[ident(dev),ident(dev_addr)],sizeoftype_expr[fulltype[typec(N/H)]]]]]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_type_trans),ident(skb),ident(dev)]]],estmt(NONE)],st_return[ident(ret)]]],def[fname(fragment_overlap),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_list),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[const_i(0)]]],def[fname(find_partial_datagram),funtype[fulltype[typec(N/H)],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(new_fragment),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_info),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(offset)],ident(offset)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(len)],ident(len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(lh)]],st_return[const_i(0)]]],def[fname(new_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(new),ident(frag_info)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(dg_size)],ident(dg_size)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(skb)],call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(dg_size),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(kfree),ident(fi)]],estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),->expr[ident(new),ident(skb)],binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(new),ident(pbuf)],call[ident(skb_put),->expr[ident(new),ident(skb)],ident(dg_size)]]],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(new),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(pdgl)]],st_return[const_i(0)]]],def[fname(update_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(pd),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_move),ident(lh),ident(pdgl)]],st_return[const_i(0)]]],def[fname(is_datagram_complete),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],estmt[assign[simple_assi(=),ident(fi),call[ident(list_entry),.expr[->expr[ident(pd),ident(frag_info)],ident(next)],argtype(N/H),ident(list)]]],st_return[expr(N/H)]]],def[fname(ether1394_data_handler),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(buf),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_nodeid),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(srcid)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(HPSB_PRINT),ident(KERN_ERR),const(N/H),call[ident(NODE_BUS_ARGS),->expr[ident(priv),ident(host)],ident(srcid)]]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(ud),->expr[ident(node),ident(ud)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(priv),ident(ud_list)],call[ident(NODEID_TO_NODE),ident(srcid)]],ident(ud)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word1)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word1)]]]],estmt[assign[simple_assi(=),ident(hdr_len),array_a[ident(hdr_type_len),.expr[->expr[ident(hdr),ident(common)],ident(lf)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(len),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),ident(skb),binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),binary[aop(-),ident(len),ident(hdr_len)]],binary[aop(+),ident(buf),ident(hdr_len)],binary[aop(-),ident(len),ident(hdr_len)]]],estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word3)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word3)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),const_i(0)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word2)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word2)]]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(sf)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(sf)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),.expr[->expr[ident(hdr),ident(sf)],ident(fg_off)]]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(pdgl),&expr[->expr[ident(pdg),ident(list)]]]],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]],sel_if[expr(N/H),{}stmt[while[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),->expr[ident(pdgl),ident(prev)]]],estmt[expr(N/H)]]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]]],{}stmt[estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[call[ident(fragment_overlap),&expr[->expr[ident(pd),ident(frag_info)]],ident(fg_off),ident(fg_len)],{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(retval),call[ident(update_partial_datagram),ident(pdgl),ident(lh),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]]]]],estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(pd),ident(ether_type)],ident(ether_type)]],estmt(NONE)],sel_if[call[ident(is_datagram_complete),ident(lh),ident(dg_size)],{}stmt[estmt[assign[simple_assi(=),ident(ether_type),->expr[ident(pd),ident(ether_type)]]],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_get),->expr[ident(pd),ident(skb)]]]],estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]]],{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],st_return[const_i(0)]]]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(ip_summed)],ident(CHECKSUM_UNNECESSARY)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(ether1394_parse_encap),ident(skb),ident(dev),ident(srcid),ident(destid),ident(ether_type)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dev_kfree_skb_any),ident(skb)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[expr(N/H)],estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(rx_bytes)],->expr[ident(skb),ident(len)]]]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]],st_return[const_i(0)]]],def[fname(ether1394_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[ident(host),ident(id)]]],st_return[ident(RCODE_ADDRESS_ERROR)]],estmt(NONE)],sel_if[call[ident(ether1394_data_handler),->expr[ident(hi),ident(dev)],ident(srcid),ident(destid),expr(N/H),ident(len)],st_return[ident(RCODE_ADDRESS_ERROR)],st_return[ident(RCODE_COMPLETE)]]]],def[fname(ether1394_iso),funtype[fulltype[ctype[btype(void)]],param[reg(),name(iso),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[ident(iso),ident(host)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[->expr[ident(iso),ident(host)],ident(id)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(nready),call[ident(hpsb_iso_n_ready),ident(iso)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(data),expr(N/H)]],estmt[assign[simple_assi(=),ident(buf),binary[aop(+),expr(N/H),const_i(8)]]],estmt[assign[simple_assi(=),ident(len),binary[aop(-),->expr[ident(info),ident(len)],const_i(8)]]],estmt[assign[simple_assi(=),ident(specifier_id),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(0xffff)],const_i(8)],binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(1)]],const_i(0xff000000)],const_i(24)]]]],estmt[assign[simple_assi(=),ident(source_id),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(16)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],sel_if[expr(N/H),{}stmt[statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_data_handler),ident(dev),ident(source_id),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)],ident(buf),ident(len)]]]],estmt[call[ident(hpsb_iso_recv_release_packets),ident(iso),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(ether1394_arp_to_1394arp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(hw_addr_len)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sip)],*expr[expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(max_rec)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sspd)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(lnk_spd)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_hi)],call[ident(htons),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],const_i(32)]]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_lo)],call[ident(htonl),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],expr(N/H)]]]]]],def[fname(ether1394_encapsulate_prep),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(proto),fulltype[typec(N/H)]],param[reg(),name(hdr),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(lf)],ident(ETH1394_HDR_LF_UF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)],ident(proto)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(lf)],ident(ETH1394_HDR_LF_FF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)],ident(proto)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],binary[aop(-),ident(dg_size),const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),ident(adj_max_payload),binary[aop(-),ident(max_payload),array_a[ident(hdr_type_len),ident(ETH1394_HDR_LF_FF)]]]]]],st_return[binary[aop(/),binary[aop(-),binary[aop(+),ident(dg_size),ident(adj_max_payload)],const_i(1)],ident(adj_max_payload)]]]],def[fname(ether1394_encapsulate),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(hdr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),st_return[call[ident(min),ident(max_payload),->expr[ident(skb),ident(len)]]]]],def[fname(ether1394_alloc_common_packet),funtype[fulltype[typec(N/H)],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(p),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[ident(p),{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(generation)],call[ident(get_hpsb_generation),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(type)],ident(hpsb_async)]]],estmt(NONE)],st_return[ident(p)]]],def[fname(ether1394_prep_write_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(node),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],ident(node)]],sel_if[call[ident(hpsb_get_tlabel),ident(p)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_WRITEB)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(expect_response)],const_i(1)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),->expr[ident(p),ident(node_id)],const_i(16)],binary[aop(N/H),->expr[ident(p),ident(tlabel)],const_i(10)]],binary[aop(N/H),const_i(1),const_i(8)]],binary[aop(N/H),ident(TCODE_WRITEB),const_i(4)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(1)],binary[aop(N/H),binary[aop(N/H),->expr[ident(host),ident(node_id)],const_i(16)],binary[aop(N/H),ident(addr),const_i(32)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(2)],binary[aop(N/H),ident(addr),const_i(0xffffffff)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(3)],binary[aop(N/H),ident(tx_len),const_i(16)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],binary[aop(N/H),binary[aop(+),ident(tx_len),const_i(3)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],ident(data)]],st_return[const_i(0)]]],def[fname(ether1394_prep_gasp_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(priv),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(length),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(4)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_STREAM_DATA)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(length),const_i(16)],binary[aop(N/H),const_i(3),const_i(14)]],binary[aop(N/H),->expr[ident(priv),ident(broadcast_channel)],const_i(8)]],binary[aop(N/H),ident(TCODE_STREAM_DATA),const_i(4)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],ident(length)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],binary[aop(-),expr(N/H),const_i(2)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(0)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),->expr[->expr[ident(priv),ident(host)],ident(node_id)],const_i(16)],ident(ETHER1394_GASP_SPECIFIER_ID_HI)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(1)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),ident(ETHER1394_GASP_SPECIFIER_ID_LO),const_i(24)],ident(ETHER1394_GASP_VERSION)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(speed_code)],->expr[ident(priv),ident(bc_sspd)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]]]],def[fname(ether1394_free_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(packet),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]]]],decl(N/H),def[fname(ether1394_send_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(packet),call[ident(ether1394_alloc_common_packet),->expr[ident(priv),ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(ether1394_prep_gasp_packet),ident(packet),ident(priv),->expr[ident(ptask),ident(skb)],ident(length)]]],sel_if[call[ident(ether1394_prep_write_packet),ident(packet),->expr[ident(priv),ident(host)],->expr[ident(ptask),ident(dest_node)],->expr[ident(ptask),ident(addr)],->expr[->expr[ident(ptask),ident(skb)],ident(data)],ident(tx_len)],{}stmt[estmt[call[ident(hpsb_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(packet)],ident(packet)]],estmt[call[ident(hpsb_set_packet_complete_task),->expr[ident(ptask),ident(packet)],ident(ether1394_complete_cb),ident(ptask)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ether1394_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(ether1394_dg_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(fail),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[ident(fail),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(dev_kfree_skb_any),ident(skb)]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]]]],def[fname(ether1394_complete_cb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(__ptask),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(fail),call[ident(hpsb_packet_success),ident(packet)]]],estmt(NONE)],estmt[call[ident(ether1394_free_packet),ident(packet)]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),->expr[ident(ptask),ident(skb)],->expr[ident(ptask),ident(max_payload)],&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),ident(err),call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)]]],sel_if[ident(err),{}stmt[sel_if[expr(N/H),estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of tlabels\n)]],estmt(NONE)],estmt[call[ident(ether1394_dg_complete),ident(ptask),const_i(1)]]],estmt(NONE)]],{}stmt[estmt[call[ident(ether1394_dg_complete),ident(ptask),ident(fail)]]]]]],def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(memcpy),&expr[ident(hdr_buf)],->expr[ident(skb),ident(data)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]],def[fname(ether1394_get_drvinfo),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(strcpy),->expr[ident(info),ident(driver)],ident(driver_name)]],estmt[call[ident(strcpy),->expr[ident(info),ident(bus_info)],const_s(ieee1394)]]]],decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(slab.h)],includeN[inc_elem(linux),inc_elem(errno.h)],includeN[inc_elem(linux),inc_elem(types.h)],includeN[inc_elem(linux),inc_elem(delay.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(workqueue.h)],includeN[inc_elem(linux),inc_elem(netdevice.h)],includeN[inc_elem(linux),inc_elem(inetdevice.h)],includeN[inc_elem(linux),inc_elem(if_arp.h)],includeN[inc_elem(linux),inc_elem(if_ether.h)],includeN[inc_elem(linux),inc_elem(ip.h)],includeN[inc_elem(linux),inc_elem(in.h)],includeN[inc_elem(linux),inc_elem(tcp.h)],includeN[inc_elem(linux),inc_elem(skbuff.h)],includeN[inc_elem(linux),inc_elem(bitops.h)],includeN[inc_elem(linux),inc_elem(ethtool.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeN[inc_elem(asm),inc_elem(delay.h)],includeN[inc_elem(asm),inc_elem(unaligned.h)],includeN[inc_elem(net),inc_elem(arp.h)],includeL[inc_elem(config_roms.h)],includeL[inc_elem(csr1212.h)],includeL[inc_elem(eth1394.h)],includeL[inc_elem(highlevel.h)],includeL[inc_elem(ieee1394.h)],includeL[inc_elem(ieee1394_core.h)],includeL[inc_elem(ieee1394_hotplug.h)],includeL[inc_elem(ieee1394_transactions.h)],includeL[inc_elem(ieee1394_types.h)],includeL[inc_elem(iso.h)],includeL[inc_elem(nodemgr.h)],define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),decl(N/H),mtop(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(ether1394_recv_init),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(priv),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(iso_buf_size),call[ident(min),expr(N/H),binary[aop(*),const_i(2),binary[aop(N/H),const_i(1U),binary[aop(+),.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)],const_i(1)]]]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(iso)],call[ident(hpsb_iso_recv_init),->expr[ident(priv),ident(host)],binary[aop(*),ident(ETHER1394_GASP_BUFFERS),ident(iso_buf_size)],ident(ETHER1394_GASP_BUFFERS),->expr[ident(priv),ident(broadcast_channel)],ident(HPSB_ISO_DMA_PACKET_PER_BUFFER),const_i(1),ident(ether1394_iso)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Failed to allocate IR context\n)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_ERROR)]],st_return[expr(N/H)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_STOPPED)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_state)],ident(ETHER1394_BC_RUNNING)]]],st_return[const_i(0)]]],def[fname(ether1394_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_recv_init),ident(priv)]]],sel_if[ident(ret),st_return[ident(ret)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(netif_start_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stop),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(flush_scheduled_work)]],estmt[call[ident(netif_stop_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(ether1394_stats),funtype[fulltype[typec(N/H)],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[st_return[&expr[->expr[expr(N/H),ident(stats)]]]]],def[fname(ether1394_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(ETH1394_PRINT),ident(KERN_ERR),->expr[ident(dev),ident(name)],const_s(Timeout, resetting host\n)]],estmt[call[ident(ether1394_host_reset),ident(host)]]]],def[fname(ether1394_max_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[st_return[binary[aop(-),binary[aop(-),binary[aop(N/H),const_i(1),binary[aop(+),.expr[->expr[ident(host),ident(csr)],ident(max_rec)],const_i(1)]],sizeoftype_expr[fulltype[typec(N/H)]]],ident(ETHER1394_GASP_OVERHEAD)]]]],def[fname(ether1394_change_mtu),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(new_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(max_mtu),call[ident(ether1394_max_mtu),->expr[expr(N/H),ident(host)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(Local node constrains MTU to %d\n),ident(max_mtu)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],ident(new_mtu)]],st_return[const_i(0)]]],def[fname(purge_partial_datagram),funtype[fulltype[ctype[btype(void)]],param[reg(),name(old),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(old),argtype(N/H),ident(list)]]],statem(N/H),estmt[call[ident(list_del),ident(old)]],estmt[call[ident(kfree_skb),->expr[ident(pd),ident(skb)]]],estmt[call[ident(kfree),ident(pd)]]]],def[fname(eth1394_find_node),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_guid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(guid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_find_node_nodeid),funtype[fulltype[typec(N/H)],param[reg(),name(inl),fulltype[typec(N/H)]],param[reg(),name(nodeid),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(eth1394_new_node),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(hi),fulltype[typec(N/H)]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new_node),call[ident(kmalloc),sizeof_expr[*expr[ident(new_node)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),call[ident(kmalloc),sizeof_expr[*expr[ident(node_info)]],ident(GFP_KERNEL)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new_node)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(spin_lock_init),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]]]],estmt[call[ident(INIT_LIST_HEAD),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(list)]]]],estmt[assign[simple_assi(=),.expr[->expr[ident(node_info),ident(pdg)],ident(sz)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(CSR1212_INVALID_ADDR_SPACE)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(node_info)]],estmt[assign[simple_assi(=),->expr[ident(new_node),ident(ud)],ident(ud)]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(list_add_tail),&expr[->expr[ident(new_node),ident(list)]],&expr[->expr[ident(priv),ident(ip_node_list)]]]],st_return[const_i(0)]]],def[fname(eth1394_probe),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],def[fname(eth1394_remove),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ud),call[ident(container_of),ident(dev),argtype(N/H),ident(device)]]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(old_node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[call[ident(list_del),&expr[->expr[ident(old_node),ident(list)]]]],estmt[call[ident(kfree),ident(old_node)]],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[call[ident(spin_lock_irqsave),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],statem(N/H),estmt[call[ident(spin_unlock_irqrestore),&expr[.expr[->expr[ident(node_info),ident(pdg)],ident(lock)]],ident(flags)]],estmt[call[ident(kfree),ident(node_info)]],estmt[assign[simple_assi(=),.expr[->expr[ident(ud),ident(device)],ident(driver_data)],ident(NULL)]],st_return[const_i(0)]]],def[fname(eth1394_update),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ud),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[->expr[ident(ud),ident(ne)],ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(ud)]]],sel_if[ident(node),st_return[const_i(0)],estmt(NONE)],st_return[call[ident(eth1394_new_node),ident(hi),ident(ud)]]]],decl(N/H),mtop(N/H),decl(N/H),def[fname(ether1394_reset_priv),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(set_mtu),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(memset),->expr[ident(priv),ident(ud_list)],const_i(0),sizeof_expr[->expr[ident(priv),ident(ud_list)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_maxpayload)],const_i(512)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(max_speed),ident(IEEE1394_SPEED_100)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(max_speed),array_a[->expr[ident(host),ident(speed)],ident(i)]]],estmt(NONE)]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(bc_sspd)],ident(max_speed)]],sel_if[ident(set_mtu),{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(mtu)],call[ident(min),const_i(1500),call[ident(ether1394_max_mtu),ident(host)]]]],estmt[call[ident(memcpy),->expr[ident(dev),ident(dev_addr)],&expr[ident(guid)],sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memset),->expr[ident(dev),ident(broadcast)],const_i(0xff),sizeoftype_expr[fulltype[typec(N/H)]]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]]]],decl(N/H),def[fname(ether1394_init_dev),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(dev),ident(open)],ident(ether1394_open)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(stop)],ident(ether1394_stop)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_start_xmit)],ident(ether1394_tx)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(get_stats)],ident(ether1394_stats)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_timeout)],ident(ether1394_tx_timeout)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(change_mtu)],ident(ether1394_change_mtu)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(header_ops)],&expr[ident(ether1394_header_ops)]]],estmt[call[ident(SET_ETHTOOL_OPS),ident(dev),&expr[ident(ethtool_ops)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(watchdog_timeo)],ident(ETHER1394_TIMEOUT)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_BROADCAST),ident(IFF_MULTICAST)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(features)],ident(NETIF_F_HIGHDMA)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(addr_len)],ident(ETH1394_ALEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(hard_header_len)],ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(type)],ident(ARPHRD_IEEE1394)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(tx_queue_len)],const_i(1000)]]]],def[fname(ether1394_wake_queue),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(priv),call[ident(container_of),ident(work),argtype(N/H),ident(wake)]]],estmt[assign[simple_assi(=),ident(packet),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(packet),ident(host)],->expr[ident(priv),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(packet),ident(node_id)],->expr[ident(priv),ident(wake_node)]]],sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]],statem(N/H)]],def[fname(ether1394_add_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Can't add IP-over-1394 ROM entry\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(fifo_addr),call[ident(hpsb_allocate_and_register_addrspace),&expr[ident(eth1394_highlevel)],ident(host),&expr[ident(addr_ops)],ident(ETHER1394_REGION_ADDR_LEN),ident(ETHER1394_REGION_ADDR_LEN),ident(CSR1212_INVALID_ADDR_SPACE),ident(CSR1212_INVALID_ADDR_SPACE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register CSR space\n)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(alloc_netdev),sizeof_expr[*expr[ident(priv)]],const_s(eth%d),ident(ether1394_init_dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(SET_NETDEV_DEV),ident(dev),&expr[->expr[ident(host),ident(device)]]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(priv),ident(ip_node_list)]]]],estmt[call[ident(spin_lock_init),&expr[->expr[ident(priv),ident(lock)]]]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(local_fifo)],ident(fifo_addr)]],estmt[call[ident(INIT_WORK),&expr[->expr[ident(priv),ident(wake)]],ident(ether1394_wake_queue)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_dev)],ident(dev)]],estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_create_hostinfo),&expr[ident(eth1394_highlevel)],ident(host),sizeof_expr[*expr[ident(hi)]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(1)]],sel_if[call[ident(register_netdev),ident(dev)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Cannot register the driver\n)]],statem(N/H)],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_INFO),->expr[ident(dev),ident(name)],const_s(IPv4 over IEEE 1394 (fw-host%d)\n),->expr[ident(host),ident(id)]]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(hi),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(broadcast_channel)],binary[aop(N/H),.expr[->expr[ident(host),ident(csr)],ident(broadcast_channel)],const_i(0x3f)]]],estmt[call[ident(ether1394_recv_init),ident(priv)]],statem(N/H),statem(N/H),sel_if[ident(hi),estmt[call[ident(hpsb_destroy_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]],estmt(NONE)],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),ident(fifo_addr)]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]]]],def[fname(ether1394_remove_host),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),->expr[ident(hi),ident(dev)]]]],estmt[call[ident(hpsb_unregister_addrspace),&expr[ident(eth1394_highlevel)],ident(host),->expr[ident(priv),ident(local_fifo)]]],estmt[call[ident(hpsb_config_rom_ip1394_remove),ident(host)]],sel_if[->expr[ident(priv),ident(iso)],estmt[call[ident(hpsb_iso_shutdown),->expr[ident(priv),ident(iso)]]],estmt(NONE)],estmt[call[ident(unregister_netdev),->expr[ident(hi),ident(dev)]]],estmt[call[ident(free_netdev),->expr[ident(hi),ident(dev)]]]]],def[fname(ether1394_host_reset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(ether1394_reset_priv),ident(dev),const_i(0)]],statem(N/H),estmt[call[ident(netif_wake_queue),ident(dev)]]]],def[fname(ether1394_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(type),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(daddr),fulltype[typec(N/H)]],param[reg(),name(saddr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],call[ident(htons),ident(type)]]],sel_if[binary[aop(N/H),->expr[ident(dev),ident(flags)],binary[aop(N/H),ident(IFF_LOOPBACK),ident(IFF_NOARP)]],{}stmt[estmt[call[ident(memset),->expr[ident(eth),ident(h_dest)],const_i(0),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],sel_if[ident(daddr),{}stmt[estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],ident(daddr),->expr[ident(dev),ident(addr_len)]]],st_return[->expr[ident(dev),ident(hard_header_len)]]],estmt(NONE)],st_return[expr(N/H)]]],def[fname(ether1394_rebuild_header),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[call[ident(arp_find),expr(N/H),ident(skb)]],estmt(NONE)],estmt[call[ident(ETH1394_PRINT),ident(KERN_DEBUG),->expr[->expr[ident(skb),ident(dev)],ident(name)],const_s(unable to resolve type %04x addresses\n),call[ident(ntohs),->expr[ident(eth),ident(h_proto)]]]],st_return[const_i(0)]]],def[fname(ether1394_header_parse),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),ident(haddr),->expr[->expr[ident(skb),ident(dev)],ident(dev_addr)],ident(ETH1394_ALEN)]],st_return[ident(ETH1394_ALEN)]]],def[fname(ether1394_header_cache),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(neigh),fulltype[typec(N/H)]],param[reg(),name(hh),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(eth),ident(h_proto)],ident(type)]],estmt[call[ident(memcpy),->expr[ident(eth),ident(h_dest)],->expr[ident(neigh),ident(ha)],->expr[ident(dev),ident(addr_len)]]],estmt[assign[simple_assi(=),->expr[ident(hh),ident(hh_len)],ident(ETH1394_HLEN)]],st_return[const_i(0)]]],def[fname(ether1394_header_cache_update),funtype[fulltype[ctype[btype(void)]],param[reg(),name(hh),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(haddr),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(memcpy),binary[aop(-),binary[aop(+),expr(N/H),const_i(16)],ident(ETH1394_HLEN)],ident(haddr),->expr[ident(dev),ident(addr_len)]]]]],def[fname(ether1394_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(eth),call[ident(eth1394_hdr),ident(skb)]]],sel_if[binary[aop(N/H),*expr[->expr[ident(eth),ident(h_dest)]],const_i(1)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_BROADCAST)]],estmt(NONE)]],{}stmt[sel_if[call[ident(memcmp),->expr[ident(eth),ident(h_dest)],->expr[ident(dev),ident(dev_addr)],->expr[ident(dev),ident(addr_len)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_OTHERHOST)]],estmt(NONE)]]],sel_if[expr(N/H),st_return[->expr[ident(eth),ident(h_proto)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rawp),->expr[ident(skb),ident(data)]]],sel_if[expr(N/H),st_return[call[ident(htons),ident(ETH_P_802_3)]],estmt(NONE)],st_return[call[ident(htons),ident(ETH_P_802_2)]]]],def[fname(ether1394_parse_encap),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[typec(N/H)]],param[reg(),name(destid),fulltype[typec(N/H)]],param[reg(),name(ether_type),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(dest_hw),expr(N/H)]],estmt[assign[simple_assi(=),ident(dest_hw),call[ident(cpu_to_be64),binary[aop(N/H),binary[aop(N/H),expr(N/H),const_i(32)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(guid_lo)]]]]]],sel_if[expr(N/H),{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(sspd),const_i(0)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(maxpayload),call[ident(min),array_a[ident(eth1394_speedto_maxpayload),ident(sspd)],expr(N/H)]]],estmt[assign[simple_assi(=),ident(guid),call[ident(get_unaligned),&expr[->expr[ident(arp1394),ident(s_uniq_id)]]]]],estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),st_return[const_i(0)],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(maxpayload)],ident(maxpayload)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(sspd)],ident(sspd)]],estmt[assign[simple_assi(=),->expr[ident(node_info),ident(fifo)],ident(fifo_addr)]],estmt[assign[simple_assi(=),->expr[ident(arp),ident(ar_hln)],const_i(8)]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_hln)]]],estmt[assign[simple_assi(=),*expr[expr(N/H)],->expr[ident(arp1394),ident(sip)]]],estmt[assign[op_assi(+=),ident(arp_ptr),->expr[ident(arp),ident(ar_pln)]]],sel_if[expr(N/H),estmt[call[ident(memset),ident(arp_ptr),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[call[ident(memcpy),ident(arp_ptr),->expr[ident(dev),ident(dev_addr)],sizeoftype_expr[fulltype[typec(N/H)]]]]]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(ret),call[ident(ether1394_type_trans),ident(skb),ident(dev)]]],estmt(NONE)],st_return[ident(ret)]]],def[fname(fragment_overlap),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_list),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),st_return[const_i(0)]]],def[fname(find_partial_datagram),funtype[fulltype[typec(N/H)],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),st_return[ident(NULL)]]],def[fname(new_fragment),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(frag_info),fulltype[typec(N/H)]],param[reg(),name(offset),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(offset)],ident(offset)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(len)],ident(len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(lh)]],st_return[const_i(0)]]],def[fname(new_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(new),call[ident(kmalloc),sizeof_expr[*expr[ident(new)]],ident(GFP_ATOMIC)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(INIT_LIST_HEAD),&expr[->expr[ident(new),ident(frag_info)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(new),ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(dg_size)],ident(dg_size)]],estmt[assign[simple_assi(=),->expr[ident(new),ident(skb)],call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(dg_size),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(kfree),ident(fi)]],estmt[call[ident(kfree),ident(new)]],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),->expr[ident(new),ident(skb)],binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(new),ident(pbuf)],call[ident(skb_put),->expr[ident(new),ident(skb)],ident(dg_size)]]],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(new),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_add),&expr[->expr[ident(new),ident(list)]],ident(pdgl)]],st_return[const_i(0)]]],def[fname(update_partial_datagram),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(pdgl),fulltype[typec(N/H)]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(frag_buf),fulltype[typec(N/H)]],param[reg(),name(frag_off),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(frag_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],estmt[call[ident(memcpy),binary[aop(+),->expr[ident(pd),ident(pbuf)],ident(frag_off)],ident(frag_buf),ident(frag_len)]],estmt[call[ident(list_move),ident(lh),ident(pdgl)]],st_return[const_i(0)]]],def[fname(is_datagram_complete),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(lh),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],estmt[assign[simple_assi(=),ident(fi),call[ident(list_entry),.expr[->expr[ident(pd),ident(frag_info)],ident(next)],argtype(N/H),ident(list)]]],st_return[expr(N/H)]]],def[fname(ether1394_data_handler),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(buf),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_nodeid),&expr[->expr[ident(priv),ident(ip_node_list)]],ident(srcid)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(HPSB_PRINT),ident(KERN_ERR),const(N/H),call[ident(NODE_BUS_ARGS),->expr[ident(priv),ident(host)],ident(srcid)]]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(ud),->expr[ident(node),ident(ud)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(priv),ident(ud_list)],call[ident(NODEID_TO_NODE),ident(srcid)]],ident(ud)]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word1)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word1)]]]],estmt[assign[simple_assi(=),ident(hdr_len),array_a[ident(hdr_type_len),.expr[->expr[ident(hdr),ident(common)],ident(lf)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(skb),call[ident(dev_alloc_skb),binary[aop(+),binary[aop(+),ident(len),->expr[ident(dev),ident(hard_header_len)]],const_i(15)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of memory\n)]],estmt[expr(N/H)],st_return[expr(N/H)]],estmt(NONE)],estmt[call[ident(skb_reserve),ident(skb),binary[aop(N/H),binary[aop(+),->expr[ident(dev),ident(hard_header_len)],const_i(15)],expr(N/H)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),binary[aop(-),ident(len),ident(hdr_len)]],binary[aop(+),ident(buf),ident(hdr_len)],binary[aop(-),ident(len),ident(hdr_len)]]],estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word3)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word3)]]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(ether_type),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),const_i(0)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(words)],ident(word2)],call[ident(ntohs),.expr[->expr[ident(hdr),ident(words)],ident(word2)]]]],estmt[assign[simple_assi(=),ident(dgl),.expr[->expr[ident(hdr),ident(sf)],ident(dgl)]]],estmt[assign[simple_assi(=),ident(dg_size),binary[aop(+),.expr[->expr[ident(hdr),ident(sf)],ident(dg_size)],const_i(1)]]],estmt[assign[simple_assi(=),ident(fg_off),.expr[->expr[ident(hdr),ident(sf)],ident(fg_off)]]]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(pdgl),&expr[->expr[ident(pdg),ident(list)]]]],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]],sel_if[expr(N/H),{}stmt[while[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),->expr[ident(pdgl),ident(prev)]]],estmt[expr(N/H)]]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(lh),call[ident(find_partial_datagram),ident(pdgl),ident(dgl)]]]],{}stmt[estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[call[ident(fragment_overlap),&expr[->expr[ident(pd),ident(frag_info)]],ident(fg_off),ident(fg_len)],{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[assign[simple_assi(=),ident(retval),call[ident(new_partial_datagram),ident(dev),ident(pdgl),ident(dgl),ident(dg_size),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(retval),call[ident(update_partial_datagram),ident(pdgl),ident(lh),binary[aop(+),ident(buf),ident(hdr_len)],ident(fg_off),ident(fg_len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],statem(N/H)],estmt(NONE)]]]]],estmt[assign[simple_assi(=),ident(pd),call[ident(list_entry),ident(lh),argtype(N/H),ident(list)]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(pd),ident(ether_type)],ident(ether_type)]],estmt(NONE)],sel_if[call[ident(is_datagram_complete),ident(lh),ident(dg_size)],{}stmt[estmt[assign[simple_assi(=),ident(ether_type),->expr[ident(pd),ident(ether_type)]]],estmt[expr(N/H)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_get),->expr[ident(pd),ident(skb)]]]],estmt[call[ident(purge_partial_datagram),ident(lh)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]]],{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(pdg),ident(lock)]],ident(flags)]],st_return[const_i(0)]]]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(ip_summed)],ident(CHECKSUM_UNNECESSARY)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(ether1394_parse_encap),ident(skb),ident(dev),ident(srcid),ident(destid),ident(ether_type)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dev_kfree_skb_any),ident(skb)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[expr(N/H)],estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(rx_bytes)],->expr[ident(skb),ident(len)]]]]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],statem(N/H),estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]],st_return[const_i(0)]]],def[fname(ether1394_write),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(srcid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(destid),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[typec(N/H)]],param[reg(),name(flags),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],ident(host)]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[ident(host),ident(id)]]],st_return[ident(RCODE_ADDRESS_ERROR)]],estmt(NONE)],sel_if[call[ident(ether1394_data_handler),->expr[ident(hi),ident(dev)],ident(srcid),ident(destid),expr(N/H),ident(len)],st_return[ident(RCODE_ADDRESS_ERROR)],st_return[ident(RCODE_COMPLETE)]]]],def[fname(ether1394_iso),funtype[fulltype[ctype[btype(void)]],param[reg(),name(iso),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(hi),call[ident(hpsb_get_hostinfo),&expr[ident(eth1394_highlevel)],->expr[ident(iso),ident(host)]]]],sel_if[call[ident(unlikely),expr(N/H)],{}stmt[estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(No net device at fw-host%d\n),->expr[->expr[ident(iso),ident(host)],ident(id)]]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),->expr[ident(hi),ident(dev)]]],estmt[assign[simple_assi(=),ident(nready),call[ident(hpsb_iso_n_ready),ident(iso)]]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(data),expr(N/H)]],estmt[assign[simple_assi(=),ident(buf),binary[aop(+),expr(N/H),const_i(8)]]],estmt[assign[simple_assi(=),ident(len),binary[aop(-),->expr[ident(info),ident(len)],const_i(8)]]],estmt[assign[simple_assi(=),ident(specifier_id),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(0xffff)],const_i(8)],binary[aop(N/H),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(1)]],const_i(0xff000000)],const_i(24)]]]],estmt[assign[simple_assi(=),ident(source_id),binary[aop(N/H),call[ident(be32_to_cpu),array_a[ident(data),const_i(0)]],const_i(16)]]],estmt[assign[simple_assi(=),ident(priv),call[ident(netdev_priv),ident(dev)]]],sel_if[expr(N/H),{}stmt[statem(N/H)],estmt(NONE)],estmt[call[ident(ether1394_data_handler),ident(dev),ident(source_id),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)],ident(buf),ident(len)]]]],estmt[call[ident(hpsb_iso_recv_release_packets),ident(iso),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(ether1394_arp_to_1394arp),funtype[fulltype[ctype[btype(void)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(hw_addr_len)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sip)],*expr[expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(max_rec)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(max_rec)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(sspd)],.expr[->expr[->expr[ident(priv),ident(host)],ident(csr)],ident(lnk_spd)]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_hi)],call[ident(htons),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],const_i(32)]]]],estmt[assign[simple_assi(=),->expr[ident(arp1394),ident(fifo_lo)],call[ident(htonl),binary[aop(N/H),->expr[ident(priv),ident(local_fifo)],expr(N/H)]]]]]],def[fname(ether1394_encapsulate_prep),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(proto),fulltype[typec(N/H)]],param[reg(),name(hdr),fulltype[typec(N/H)]],param[reg(),name(dg_size),fulltype[typec(N/H)]],param[reg(),name(dgl),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(lf)],ident(ETH1394_HDR_LF_UF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(uf)],ident(ether_type)],ident(proto)]]],{}stmt[estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(lf)],ident(ETH1394_HDR_LF_FF)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(ether_type)],ident(proto)]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dg_size)],binary[aop(-),ident(dg_size),const_i(1)]]],estmt[assign[simple_assi(=),.expr[->expr[ident(hdr),ident(ff)],ident(dgl)],ident(dgl)]],estmt[assign[simple_assi(=),ident(adj_max_payload),binary[aop(-),ident(max_payload),array_a[ident(hdr_type_len),ident(ETH1394_HDR_LF_FF)]]]]]],st_return[binary[aop(/),binary[aop(-),binary[aop(+),ident(dg_size),ident(adj_max_payload)],const_i(1)],ident(adj_max_payload)]]]],def[fname(ether1394_encapsulate),funtype[fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(max_payload),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]],param[reg(),name(hdr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),st_return[call[ident(min),ident(max_payload),->expr[ident(skb),ident(len)]]]]],def[fname(ether1394_alloc_common_packet),funtype[fulltype[typec(N/H)],param[reg(),name(host),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(p),call[ident(hpsb_alloc_packet),const_i(0)]]],sel_if[ident(p),{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(host)],ident(host)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(generation)],call[ident(get_hpsb_generation),ident(host)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(type)],ident(hpsb_async)]]],estmt(NONE)],st_return[ident(p)]]],def[fname(ether1394_prep_write_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(host),fulltype[typec(N/H)]],param[reg(),name(node),fulltype[typec(N/H)]],param[reg(),name(addr),fulltype[typec(N/H)]],param[reg(),name(data),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],ident(node)]],sel_if[call[ident(hpsb_get_tlabel),ident(p)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_WRITEB)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(16)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(expect_response)],const_i(1)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),->expr[ident(p),ident(node_id)],const_i(16)],binary[aop(N/H),->expr[ident(p),ident(tlabel)],const_i(10)]],binary[aop(N/H),const_i(1),const_i(8)]],binary[aop(N/H),ident(TCODE_WRITEB),const_i(4)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(1)],binary[aop(N/H),binary[aop(N/H),->expr[ident(host),ident(node_id)],const_i(16)],binary[aop(N/H),ident(addr),const_i(32)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(2)],binary[aop(N/H),ident(addr),const_i(0xffffffff)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(3)],binary[aop(N/H),ident(tx_len),const_i(16)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],binary[aop(N/H),binary[aop(+),ident(tx_len),const_i(3)],expr(N/H)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],ident(data)]],st_return[const_i(0)]]],def[fname(ether1394_prep_gasp_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(p),fulltype[typec(N/H)]],param[reg(),name(priv),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(length),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(p),ident(header_size)],const_i(4)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(tcode)],ident(TCODE_STREAM_DATA)]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(header)],const_i(0)],binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),binary[aop(N/H),ident(length),const_i(16)],binary[aop(N/H),const_i(3),const_i(14)]],binary[aop(N/H),->expr[ident(priv),ident(broadcast_channel)],const_i(8)]],binary[aop(N/H),ident(TCODE_STREAM_DATA),const_i(4)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data_size)],ident(length)]],estmt[assign[simple_assi(=),->expr[ident(p),ident(data)],binary[aop(-),expr(N/H),const_i(2)]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(0)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),->expr[->expr[ident(priv),ident(host)],ident(node_id)],const_i(16)],ident(ETHER1394_GASP_SPECIFIER_ID_HI)]]]],estmt[assign[simple_assi(=),array_a[->expr[ident(p),ident(data)],const_i(1)],call[ident(cpu_to_be32),binary[aop(N/H),binary[aop(N/H),ident(ETHER1394_GASP_SPECIFIER_ID_LO),const_i(24)],ident(ETHER1394_GASP_VERSION)]]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(speed_code)],->expr[ident(priv),ident(bc_sspd)]]],estmt[assign[simple_assi(=),->expr[ident(p),ident(node_id)],binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]]]],def[fname(ether1394_free_packet),funtype[fulltype[ctype[btype(void)]],param[reg(),name(packet),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),estmt[call[ident(hpsb_free_tlabel),ident(packet)]],estmt(NONE)],estmt[call[ident(hpsb_free_packet),ident(packet)]]]],decl(N/H),def[fname(ether1394_send_packet),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(tx_len),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(packet),call[ident(ether1394_alloc_common_packet),->expr[ident(priv),ident(host)]]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(ether1394_prep_gasp_packet),ident(packet),ident(priv),->expr[ident(ptask),ident(skb)],ident(length)]]],sel_if[call[ident(ether1394_prep_write_packet),ident(packet),->expr[ident(priv),ident(host)],->expr[ident(ptask),ident(dest_node)],->expr[ident(ptask),ident(addr)],->expr[->expr[ident(ptask),ident(skb)],ident(data)],ident(tx_len)],{}stmt[estmt[call[ident(hpsb_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(packet)],ident(packet)]],estmt[call[ident(hpsb_set_packet_complete_task),->expr[ident(ptask),ident(packet)],ident(ether1394_complete_cb),ident(ptask)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(ether1394_free_packet),ident(packet)]],st_return[expr(N/H)]],estmt(NONE)],st_return[const_i(0)]]],def[fname(ether1394_dg_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(ptask),fulltype[typec(N/H)]],param[reg(),name(fail),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],sel_if[ident(fail),{}stmt[estmt[expr(N/H)],estmt[expr(N/H)]],{}stmt[estmt[assign[op_assi(+=),.expr[->expr[ident(priv),ident(stats)],ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[expr(N/H)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[call[ident(dev_kfree_skb_any),ident(skb)]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]]]],def[fname(ether1394_complete_cb),funtype[fulltype[ctype[btype(void)]],param[reg(),name(__ptask),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(fail),call[ident(hpsb_packet_success),ident(packet)]]],estmt(NONE)],estmt[call[ident(ether1394_free_packet),ident(packet)]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),->expr[ident(ptask),ident(skb)],->expr[ident(ptask),ident(max_payload)],&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),ident(err),call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)]]],sel_if[ident(err),{}stmt[sel_if[expr(N/H),estmt[call[ident(ETH1394_PRINT_G),ident(KERN_ERR),const_s(Out of tlabels\n)]],estmt(NONE)],estmt[call[ident(ether1394_dg_complete),ident(ptask),const_i(1)]]],estmt(NONE)]],{}stmt[estmt[call[ident(ether1394_dg_complete),ident(ptask),ident(fail)]]]]]],def[fname(ether1394_tx),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(ptask),call[ident(kmem_cache_alloc),ident(packet_task_cache),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(skb),call[ident(skb_share_check),ident(skb),ident(GFP_ATOMIC)]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_copy_from_linear_data),ident(skb),&expr[ident(hdr_buf)],sizeof_expr[ident(hdr_buf)]]],estmt[call[ident(skb_pull),ident(skb),ident(ETH1394_HLEN)]],estmt[assign[simple_assi(=),ident(proto),.expr[ident(hdr_buf),ident(h_proto)]]],estmt[assign[simple_assi(=),ident(dg_size),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_GASP)]],estmt[assign[simple_assi(=),ident(dest_node),binary[aop(N/H),ident(LOCAL_BUS),ident(ALL_NODES)]]],estmt[assign[simple_assi(=),ident(max_payload),binary[aop(-),->expr[ident(priv),ident(bc_maxpayload)],ident(ETHER1394_GASP_OVERHEAD)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(priv),ident(bc_dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(node),call[ident(eth1394_find_node_guid),&expr[->expr[ident(priv),ident(ip_node_list)]],call[ident(be64_to_cpu),ident(guid)]]]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(node_info),expr(N/H)]],sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dest_node),->expr[->expr[->expr[ident(node),ident(ud)],ident(ne)],ident(nodeid)]]],estmt[assign[simple_assi(=),ident(max_payload),->expr[ident(node_info),ident(maxpayload)]]],estmt[call[ident(BUG_ON),expr(N/H)]],estmt[assign[simple_assi(=),ident(dgl),->expr[ident(node_info),ident(dgl)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(tx_type),ident(ETH1394_WRREQ)]]]],sel_if[expr(N/H),estmt[call[ident(ether1394_arp_to_1394arp),ident(skb),ident(dev)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word1)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word2)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word3)],const_i(0)]],estmt[assign[simple_assi(=),.expr[.expr[->expr[ident(ptask),ident(hdr)],ident(words)],ident(word4)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(skb)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(priv)],ident(priv)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],sel_if[expr(N/H),{}stmt[statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(addr),->expr[ident(node_info),ident(fifo)]]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(addr)],ident(addr)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(dest_node)],ident(dest_node)]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(tx_type)],ident(tx_type)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(max_payload)],ident(max_payload)]],estmt[assign[simple_assi(=),->expr[ident(ptask),ident(outstanding_pkts)],call[ident(ether1394_encapsulate_prep),ident(max_payload),ident(proto),&expr[->expr[ident(ptask),ident(hdr)]],ident(dg_size),ident(dgl)]]],estmt[assign[simple_assi(=),ident(tx_len),call[ident(ether1394_encapsulate),ident(skb),ident(max_payload),&expr[->expr[ident(ptask),ident(hdr)]]]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],sel_if[call[ident(ether1394_send_packet),ident(ptask),ident(tx_len)],{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[call[ident(skb_pull),ident(skb),const_i(4)]],estmt[call[ident(ether1394_header),ident(skb),ident(dev),call[ident(ntohs),.expr[ident(hdr_buf),ident(h_proto)]],.expr[ident(hdr_buf),ident(h_dest)],ident(NULL),const_i(0)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(priv),ident(wake_node)],ident(dest_node)]],estmt[call[ident(schedule_work),&expr[->expr[ident(priv),ident(wake)]]]],estmt[call[ident(kmem_cache_free),ident(packet_task_cache),ident(ptask)]],st_return[ident(NETDEV_TX_BUSY)]],estmt(NONE)],st_return[ident(NETDEV_TX_OK)],statem(N/H),sel_if[expr(N/H),estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(priv),ident(lock)]],ident(flags)]],st_return[ident(NETDEV_TX_OK)]]],def[fname(ether1394_get_drvinfo),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[estmt[call[ident(strcpy),->expr[ident(info),ident(driver)],ident(driver_name)]],estmt[call[ident(strcpy),->expr[ident(info),ident(bus_info)],const_s(ieee1394)]]]],decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
Making safe parts for pair 3
[Diff] abstracting concrete update:->expr[ident(card),ident(tx_dma_handle_host)] ==> ident(skb)
[Diff] resulting abstract updates: 2
->expr[meta(X2),meta(X1)] ==> ident(skb)
meta(X0) ==> ident(skb)
[Diff] abstracting concrete update:call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]
[Diff] resulting abstract updates: 222
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[meta(X3),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),meta(X2)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],->expr[ident(skb),ident(len)]]
call[ident(memcpy),->expr[meta(X8),meta(X7)],meta(X4),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),->expr[meta(X8),meta(X7)],meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[meta(X3),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),meta(X5)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),->expr[ident(skb),ident(data)],meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),meta(X3),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[meta(X3),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[meta(X3),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),meta(X2)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[ident(skb),meta(X2)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),->expr[ident(skb),ident(len)]] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),->expr[ident(skb),ident(len)]]
call[ident(memcpy),meta(X6),meta(X4),meta(X1)] ==> call[ident(skb_copy_from_linear_data),ident(skb),meta(X6),meta(X1)]
[Diff] abstracting concrete update:estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
[Diff] resulting abstract updates: 20
estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],meta(X2)]]
estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],meta(X3),->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],meta(X2)]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],meta(X2)]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),->expr[ident(skb),ident(data)],meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),meta(X2)]]
estmt[call[ident(memcpy),meta(X4),meta(X3),->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),->expr[ident(skb),ident(len)]]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],meta(X2)]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),->expr[ident(skb),ident(len)]]]
estmt[call[ident(memcpy),meta(X4),meta(X3),meta(X2)]] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),meta(X4),meta(X2)]]
estmt[meta(X1)] ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
meta(X0) ==> estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]]
[Diff] abstracting concrete update:{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]] ==> {}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]
[Diff] resulting abstract updates: 1
{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]] ==> {}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]
[Diff] abstracting concrete update:sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]] ==> sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]]
[Diff] resulting abstract updates: 1
sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]] ==> sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]]
[Diff] abstracting concrete update:{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]] ==> {}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]]
[Diff] resulting abstract updates: 1
{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]] ==> {}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]]
[Diff] abstracting concrete update:sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]] ==> sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]
[Diff] resulting abstract updates: 1
sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]] ==> sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]
[Diff] abstracting concrete update:{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]] ==> {}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]
[Diff] resulting abstract updates: 1
{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]] ==> {}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]
[Diff] abstracting concrete update:while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]] ==> while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]
[Diff] resulting abstract updates: 1
while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]] ==> while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]
[Diff] abstracting concrete update:{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]] ==> {}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]
[Diff] resulting abstract updates: 1
{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]] ==> {}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]
[Diff] abstracting concrete update:for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]] ==> for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]
[Diff] resulting abstract updates: 1
for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]] ==> for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]
[Diff] abstracting concrete update:{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]
[Diff] resulting abstract updates: 1
{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]] ==> {}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]
[Diff] abstracting concrete update:def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]] ==> def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]]
[Diff] resulting abstract updates: 1
def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]] ==> def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]]
[Diff] abstracting concrete update:prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(version.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(if.h)],includeN[inc_elem(linux),inc_elem(hdlc.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(farsync.h)],mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(fst_q_work_item),funtype[fulltype[ctype[btype(void)]],param[reg(),name(queue),fulltype[typec(N/H)]],param[reg(),name(card_index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(mask),binary[aop(N/H),const_i(1),ident(card_index)]]],estmt[assign[op_assi(|=),*expr[ident(queue)],ident(mask)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]]]],def[fname(fst_process_tx_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_process_tx_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_txq),ident(fst_work_txq)]],estmt[assign[simple_assi(=),ident(fst_work_txq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_txq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(Calling tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_txq),binary[aop(N/H),ident(work_txq),const_i(1)]]]]]]],def[fname(fst_process_int_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_INTR),const_s(fst_process_int_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_intq),ident(fst_work_intq)]],estmt[assign[simple_assi(=),ident(fst_work_intq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_intq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Calling rx & tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_rx),array_a[ident(fst_card_array),ident(i)]]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_intq),binary[aop(N/H),ident(work_intq),const_i(1)]]]]]]],def[fname(fst_cpureset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[call[ident(pci_read_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),&expr[ident(interrupt_line_register)]],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in reading interrupt line register\n)]]],estmt(NONE)],estmt[call[ident(outw),const_i(0x440f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x240f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],sel_if[call[ident(pci_write_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),ident(interrupt_line_register)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in writing interrupt line register\n)]]],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(regval),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),const_i(0x40000000)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),expr(N/H)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]]]]],def[fname(fst_cpurelease),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(outw),const_i(0x040e),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]]],{}stmt[estmt[expr(N/H)]]]]],def[fname(fst_clear_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_enable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x0f0c0900),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_disable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x00000000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_process_rx_status),funtype[fulltype[ctype[btype(void)]],param[reg(),name(rx_status),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H)]],def[fname(fst_init_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(pci_set_master),->expr[ident(card),ident(device)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE0)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE1)]]],estmt[call[ident(outl),const_i(0x0),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMATHR)]]]],estmt(NONE)]]],def[fname(fst_tx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(txpos),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_tx_dma_complete\n)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),->expr[ident(port),ident(index)]],ident(txpos)],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]]],def[fname(farsync_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_HOST)]],st_return[call[ident(htons),ident(ETH_P_CUST)]]]],def[fname(fst_rx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_rx_dma_complete\n)]],estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),ident(len)],->expr[ident(card),ident(rx_dma_handle_host)],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing the frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(fst_rx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(In fst_rx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_rx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR0)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR0)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ0)]]],estmt[call[ident(outl),const_i(0x00000000c),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR0)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]]],def[fname(fst_tx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(In fst_tx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmatx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_tx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR1)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR1)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ1)]]],estmt[call[ident(outl),const_i(0x000000004),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR1)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]]],def[fname(fst_issue_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]],estmt[assign[simple_assi(=),ident(safety),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(schedule_timeout_uninterruptible),const_i(1)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Mailbox safety timeout\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(Mailbox clear after %d jiffies\n),ident(safety)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(issue_cmd: previous command was NAK'd\n)]]],estmt(NONE)],estmt[call[ident(FST_WRW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)],ident(cmd)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_op_raise),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[op_assi(|=),ident(outputs),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_op_lower),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),ident(outputs),binary[aop(N/H),expr(N/H),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_rx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bcnt)],call[ident(cnv_bcnt),ident(LEN_RX_BUFFER)]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(mcnt)],ident(LEN_RX_BUFFER)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bits)],ident(DMA_OWN)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_tx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bcnt)],const_i(0)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bits)],const_i(0)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_intr_te1_alarm),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(los),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),ident(rra),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),ident(ais),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]],sel_if[ident(los),{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier off\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier on\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]],sel_if[ident(los),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert LOS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert LOS Alarm\n)]]],sel_if[ident(rra),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert RRA Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert RRA Alarm\n)]]],sel_if[ident(ais),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert AIS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert AIS Alarm\n)]]]]],def[fname(fst_intr_ctlchg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),ident(card),array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD active\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD lost\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]]]],def[fname(fst_log_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[expr(N/H)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_OFLO)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx fifo error on card %d port %d buffer %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)],ident(rxp)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_CRC)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx crc error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_FRAM)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx frame error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx length error (%d) on card %d port %d\n),ident(len),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)]]],def[fname(fst_recover_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(i),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const(N/H)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(DMA Bits of next buffer was %x\n),ident(dmabits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(There were %d subsequent buffers in error\n),ident(i)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)]],def[fname(fst_intr_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(rxp),->expr[ident(port),ident(rxpos)]]],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],sel_if[binary[aop(N/H),ident(dmabits),ident(DMA_OWN)],{}stmt[estmt[call[ident(dbg),binary[aop(N/H),ident(DBG_RX),ident(DBG_INTR)],const_s(intr_rx: No buffer port %d pos %d\n),ident(pi),ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(len),call[ident(FST_RDW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(mcnt)]]]],estmt[assign[op_assi(-=),ident(len),const_i(2)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Frame received with 0 length. Card %d Port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: %d,%d: flags %x len %d\n),ident(pi),ident(rxp),ident(dmabits),ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_log_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],estmt[call[ident(fst_recover_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: can't allocate buffer\n)]],estmt[expr(N/H)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_fromio),call[ident(skb_put),ident(skb),ident(len)],binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(rxp)],const_i(0)]]],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_skb_rx)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_rx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_rx)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_rxpos)],ident(rxp)]],estmt[call[ident(fst_rx_dma),ident(card),expr(N/H),expr(N/H),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(About to increment rxpos by more than 1\n)]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(rxp = %d rxpos = %d\n),ident(rxp),->expr[ident(port),ident(rxpos)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]]]],def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]],def[fname(do_bottom_half_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_RX),const_s(do_bottom_half_rx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(fst_intr_rx),ident(card),ident(port)]],estmt[expr(N/H)]]]]]]],def[fname(fst_intr),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: spurious %d\n),ident(irq)]],st_return[ident(IRQ_NONE)]],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: %d %p\n),ident(irq),ident(card)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Interrupt received for card %d in a non running state (%d)\n),->expr[ident(card),ident(card_no)],->expr[ident(card),ident(state)]]],estmt[call[ident(fst_clear_intr),ident(card)]],st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_clear_intr),ident(card)]],estmt[assign[simple_assi(=),ident(do_card_interrupt),const_i(0)]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_CARD_INT)]],estmt[call[ident(FST_WRB),ident(card),ident(interruptHandshake),const_i(0xEE)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(dma_intcsr),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00200000)],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(DMA Rx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]],estmt[call[ident(fst_rx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_rx)],->expr[ident(card),ident(dma_len_rx)],->expr[ident(card),ident(dma_skb_rx)],->expr[ident(card),ident(dma_rxpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_RX_DMA_INT)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00400000)],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(DMA Tx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]],estmt[call[ident(fst_tx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_tx)],->expr[ident(card),ident(dma_len_tx)],->expr[ident(card),ident(dma_txpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_TX_DMA_INT)]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(int_retry_count),call[ident(FST_RDL),ident(card),ident(interruptRetryCount)]]],sel_if[ident(int_retry_count),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Card %d int_retry_count is  %d\n),->expr[ident(card),ident(card_no)],ident(int_retry_count)]],estmt[call[ident(FST_WRL),ident(card),ident(interruptRetryCount),const_i(0)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],estmt[assign[simple_assi(=),ident(rdidx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(rdindex)]],const_i(0x1f)]]],estmt[assign[simple_assi(=),ident(wridx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(wrindex)]],const_i(0x1f)]]],while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(event),call[ident(FST_RDB),ident(card),array_a[.expr[ident(interruptEvent),ident(evntbuff)],ident(rdidx)]]]],estmt[assign[simple_assi(=),ident(port),&expr[array_a[->expr[ident(card),ident(ports)],binary[aop(N/H),ident(event),const_i(0x03)]]]]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(Processing Interrupt event: %x\n),ident(event)]],statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rdidx),const_i(0)]],estmt(NONE)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(interruptEvent),ident(rdindex)],ident(rdidx)]],st_return[ident(IRQ_HANDLED)]]],def[fname(check_started_ok),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Bad shared memory version %d expected %d\n),call[ident(FST_RDW),ident(card),ident(smcVersion)],ident(SMC_VERSION)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Missing shared memory signature\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_RUNNING)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Firmware initialisation failed. Card halted\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Unknown firmware status 0x%x\n),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_warn),const(N/H),->expr[ident(card),ident(card_no)],call[ident(FST_RDL),ident(card),ident(numberOfPorts)],->expr[ident(card),ident(nports)]]]],estmt(NONE)]]],def[fname(set_conf_from_info),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(err),const_i(0)]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PROTO)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_RAW)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_GEN_HDLC)]]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_CABLE)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_SPEED)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PHASE)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[ident(portConfig),->expr[ident(port),ident(index)]],ident(invertClock)],->expr[ident(info),ident(invertClock)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_MODE)],estmt[call[ident(FST_WRW),ident(card),ident(cardMode),->expr[ident(info),ident(cardMode)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(FST_WRL),ident(card),.expr[ident(suConfig),ident(dataRate)],->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(clocking)],->expr[ident(info),ident(clockSource)]]],estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_T1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_J1)]],estmt(NONE)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(framing)],ident(my_framing)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(structure)],->expr[ident(info),ident(structure)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(interface)],->expr[ident(info),ident(interface)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(coding)],->expr[ident(info),ident(coding)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)],->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(equalizer)],->expr[ident(info),ident(equalizer)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(transparentMode)],->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(loopMode)],->expr[ident(info),ident(loopMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(range)],->expr[ident(info),ident(range)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(txBufferMode)],->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)],->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(startingSlot)],->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(losThreshold)],->expr[ident(info),ident(losThreshold)]]],sel_if[->expr[ident(info),ident(idleCode)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(1)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(0)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(idleCode)],->expr[ident(info),ident(idleCode)]]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(printk),const_s(Setting TE1 data\n)]],estmt[call[ident(printk),const_s(Line Speed = %d\n),->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(printk),const_s(Start slot = %d\n),->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(printk),const_s(Clock source = %d\n),->expr[ident(info),ident(clockSource)]]],estmt[call[ident(printk),const_s(Framing = %d\n),ident(my_framing)]],estmt[call[ident(printk),const_s(Structure = %d\n),->expr[ident(info),ident(structure)]]],estmt[call[ident(printk),const_s(interface = %d\n),->expr[ident(info),ident(interface)]]],estmt[call[ident(printk),const_s(Coding = %d\n),->expr[ident(info),ident(coding)]]],estmt[call[ident(printk),const_s(Line build out = %d\n),->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(printk),const_s(Equaliser = %d\n),->expr[ident(info),ident(equalizer)]]],estmt[call[ident(printk),const_s(Transparent mode = %d\n),->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(printk),const_s(Loop mode = %d\n),->expr[ident(info),ident(loopMode)]]],estmt[call[ident(printk),const_s(Range = %d\n),->expr[ident(info),ident(range)]]],estmt[call[ident(printk),const_s(Tx Buffer mode = %d\n),->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(printk),const_s(Rx Buffer mode = %d\n),->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(printk),const_s(LOS Threshold = %d\n),->expr[ident(info),ident(losThreshold)]]],estmt[call[ident(printk),const_s(Idle Code = %d\n),->expr[ident(info),ident(idleCode)]]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_DEBUG)],{}stmt[estmt[assign[simple_assi(=),ident(fst_debug_mask),->expr[ident(info),ident(debug)]]]],estmt(NONE)],st_return[ident(err)]]],def[fname(gather_conf_info),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(memset),ident(info),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(kernelVersion)],ident(LINUX_VERSION_CODE)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(nports)],->expr[ident(card),ident(nports)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(type)],->expr[ident(card),ident(type)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(state)],->expr[ident(card),ident(state)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(proto)],ident(FST_GEN_HDLC)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(index)],ident(i)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(debug)],ident(fst_debug_mask)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(valid)],binary[aop(N/H),condexpr3[expr(N/H),ident(FSTVAL_ALL),ident(FSTVAL_CARD)],ident(FSTVAL_DEBUG)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineInterface)],call[ident(FST_RDW),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineInterface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(internalClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(internalClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(invertClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(invertClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24IpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24IpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24OpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24OpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockStatus)],call[ident(FST_RDW),ident(card),array_a[ident(clockStatus),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],call[ident(FST_RDW),ident(card),ident(cableStatus)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cardMode)],call[ident(FST_RDW),ident(card),ident(cardMode)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(smcFirmwareVersion)],call[ident(FST_RDL),ident(card),ident(smcFirmwareVersion)]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[ident(suConfig),ident(dataRate)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockSource)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(clocking)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framing)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(framing)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(structure)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(structure)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(interface)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(interface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(coding)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(coding)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineBuildOut)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(equalizer)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(equalizer)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(loopMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(loopMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(range)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(range)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(txBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(txBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(rxBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(startingSlot)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(startingSlot)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(losThreshold)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(losThreshold)]]]],sel_if[call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(idleCode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],const_i(0)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveBufferDelay)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(receiveBufferDelay)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framingErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(framingErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(codeViolationCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(codeViolationCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(crcErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(crcErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineAttenuation)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(lineAttenuation)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lossOfSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveRemoteAlarm)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(alarmIndicationSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]]],estmt(NONE)]]],def[fname(fst_set_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(copy_from_user),&expr[ident(sync)],.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[.expr[ident(sync),ident(loopback)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],statem(N/H),statem(N/H),estmt[call[ident(FST_WRL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)],.expr[ident(sync),ident(clock_rate)]]],st_return[const_i(0)]]],def[fname(fst_get_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_rate)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_type)],condexpr3[expr(N/H),ident(CLOCK_INT),ident(CLOCK_EXT)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(loopback)],const_i(0)]],sel_if[call[ident(copy_to_user),.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],&expr[ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(ifr),ident(ifr_settings)],ident(size)],sizeof_expr[ident(sync)]]],st_return[const_i(0)]]],def[fname(fst_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_IOCTL),const_s(ioctl: %x, %p\n),ident(cmd),->expr[ident(ifr),ident(ifr_data)]]],estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],statem(N/H)]],def[fname(fst_openport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(open: found port already running\n)]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]]],estmt(NONE)],estmt[call[ident(fst_rx_config),ident(port)]],estmt[call[ident(fst_tx_config),ident(port)]],estmt[call[ident(fst_op_raise),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STARTPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(1)]],estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt[assign[simple_assi(=),ident(txq_length),binary[aop(-),->expr[ident(port),ident(txqe)],->expr[ident(port),ident(txqs)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)]]],def[fname(fst_closeport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]],estmt[call[ident(fst_op_lower),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]]],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(close: port not running\n)]]]]],estmt(NONE)]]],def[fname(fst_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(err),call[ident(hdlc_open),ident(dev)]]],sel_if[ident(err),st_return[ident(err)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(fst_openport),ident(port)]],estmt[call[ident(netif_wake_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(fst_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[assign[simple_assi(=),ident(tx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]],estmt[assign[simple_assi(=),ident(rx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]],estmt[call[ident(dbg),ident(DBG_OPEN),const_s(Port Close: tx_dma_in_progress = %d (%x) rx_dma_in_progress = %d (%x)\n),->expr[ident(card),ident(dmatx_in_progress)],ident(tx_dma_done),->expr[ident(card),ident(dmarx_in_progress)],ident(rx_dma_done)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(fst_closeport),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(hdlc_close),ident(dev)]]],estmt(NONE)],estmt[call[ident(module_put),ident(THIS_MODULE)]],st_return[const_i(0)]]],def[fname(fst_attach),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(encoding),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(parity),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[const_i(0)]]],def[fname(fst_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx timeout card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(ABORTTX)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],estmt[call[ident(netif_wake_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]]],def[fname(fst_start_xmit),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_start_xmit: length = %d\n),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tried to transmit but no carrier on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Packet too large %d vs %d\n),->expr[ident(skb),ident(len)],ident(LEN_TX_BUFFER)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx queue overflow card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqe)]],ident(skb)]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_txq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_tx_task)]]],st_return[const_i(0)]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(version.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(if.h)],includeN[inc_elem(linux),inc_elem(hdlc.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(farsync.h)],mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(fst_q_work_item),funtype[fulltype[ctype[btype(void)]],param[reg(),name(queue),fulltype[typec(N/H)]],param[reg(),name(card_index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(mask),binary[aop(N/H),const_i(1),ident(card_index)]]],estmt[assign[op_assi(|=),*expr[ident(queue)],ident(mask)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]]]],def[fname(fst_process_tx_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_process_tx_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_txq),ident(fst_work_txq)]],estmt[assign[simple_assi(=),ident(fst_work_txq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_txq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(Calling tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_txq),binary[aop(N/H),ident(work_txq),const_i(1)]]]]]]],def[fname(fst_process_int_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_INTR),const_s(fst_process_int_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_intq),ident(fst_work_intq)]],estmt[assign[simple_assi(=),ident(fst_work_intq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_intq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Calling rx & tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_rx),array_a[ident(fst_card_array),ident(i)]]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_intq),binary[aop(N/H),ident(work_intq),const_i(1)]]]]]]],def[fname(fst_cpureset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[call[ident(pci_read_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),&expr[ident(interrupt_line_register)]],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in reading interrupt line register\n)]]],estmt(NONE)],estmt[call[ident(outw),const_i(0x440f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x240f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],sel_if[call[ident(pci_write_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),ident(interrupt_line_register)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in writing interrupt line register\n)]]],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(regval),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),const_i(0x40000000)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),expr(N/H)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]]]]],def[fname(fst_cpurelease),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(outw),const_i(0x040e),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]]],{}stmt[estmt[expr(N/H)]]]]],def[fname(fst_clear_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_enable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x0f0c0900),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_disable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x00000000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_process_rx_status),funtype[fulltype[ctype[btype(void)]],param[reg(),name(rx_status),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H)]],def[fname(fst_init_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(pci_set_master),->expr[ident(card),ident(device)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE0)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE1)]]],estmt[call[ident(outl),const_i(0x0),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMATHR)]]]],estmt(NONE)]]],def[fname(fst_tx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(txpos),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_tx_dma_complete\n)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),->expr[ident(port),ident(index)]],ident(txpos)],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]]],def[fname(farsync_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_HOST)]],st_return[call[ident(htons),ident(ETH_P_CUST)]]]],def[fname(fst_rx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_rx_dma_complete\n)]],estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),ident(len)],->expr[ident(card),ident(rx_dma_handle_host)],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing the frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(fst_rx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(In fst_rx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_rx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR0)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR0)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ0)]]],estmt[call[ident(outl),const_i(0x00000000c),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR0)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]]],def[fname(fst_tx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(In fst_tx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmatx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_tx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR1)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR1)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ1)]]],estmt[call[ident(outl),const_i(0x000000004),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR1)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]]],def[fname(fst_issue_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]],estmt[assign[simple_assi(=),ident(safety),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(schedule_timeout_uninterruptible),const_i(1)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Mailbox safety timeout\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(Mailbox clear after %d jiffies\n),ident(safety)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(issue_cmd: previous command was NAK'd\n)]]],estmt(NONE)],estmt[call[ident(FST_WRW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)],ident(cmd)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_op_raise),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[op_assi(|=),ident(outputs),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_op_lower),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),ident(outputs),binary[aop(N/H),expr(N/H),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_rx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bcnt)],call[ident(cnv_bcnt),ident(LEN_RX_BUFFER)]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(mcnt)],ident(LEN_RX_BUFFER)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bits)],ident(DMA_OWN)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_tx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bcnt)],const_i(0)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bits)],const_i(0)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_intr_te1_alarm),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(los),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),ident(rra),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),ident(ais),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]],sel_if[ident(los),{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier off\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier on\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]],sel_if[ident(los),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert LOS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert LOS Alarm\n)]]],sel_if[ident(rra),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert RRA Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert RRA Alarm\n)]]],sel_if[ident(ais),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert AIS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert AIS Alarm\n)]]]]],def[fname(fst_intr_ctlchg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),ident(card),array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD active\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD lost\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]]]],def[fname(fst_log_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[expr(N/H)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_OFLO)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx fifo error on card %d port %d buffer %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)],ident(rxp)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_CRC)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx crc error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_FRAM)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx frame error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx length error (%d) on card %d port %d\n),ident(len),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)]]],def[fname(fst_recover_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(i),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const(N/H)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(DMA Bits of next buffer was %x\n),ident(dmabits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(There were %d subsequent buffers in error\n),ident(i)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)]],def[fname(fst_intr_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(rxp),->expr[ident(port),ident(rxpos)]]],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],sel_if[binary[aop(N/H),ident(dmabits),ident(DMA_OWN)],{}stmt[estmt[call[ident(dbg),binary[aop(N/H),ident(DBG_RX),ident(DBG_INTR)],const_s(intr_rx: No buffer port %d pos %d\n),ident(pi),ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(len),call[ident(FST_RDW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(mcnt)]]]],estmt[assign[op_assi(-=),ident(len),const_i(2)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Frame received with 0 length. Card %d Port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: %d,%d: flags %x len %d\n),ident(pi),ident(rxp),ident(dmabits),ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_log_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],estmt[call[ident(fst_recover_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: can't allocate buffer\n)]],estmt[expr(N/H)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_fromio),call[ident(skb_put),ident(skb),ident(len)],binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(rxp)],const_i(0)]]],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_skb_rx)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_rx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_rx)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_rxpos)],ident(rxp)]],estmt[call[ident(fst_rx_dma),ident(card),expr(N/H),expr(N/H),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(About to increment rxpos by more than 1\n)]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(rxp = %d rxpos = %d\n),ident(rxp),->expr[ident(port),ident(rxpos)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]]]],def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]],def[fname(do_bottom_half_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_RX),const_s(do_bottom_half_rx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(fst_intr_rx),ident(card),ident(port)]],estmt[expr(N/H)]]]]]]],def[fname(fst_intr),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: spurious %d\n),ident(irq)]],st_return[ident(IRQ_NONE)]],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: %d %p\n),ident(irq),ident(card)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Interrupt received for card %d in a non running state (%d)\n),->expr[ident(card),ident(card_no)],->expr[ident(card),ident(state)]]],estmt[call[ident(fst_clear_intr),ident(card)]],st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_clear_intr),ident(card)]],estmt[assign[simple_assi(=),ident(do_card_interrupt),const_i(0)]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_CARD_INT)]],estmt[call[ident(FST_WRB),ident(card),ident(interruptHandshake),const_i(0xEE)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(dma_intcsr),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00200000)],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(DMA Rx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]],estmt[call[ident(fst_rx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_rx)],->expr[ident(card),ident(dma_len_rx)],->expr[ident(card),ident(dma_skb_rx)],->expr[ident(card),ident(dma_rxpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_RX_DMA_INT)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00400000)],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(DMA Tx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]],estmt[call[ident(fst_tx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_tx)],->expr[ident(card),ident(dma_len_tx)],->expr[ident(card),ident(dma_txpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_TX_DMA_INT)]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(int_retry_count),call[ident(FST_RDL),ident(card),ident(interruptRetryCount)]]],sel_if[ident(int_retry_count),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Card %d int_retry_count is  %d\n),->expr[ident(card),ident(card_no)],ident(int_retry_count)]],estmt[call[ident(FST_WRL),ident(card),ident(interruptRetryCount),const_i(0)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],estmt[assign[simple_assi(=),ident(rdidx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(rdindex)]],const_i(0x1f)]]],estmt[assign[simple_assi(=),ident(wridx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(wrindex)]],const_i(0x1f)]]],while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(event),call[ident(FST_RDB),ident(card),array_a[.expr[ident(interruptEvent),ident(evntbuff)],ident(rdidx)]]]],estmt[assign[simple_assi(=),ident(port),&expr[array_a[->expr[ident(card),ident(ports)],binary[aop(N/H),ident(event),const_i(0x03)]]]]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(Processing Interrupt event: %x\n),ident(event)]],statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rdidx),const_i(0)]],estmt(NONE)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(interruptEvent),ident(rdindex)],ident(rdidx)]],st_return[ident(IRQ_HANDLED)]]],def[fname(check_started_ok),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Bad shared memory version %d expected %d\n),call[ident(FST_RDW),ident(card),ident(smcVersion)],ident(SMC_VERSION)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Missing shared memory signature\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_RUNNING)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Firmware initialisation failed. Card halted\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Unknown firmware status 0x%x\n),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_warn),const(N/H),->expr[ident(card),ident(card_no)],call[ident(FST_RDL),ident(card),ident(numberOfPorts)],->expr[ident(card),ident(nports)]]]],estmt(NONE)]]],def[fname(set_conf_from_info),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(err),const_i(0)]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PROTO)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_RAW)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_GEN_HDLC)]]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_CABLE)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_SPEED)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PHASE)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[ident(portConfig),->expr[ident(port),ident(index)]],ident(invertClock)],->expr[ident(info),ident(invertClock)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_MODE)],estmt[call[ident(FST_WRW),ident(card),ident(cardMode),->expr[ident(info),ident(cardMode)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(FST_WRL),ident(card),.expr[ident(suConfig),ident(dataRate)],->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(clocking)],->expr[ident(info),ident(clockSource)]]],estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_T1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_J1)]],estmt(NONE)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(framing)],ident(my_framing)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(structure)],->expr[ident(info),ident(structure)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(interface)],->expr[ident(info),ident(interface)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(coding)],->expr[ident(info),ident(coding)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)],->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(equalizer)],->expr[ident(info),ident(equalizer)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(transparentMode)],->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(loopMode)],->expr[ident(info),ident(loopMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(range)],->expr[ident(info),ident(range)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(txBufferMode)],->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)],->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(startingSlot)],->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(losThreshold)],->expr[ident(info),ident(losThreshold)]]],sel_if[->expr[ident(info),ident(idleCode)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(1)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(0)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(idleCode)],->expr[ident(info),ident(idleCode)]]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(printk),const_s(Setting TE1 data\n)]],estmt[call[ident(printk),const_s(Line Speed = %d\n),->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(printk),const_s(Start slot = %d\n),->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(printk),const_s(Clock source = %d\n),->expr[ident(info),ident(clockSource)]]],estmt[call[ident(printk),const_s(Framing = %d\n),ident(my_framing)]],estmt[call[ident(printk),const_s(Structure = %d\n),->expr[ident(info),ident(structure)]]],estmt[call[ident(printk),const_s(interface = %d\n),->expr[ident(info),ident(interface)]]],estmt[call[ident(printk),const_s(Coding = %d\n),->expr[ident(info),ident(coding)]]],estmt[call[ident(printk),const_s(Line build out = %d\n),->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(printk),const_s(Equaliser = %d\n),->expr[ident(info),ident(equalizer)]]],estmt[call[ident(printk),const_s(Transparent mode = %d\n),->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(printk),const_s(Loop mode = %d\n),->expr[ident(info),ident(loopMode)]]],estmt[call[ident(printk),const_s(Range = %d\n),->expr[ident(info),ident(range)]]],estmt[call[ident(printk),const_s(Tx Buffer mode = %d\n),->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(printk),const_s(Rx Buffer mode = %d\n),->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(printk),const_s(LOS Threshold = %d\n),->expr[ident(info),ident(losThreshold)]]],estmt[call[ident(printk),const_s(Idle Code = %d\n),->expr[ident(info),ident(idleCode)]]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_DEBUG)],{}stmt[estmt[assign[simple_assi(=),ident(fst_debug_mask),->expr[ident(info),ident(debug)]]]],estmt(NONE)],st_return[ident(err)]]],def[fname(gather_conf_info),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(memset),ident(info),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(kernelVersion)],ident(LINUX_VERSION_CODE)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(nports)],->expr[ident(card),ident(nports)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(type)],->expr[ident(card),ident(type)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(state)],->expr[ident(card),ident(state)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(proto)],ident(FST_GEN_HDLC)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(index)],ident(i)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(debug)],ident(fst_debug_mask)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(valid)],binary[aop(N/H),condexpr3[expr(N/H),ident(FSTVAL_ALL),ident(FSTVAL_CARD)],ident(FSTVAL_DEBUG)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineInterface)],call[ident(FST_RDW),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineInterface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(internalClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(internalClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(invertClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(invertClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24IpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24IpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24OpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24OpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockStatus)],call[ident(FST_RDW),ident(card),array_a[ident(clockStatus),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],call[ident(FST_RDW),ident(card),ident(cableStatus)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cardMode)],call[ident(FST_RDW),ident(card),ident(cardMode)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(smcFirmwareVersion)],call[ident(FST_RDL),ident(card),ident(smcFirmwareVersion)]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[ident(suConfig),ident(dataRate)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockSource)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(clocking)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framing)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(framing)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(structure)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(structure)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(interface)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(interface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(coding)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(coding)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineBuildOut)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(equalizer)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(equalizer)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(loopMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(loopMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(range)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(range)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(txBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(txBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(rxBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(startingSlot)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(startingSlot)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(losThreshold)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(losThreshold)]]]],sel_if[call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(idleCode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],const_i(0)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveBufferDelay)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(receiveBufferDelay)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framingErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(framingErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(codeViolationCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(codeViolationCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(crcErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(crcErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineAttenuation)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(lineAttenuation)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lossOfSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveRemoteAlarm)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(alarmIndicationSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]]],estmt(NONE)]]],def[fname(fst_set_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(copy_from_user),&expr[ident(sync)],.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[.expr[ident(sync),ident(loopback)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],statem(N/H),statem(N/H),estmt[call[ident(FST_WRL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)],.expr[ident(sync),ident(clock_rate)]]],st_return[const_i(0)]]],def[fname(fst_get_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_rate)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_type)],condexpr3[expr(N/H),ident(CLOCK_INT),ident(CLOCK_EXT)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(loopback)],const_i(0)]],sel_if[call[ident(copy_to_user),.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],&expr[ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(ifr),ident(ifr_settings)],ident(size)],sizeof_expr[ident(sync)]]],st_return[const_i(0)]]],def[fname(fst_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_IOCTL),const_s(ioctl: %x, %p\n),ident(cmd),->expr[ident(ifr),ident(ifr_data)]]],estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],statem(N/H)]],def[fname(fst_openport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(open: found port already running\n)]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]]],estmt(NONE)],estmt[call[ident(fst_rx_config),ident(port)]],estmt[call[ident(fst_tx_config),ident(port)]],estmt[call[ident(fst_op_raise),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STARTPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(1)]],estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt[assign[simple_assi(=),ident(txq_length),binary[aop(-),->expr[ident(port),ident(txqe)],->expr[ident(port),ident(txqs)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)]]],def[fname(fst_closeport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]],estmt[call[ident(fst_op_lower),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]]],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(close: port not running\n)]]]]],estmt(NONE)]]],def[fname(fst_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(err),call[ident(hdlc_open),ident(dev)]]],sel_if[ident(err),st_return[ident(err)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(fst_openport),ident(port)]],estmt[call[ident(netif_wake_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(fst_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[assign[simple_assi(=),ident(tx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]],estmt[assign[simple_assi(=),ident(rx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]],estmt[call[ident(dbg),ident(DBG_OPEN),const_s(Port Close: tx_dma_in_progress = %d (%x) rx_dma_in_progress = %d (%x)\n),->expr[ident(card),ident(dmatx_in_progress)],ident(tx_dma_done),->expr[ident(card),ident(dmarx_in_progress)],ident(rx_dma_done)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(fst_closeport),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(hdlc_close),ident(dev)]]],estmt(NONE)],estmt[call[ident(module_put),ident(THIS_MODULE)]],st_return[const_i(0)]]],def[fname(fst_attach),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(encoding),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(parity),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[const_i(0)]]],def[fname(fst_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx timeout card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(ABORTTX)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],estmt[call[ident(netif_wake_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]]],def[fname(fst_start_xmit),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_start_xmit: length = %d\n),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tried to transmit but no carrier on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Packet too large %d vs %d\n),->expr[ident(skb),ident(len)],ident(LEN_TX_BUFFER)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx queue overflow card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqe)]],ident(skb)]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_txq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_tx_task)]]],st_return[const_i(0)]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
[Diff] resulting abstract updates: 1
prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(version.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(if.h)],includeN[inc_elem(linux),inc_elem(hdlc.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(farsync.h)],mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(fst_q_work_item),funtype[fulltype[ctype[btype(void)]],param[reg(),name(queue),fulltype[typec(N/H)]],param[reg(),name(card_index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(mask),binary[aop(N/H),const_i(1),ident(card_index)]]],estmt[assign[op_assi(|=),*expr[ident(queue)],ident(mask)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]]]],def[fname(fst_process_tx_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_process_tx_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_txq),ident(fst_work_txq)]],estmt[assign[simple_assi(=),ident(fst_work_txq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_txq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(Calling tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_txq),binary[aop(N/H),ident(work_txq),const_i(1)]]]]]]],def[fname(fst_process_int_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_INTR),const_s(fst_process_int_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_intq),ident(fst_work_intq)]],estmt[assign[simple_assi(=),ident(fst_work_intq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_intq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Calling rx & tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_rx),array_a[ident(fst_card_array),ident(i)]]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_intq),binary[aop(N/H),ident(work_intq),const_i(1)]]]]]]],def[fname(fst_cpureset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[call[ident(pci_read_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),&expr[ident(interrupt_line_register)]],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in reading interrupt line register\n)]]],estmt(NONE)],estmt[call[ident(outw),const_i(0x440f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x240f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],sel_if[call[ident(pci_write_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),ident(interrupt_line_register)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in writing interrupt line register\n)]]],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(regval),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),const_i(0x40000000)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),expr(N/H)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]]]]],def[fname(fst_cpurelease),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(outw),const_i(0x040e),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]]],{}stmt[estmt[expr(N/H)]]]]],def[fname(fst_clear_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_enable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x0f0c0900),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_disable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x00000000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_process_rx_status),funtype[fulltype[ctype[btype(void)]],param[reg(),name(rx_status),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H)]],def[fname(fst_init_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(pci_set_master),->expr[ident(card),ident(device)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE0)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE1)]]],estmt[call[ident(outl),const_i(0x0),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMATHR)]]]],estmt(NONE)]]],def[fname(fst_tx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(txpos),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_tx_dma_complete\n)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),->expr[ident(port),ident(index)]],ident(txpos)],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]]],def[fname(farsync_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_HOST)]],st_return[call[ident(htons),ident(ETH_P_CUST)]]]],def[fname(fst_rx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_rx_dma_complete\n)]],estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),ident(len)],->expr[ident(card),ident(rx_dma_handle_host)],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing the frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(fst_rx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(In fst_rx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_rx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR0)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR0)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ0)]]],estmt[call[ident(outl),const_i(0x00000000c),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR0)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]]],def[fname(fst_tx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(In fst_tx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmatx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_tx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR1)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR1)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ1)]]],estmt[call[ident(outl),const_i(0x000000004),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR1)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]]],def[fname(fst_issue_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]],estmt[assign[simple_assi(=),ident(safety),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(schedule_timeout_uninterruptible),const_i(1)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Mailbox safety timeout\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(Mailbox clear after %d jiffies\n),ident(safety)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(issue_cmd: previous command was NAK'd\n)]]],estmt(NONE)],estmt[call[ident(FST_WRW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)],ident(cmd)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_op_raise),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[op_assi(|=),ident(outputs),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_op_lower),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),ident(outputs),binary[aop(N/H),expr(N/H),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_rx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bcnt)],call[ident(cnv_bcnt),ident(LEN_RX_BUFFER)]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(mcnt)],ident(LEN_RX_BUFFER)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bits)],ident(DMA_OWN)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_tx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bcnt)],const_i(0)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bits)],const_i(0)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_intr_te1_alarm),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(los),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),ident(rra),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),ident(ais),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]],sel_if[ident(los),{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier off\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier on\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]],sel_if[ident(los),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert LOS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert LOS Alarm\n)]]],sel_if[ident(rra),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert RRA Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert RRA Alarm\n)]]],sel_if[ident(ais),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert AIS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert AIS Alarm\n)]]]]],def[fname(fst_intr_ctlchg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),ident(card),array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD active\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD lost\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]]]],def[fname(fst_log_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[expr(N/H)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_OFLO)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx fifo error on card %d port %d buffer %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)],ident(rxp)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_CRC)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx crc error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_FRAM)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx frame error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx length error (%d) on card %d port %d\n),ident(len),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)]]],def[fname(fst_recover_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(i),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const(N/H)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(DMA Bits of next buffer was %x\n),ident(dmabits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(There were %d subsequent buffers in error\n),ident(i)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)]],def[fname(fst_intr_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(rxp),->expr[ident(port),ident(rxpos)]]],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],sel_if[binary[aop(N/H),ident(dmabits),ident(DMA_OWN)],{}stmt[estmt[call[ident(dbg),binary[aop(N/H),ident(DBG_RX),ident(DBG_INTR)],const_s(intr_rx: No buffer port %d pos %d\n),ident(pi),ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(len),call[ident(FST_RDW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(mcnt)]]]],estmt[assign[op_assi(-=),ident(len),const_i(2)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Frame received with 0 length. Card %d Port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: %d,%d: flags %x len %d\n),ident(pi),ident(rxp),ident(dmabits),ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_log_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],estmt[call[ident(fst_recover_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: can't allocate buffer\n)]],estmt[expr(N/H)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_fromio),call[ident(skb_put),ident(skb),ident(len)],binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(rxp)],const_i(0)]]],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_skb_rx)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_rx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_rx)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_rxpos)],ident(rxp)]],estmt[call[ident(fst_rx_dma),ident(card),expr(N/H),expr(N/H),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(About to increment rxpos by more than 1\n)]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(rxp = %d rxpos = %d\n),ident(rxp),->expr[ident(port),ident(rxpos)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]]]],def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(memcpy),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]],def[fname(do_bottom_half_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_RX),const_s(do_bottom_half_rx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(fst_intr_rx),ident(card),ident(port)]],estmt[expr(N/H)]]]]]]],def[fname(fst_intr),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: spurious %d\n),ident(irq)]],st_return[ident(IRQ_NONE)]],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: %d %p\n),ident(irq),ident(card)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Interrupt received for card %d in a non running state (%d)\n),->expr[ident(card),ident(card_no)],->expr[ident(card),ident(state)]]],estmt[call[ident(fst_clear_intr),ident(card)]],st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_clear_intr),ident(card)]],estmt[assign[simple_assi(=),ident(do_card_interrupt),const_i(0)]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_CARD_INT)]],estmt[call[ident(FST_WRB),ident(card),ident(interruptHandshake),const_i(0xEE)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(dma_intcsr),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00200000)],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(DMA Rx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]],estmt[call[ident(fst_rx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_rx)],->expr[ident(card),ident(dma_len_rx)],->expr[ident(card),ident(dma_skb_rx)],->expr[ident(card),ident(dma_rxpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_RX_DMA_INT)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00400000)],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(DMA Tx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]],estmt[call[ident(fst_tx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_tx)],->expr[ident(card),ident(dma_len_tx)],->expr[ident(card),ident(dma_txpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_TX_DMA_INT)]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(int_retry_count),call[ident(FST_RDL),ident(card),ident(interruptRetryCount)]]],sel_if[ident(int_retry_count),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Card %d int_retry_count is  %d\n),->expr[ident(card),ident(card_no)],ident(int_retry_count)]],estmt[call[ident(FST_WRL),ident(card),ident(interruptRetryCount),const_i(0)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],estmt[assign[simple_assi(=),ident(rdidx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(rdindex)]],const_i(0x1f)]]],estmt[assign[simple_assi(=),ident(wridx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(wrindex)]],const_i(0x1f)]]],while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(event),call[ident(FST_RDB),ident(card),array_a[.expr[ident(interruptEvent),ident(evntbuff)],ident(rdidx)]]]],estmt[assign[simple_assi(=),ident(port),&expr[array_a[->expr[ident(card),ident(ports)],binary[aop(N/H),ident(event),const_i(0x03)]]]]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(Processing Interrupt event: %x\n),ident(event)]],statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rdidx),const_i(0)]],estmt(NONE)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(interruptEvent),ident(rdindex)],ident(rdidx)]],st_return[ident(IRQ_HANDLED)]]],def[fname(check_started_ok),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Bad shared memory version %d expected %d\n),call[ident(FST_RDW),ident(card),ident(smcVersion)],ident(SMC_VERSION)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Missing shared memory signature\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_RUNNING)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Firmware initialisation failed. Card halted\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Unknown firmware status 0x%x\n),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_warn),const(N/H),->expr[ident(card),ident(card_no)],call[ident(FST_RDL),ident(card),ident(numberOfPorts)],->expr[ident(card),ident(nports)]]]],estmt(NONE)]]],def[fname(set_conf_from_info),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(err),const_i(0)]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PROTO)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_RAW)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_GEN_HDLC)]]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_CABLE)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_SPEED)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PHASE)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[ident(portConfig),->expr[ident(port),ident(index)]],ident(invertClock)],->expr[ident(info),ident(invertClock)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_MODE)],estmt[call[ident(FST_WRW),ident(card),ident(cardMode),->expr[ident(info),ident(cardMode)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(FST_WRL),ident(card),.expr[ident(suConfig),ident(dataRate)],->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(clocking)],->expr[ident(info),ident(clockSource)]]],estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_T1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_J1)]],estmt(NONE)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(framing)],ident(my_framing)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(structure)],->expr[ident(info),ident(structure)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(interface)],->expr[ident(info),ident(interface)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(coding)],->expr[ident(info),ident(coding)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)],->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(equalizer)],->expr[ident(info),ident(equalizer)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(transparentMode)],->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(loopMode)],->expr[ident(info),ident(loopMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(range)],->expr[ident(info),ident(range)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(txBufferMode)],->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)],->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(startingSlot)],->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(losThreshold)],->expr[ident(info),ident(losThreshold)]]],sel_if[->expr[ident(info),ident(idleCode)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(1)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(0)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(idleCode)],->expr[ident(info),ident(idleCode)]]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(printk),const_s(Setting TE1 data\n)]],estmt[call[ident(printk),const_s(Line Speed = %d\n),->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(printk),const_s(Start slot = %d\n),->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(printk),const_s(Clock source = %d\n),->expr[ident(info),ident(clockSource)]]],estmt[call[ident(printk),const_s(Framing = %d\n),ident(my_framing)]],estmt[call[ident(printk),const_s(Structure = %d\n),->expr[ident(info),ident(structure)]]],estmt[call[ident(printk),const_s(interface = %d\n),->expr[ident(info),ident(interface)]]],estmt[call[ident(printk),const_s(Coding = %d\n),->expr[ident(info),ident(coding)]]],estmt[call[ident(printk),const_s(Line build out = %d\n),->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(printk),const_s(Equaliser = %d\n),->expr[ident(info),ident(equalizer)]]],estmt[call[ident(printk),const_s(Transparent mode = %d\n),->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(printk),const_s(Loop mode = %d\n),->expr[ident(info),ident(loopMode)]]],estmt[call[ident(printk),const_s(Range = %d\n),->expr[ident(info),ident(range)]]],estmt[call[ident(printk),const_s(Tx Buffer mode = %d\n),->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(printk),const_s(Rx Buffer mode = %d\n),->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(printk),const_s(LOS Threshold = %d\n),->expr[ident(info),ident(losThreshold)]]],estmt[call[ident(printk),const_s(Idle Code = %d\n),->expr[ident(info),ident(idleCode)]]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_DEBUG)],{}stmt[estmt[assign[simple_assi(=),ident(fst_debug_mask),->expr[ident(info),ident(debug)]]]],estmt(NONE)],st_return[ident(err)]]],def[fname(gather_conf_info),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(memset),ident(info),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(kernelVersion)],ident(LINUX_VERSION_CODE)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(nports)],->expr[ident(card),ident(nports)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(type)],->expr[ident(card),ident(type)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(state)],->expr[ident(card),ident(state)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(proto)],ident(FST_GEN_HDLC)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(index)],ident(i)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(debug)],ident(fst_debug_mask)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(valid)],binary[aop(N/H),condexpr3[expr(N/H),ident(FSTVAL_ALL),ident(FSTVAL_CARD)],ident(FSTVAL_DEBUG)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineInterface)],call[ident(FST_RDW),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineInterface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(internalClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(internalClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(invertClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(invertClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24IpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24IpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24OpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24OpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockStatus)],call[ident(FST_RDW),ident(card),array_a[ident(clockStatus),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],call[ident(FST_RDW),ident(card),ident(cableStatus)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cardMode)],call[ident(FST_RDW),ident(card),ident(cardMode)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(smcFirmwareVersion)],call[ident(FST_RDL),ident(card),ident(smcFirmwareVersion)]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[ident(suConfig),ident(dataRate)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockSource)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(clocking)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framing)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(framing)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(structure)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(structure)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(interface)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(interface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(coding)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(coding)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineBuildOut)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(equalizer)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(equalizer)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(loopMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(loopMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(range)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(range)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(txBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(txBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(rxBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(startingSlot)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(startingSlot)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(losThreshold)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(losThreshold)]]]],sel_if[call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(idleCode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],const_i(0)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveBufferDelay)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(receiveBufferDelay)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framingErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(framingErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(codeViolationCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(codeViolationCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(crcErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(crcErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineAttenuation)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(lineAttenuation)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lossOfSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveRemoteAlarm)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(alarmIndicationSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]]],estmt(NONE)]]],def[fname(fst_set_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(copy_from_user),&expr[ident(sync)],.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[.expr[ident(sync),ident(loopback)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],statem(N/H),statem(N/H),estmt[call[ident(FST_WRL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)],.expr[ident(sync),ident(clock_rate)]]],st_return[const_i(0)]]],def[fname(fst_get_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_rate)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_type)],condexpr3[expr(N/H),ident(CLOCK_INT),ident(CLOCK_EXT)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(loopback)],const_i(0)]],sel_if[call[ident(copy_to_user),.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],&expr[ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(ifr),ident(ifr_settings)],ident(size)],sizeof_expr[ident(sync)]]],st_return[const_i(0)]]],def[fname(fst_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_IOCTL),const_s(ioctl: %x, %p\n),ident(cmd),->expr[ident(ifr),ident(ifr_data)]]],estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],statem(N/H)]],def[fname(fst_openport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(open: found port already running\n)]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]]],estmt(NONE)],estmt[call[ident(fst_rx_config),ident(port)]],estmt[call[ident(fst_tx_config),ident(port)]],estmt[call[ident(fst_op_raise),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STARTPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(1)]],estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt[assign[simple_assi(=),ident(txq_length),binary[aop(-),->expr[ident(port),ident(txqe)],->expr[ident(port),ident(txqs)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)]]],def[fname(fst_closeport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]],estmt[call[ident(fst_op_lower),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]]],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(close: port not running\n)]]]]],estmt(NONE)]]],def[fname(fst_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(err),call[ident(hdlc_open),ident(dev)]]],sel_if[ident(err),st_return[ident(err)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(fst_openport),ident(port)]],estmt[call[ident(netif_wake_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(fst_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[assign[simple_assi(=),ident(tx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]],estmt[assign[simple_assi(=),ident(rx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]],estmt[call[ident(dbg),ident(DBG_OPEN),const_s(Port Close: tx_dma_in_progress = %d (%x) rx_dma_in_progress = %d (%x)\n),->expr[ident(card),ident(dmatx_in_progress)],ident(tx_dma_done),->expr[ident(card),ident(dmarx_in_progress)],ident(rx_dma_done)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(fst_closeport),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(hdlc_close),ident(dev)]]],estmt(NONE)],estmt[call[ident(module_put),ident(THIS_MODULE)]],st_return[const_i(0)]]],def[fname(fst_attach),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(encoding),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(parity),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[const_i(0)]]],def[fname(fst_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx timeout card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(ABORTTX)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],estmt[call[ident(netif_wake_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]]],def[fname(fst_start_xmit),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_start_xmit: length = %d\n),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tried to transmit but no carrier on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Packet too large %d vs %d\n),->expr[ident(skb),ident(len)],ident(LEN_TX_BUFFER)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx queue overflow card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqe)]],ident(skb)]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_txq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_tx_task)]]],st_return[const_i(0)]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)] ==> prg2[includeN[inc_elem(linux),inc_elem(module.h)],includeN[inc_elem(linux),inc_elem(kernel.h)],includeN[inc_elem(linux),inc_elem(version.h)],includeN[inc_elem(linux),inc_elem(pci.h)],includeN[inc_elem(linux),inc_elem(ioport.h)],includeN[inc_elem(linux),inc_elem(init.h)],includeN[inc_elem(linux),inc_elem(if.h)],includeN[inc_elem(linux),inc_elem(hdlc.h)],includeN[inc_elem(asm),inc_elem(io.h)],includeN[inc_elem(asm),inc_elem(uaccess.h)],includeL[inc_elem(farsync.h)],mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),mtop(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),define(N/H),decl(N/H),NCP(N/H),define(N/H),define(N/H),define(N/H),define(N/H),NCP(N/H),mtop(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),decl(N/H),def[fname(fst_q_work_item),funtype[fulltype[ctype[btype(void)]],param[reg(),name(queue),fulltype[typec(N/H)]],param[reg(),name(card_index),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(mask),binary[aop(N/H),const_i(1),ident(card_index)]]],estmt[assign[op_assi(|=),*expr[ident(queue)],ident(mask)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]]]],def[fname(fst_process_tx_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_process_tx_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_txq),ident(fst_work_txq)]],estmt[assign[simple_assi(=),ident(fst_work_txq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_txq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(Calling tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_txq),binary[aop(N/H),ident(work_txq),const_i(1)]]]]]]],def[fname(fst_process_int_work_q),funtype[fulltype[ctype[btype(void)]],param[reg(),name(work_q),fulltype[ctype[btype[itype[sgn(unsigned),base(long)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_INTR),const_s(fst_process_int_work_q\n)]],estmt[call[ident(spin_lock_irqsave),&expr[ident(fst_work_q_lock)],ident(flags)]],estmt[assign[simple_assi(=),ident(work_intq),ident(fst_work_intq)]],estmt[assign[simple_assi(=),ident(fst_work_intq),const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[ident(fst_work_q_lock)],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[sel_if[binary[aop(N/H),ident(work_intq),const_i(0x01)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Calling rx & tx bh for card %d\n),ident(i)]],estmt[call[ident(do_bottom_half_rx),array_a[ident(fst_card_array),ident(i)]]],estmt[call[ident(do_bottom_half_tx),array_a[ident(fst_card_array),ident(i)]]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(work_intq),binary[aop(N/H),ident(work_intq),const_i(1)]]]]]]],def[fname(fst_cpureset),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[call[ident(pci_read_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),&expr[ident(interrupt_line_register)]],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in reading interrupt line register\n)]]],estmt(NONE)],estmt[call[ident(outw),const_i(0x440f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x240f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[assign[simple_assi(=),ident(j),binary[aop(+),ident(jiffies),const_i(1)]]],while[expr(N/H),estmt(NONE)],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],sel_if[call[ident(pci_write_config_byte),->expr[ident(card),ident(device)],ident(PCI_INTERRUPT_LINE),ident(interrupt_line_register)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Error in writing interrupt line register\n)]]],estmt(NONE)]],{}stmt[estmt[assign[simple_assi(=),ident(regval),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),const_i(0x40000000)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]],estmt[call[ident(outl),binary[aop(N/H),ident(regval),expr(N/H)],binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9052)]]]]]]],def[fname(fst_cpurelease),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(outw),const_i(0x040e),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]],estmt[call[ident(outw),const_i(0x040f),binary[aop(+),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(CNTRL_9054)],const_i(2)]]]],{}stmt[estmt[expr(N/H)]]]]],def[fname(fst_clear_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_enable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x0f0c0900),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0543),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_disable_intr),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(outl),const_i(0x00000000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],{}stmt[estmt[call[ident(outw),const_i(0x0000),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9052)]]]]]]],def[fname(fst_process_rx_status),funtype[fulltype[ctype[btype(void)]],param[reg(),name(rx_status),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(name),fulltype[typec(N/H)]]],{}stmt[statem(N/H)]],def[fname(fst_init_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(pci_set_master),->expr[ident(card),ident(device)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE0)]]],estmt[call[ident(outl),const_i(0x00020441),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAMODE1)]]],estmt[call[ident(outl),const_i(0x0),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMATHR)]]]],estmt(NONE)]]],def[fname(fst_tx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(txpos),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_tx_dma_complete\n)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),->expr[ident(port),ident(index)]],ident(txpos)],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]]],def[fname(farsync_type_trans),funtype[fulltype[typec(N/H)],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(skb),ident(dev)],ident(dev)]],estmt[call[ident(skb_reset_mac_header),ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(pkt_type)],ident(PACKET_HOST)]],st_return[call[ident(htons),ident(ETH_P_CUST)]]]],def[fname(fst_rx_dma_complete),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_rx_dma_complete\n)]],estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[call[ident(memcpy),call[ident(skb_put),ident(skb),ident(len)],->expr[ident(card),ident(rx_dma_handle_host)],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing the frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),estmt[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]]],def[fname(fst_rx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(In fst_rx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_rx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR0)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR0)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ0)]]],estmt[call[ident(outl),const_i(0x00000000c),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR0)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]]],def[fname(fst_tx_dma),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(mem),fulltype[typec(N/H)]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(In fst_tx_dma %p %p %d\n),ident(skb),ident(mem),ident(len)]],sel_if[->expr[ident(card),ident(dmatx_in_progress)],{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(In fst_tx_dma while dma in progress\n)]]],estmt(NONE)],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMAPADR1)]]],estmt[call[ident(outl),expr(N/H),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMALADR1)]]],estmt[call[ident(outl),ident(len),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMASIZ1)]]],estmt[call[ident(outl),const_i(0x000000004),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMADPR1)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(1)]],estmt[call[ident(outb),const_i(0x03),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]]],def[fname(fst_issue_cmd),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]],estmt[assign[simple_assi(=),ident(safety),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(schedule_timeout_uninterruptible),const_i(1)]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Mailbox safety timeout\n)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(mbval),call[ident(FST_RDW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)]]]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(Mailbox clear after %d jiffies\n),ident(safety)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_CMD),const_s(issue_cmd: previous command was NAK'd\n)]]],estmt(NONE)],estmt[call[ident(FST_WRW),ident(card),array_a[array_a[ident(portMailbox),->expr[ident(port),ident(index)]],const_i(0)],ident(cmd)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_op_raise),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[op_assi(|=),ident(outputs),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_op_lower),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(outputs),fulltype[ctype[btype[itype[sgn(unsigned),base(int)]]]]]],{}stmt[estmt[assign[simple_assi(=),ident(outputs),binary[aop(N/H),expr(N/H),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]]]]]],estmt[call[ident(FST_WRL),->expr[ident(port),ident(card)],array_a[ident(v24OpSts),->expr[ident(port),ident(index)]],ident(outputs)]],sel_if[->expr[ident(port),ident(run)],estmt[call[ident(fst_issue_cmd),ident(port),ident(SETV24O)]],estmt(NONE)]]],def[fname(fst_rx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bcnt)],call[ident(cnv_bcnt),ident(LEN_RX_BUFFER)]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(mcnt)],ident(LEN_RX_BUFFER)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(i)],ident(bits)],ident(DMA_OWN)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_tx_config),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],for[assign[simple_assi(=),ident(i),const_i(0)],expr(N/H),expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(offset),call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],ident(i)],const_i(0)]]]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(ladr)],expr(N/H)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(hadr)],expr(N/H)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bcnt)],const_i(0)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],ident(i)],ident(bits)],const_i(0)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txipos)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]]]],def[fname(fst_intr_te1_alarm),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(los),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),ident(rra),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),ident(ais),call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]],sel_if[ident(los),{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier off\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(Net carrier on\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]],sel_if[ident(los),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert LOS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert LOS Alarm\n)]]],sel_if[ident(rra),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert RRA Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert RRA Alarm\n)]]],sel_if[ident(ais),estmt[call[ident(dbg),ident(DBG_INTR),const_s(Assert AIS Alarm\n)]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(De-assert AIS Alarm\n)]]]]],def[fname(fst_intr_ctlchg),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),ident(card),array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD active\n)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]],{}stmt[sel_if[call[ident(netif_carrier_ok),call[ident(port_to_dev),ident(port)]],{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(DCD lost\n)]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt(NONE)]]]]],def[fname(fst_log_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[expr(N/H)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_OFLO)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx fifo error on card %d port %d buffer %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)],ident(rxp)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_CRC)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx crc error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dmabits),ident(RX_FRAM)],{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx frame error on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Rx length error (%d) on card %d port %d\n),ident(len),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]]],estmt(NONE)]]],def[fname(fst_recover_rx_error),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(dmabits),fulltype[ctype[btype[itype[sgn(unsigned),base(char2)]]]]],param[reg(),name(rxp),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(len),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(i),const_i(0)]],while[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const(N/H)]],statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(DMA Bits of next buffer was %x\n),ident(dmabits)]]]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(There were %d subsequent buffers in error\n),ident(i)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)]],def[fname(fst_intr_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(pi),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),ident(rxp),->expr[ident(port),ident(rxpos)]]],estmt[assign[simple_assi(=),ident(dmabits),call[ident(FST_RDB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)]]]],sel_if[binary[aop(N/H),ident(dmabits),ident(DMA_OWN)],{}stmt[estmt[call[ident(dbg),binary[aop(N/H),ident(DBG_RX),ident(DBG_INTR)],const_s(intr_rx: No buffer port %d pos %d\n),ident(pi),ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[->expr[ident(card),ident(dmarx_in_progress)],{}stmt[statem(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(len),call[ident(FST_RDW),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(mcnt)]]]],estmt[assign[op_assi(-=),ident(len),const_i(2)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Frame received with 0 length. Card %d Port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: %d,%d: flags %x len %d\n),ident(pi),ident(rxp),ident(dmabits),ident(len)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_log_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],estmt[call[ident(fst_recover_rx_error),ident(card),ident(port),ident(dmabits),ident(rxp),ident(len)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(intr_rx: can't allocate buffer\n)]],estmt[expr(N/H)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_fromio),call[ident(skb_put),ident(skb),ident(len)],binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(rxBuffer),ident(pi)],ident(rxp)],const_i(0)]]],ident(len)]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(rxDescrRing),ident(pi)],ident(rxp)],ident(bits)],ident(DMA_OWN)]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(rx_bytes)],ident(len)]],estmt[call[ident(dbg),ident(DBG_RX),const_s(Pushing frame up the stack\n)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(farsync_type_trans),ident(skb),ident(dev)]]],estmt[assign[simple_assi(=),->expr[ident(skb),ident(protocol)],call[ident(hdlc_type_trans),ident(skb),ident(dev)]]]],estmt[assign[simple_assi(=),ident(rx_status),call[ident(netif_rx),ident(skb)]]],estmt[call[ident(fst_process_rx_status),ident(rx_status),->expr[call[ident(port_to_dev),ident(port)],ident(name)]]],sel_if[expr(N/H),{}stmt[estmt[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),->expr[ident(dev),ident(last_rx)],ident(jiffies)]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_skb_rx)],ident(skb)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_rx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_rx)],ident(len)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_rxpos)],ident(rxp)]],estmt[call[ident(fst_rx_dma),ident(card),expr(N/H),expr(N/H),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(About to increment rxpos by more than 1\n)]],estmt[call[ident(dbg),ident(DBG_ASS),const_s(rxp = %d rxpos = %d\n),ident(rxp),->expr[ident(port),ident(rxpos)]]]],estmt(NONE)],estmt[assign[simple_assi(=),ident(rxp),binary[aop(%),binary[aop(+),ident(rxp),const_i(1)],ident(NUM_RX_BUFFER)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(rxpos)],ident(rxp)]]]],def[fname(do_bottom_half_tx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_TX),const_s(do_bottom_half_tx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],estmt[assign[simple_assi(=),ident(dev),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),ident(stats),call[ident(hdlc_stats),ident(dev)]]],while[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),ident(skb),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqs)]]]],estmt[expr(N/H)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(FST_WRW),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bcnt)],call[ident(cnv_bcnt),->expr[ident(skb),ident(len)]]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(memcpy_toio),binary[aop(+),->expr[ident(card),ident(mem)],call[ident(BUF_OFFSET),array_a[array_a[array_a[ident(txBuffer),ident(pi)],->expr[ident(port),ident(txpos)]],const_i(0)]]],->expr[ident(skb),ident(data)],->expr[ident(skb),ident(len)]]],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[array_a[ident(txDescrRing),ident(pi)],->expr[ident(port),ident(txpos)]],ident(bits)],binary[aop(N/H),binary[aop(N/H),ident(DMA_OWN),ident(TX_STP)],ident(TX_ENP)]]],estmt[expr(N/H)],estmt[assign[op_assi(+=),->expr[ident(stats),ident(tx_bytes)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]]],{}stmt[estmt[call[ident(skb_copy_from_linear_data),ident(skb),->expr[ident(card),ident(tx_dma_handle_host)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_port_tx)],ident(port)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_len_tx)],->expr[ident(skb),ident(len)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dma_txpos)],->expr[ident(port),ident(txpos)]]],estmt[call[ident(fst_tx_dma),ident(card),expr(N/H),expr(N/H),->expr[ident(skb),ident(len)]]]]],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txpos)],const_i(0)]],estmt(NONE)],sel_if[->expr[ident(port),ident(start)],{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_wake_queue),call[ident(port_to_dev),ident(port)]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]],estmt(NONE)]],estmt(NONE)],estmt[call[ident(dev_kfree_skb),ident(skb)]]],{}stmt[statem(N/H)]]]]]]]],def[fname(do_bottom_half_rx),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_RX),const_s(do_bottom_half_rx\n)]],for[expr(N/H),expr(N/H),expr(N/H),{}stmt[sel_if[expr(N/H),statem(N/H),estmt(NONE)],while[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],statem(N/H)],estmt(NONE)],estmt[call[ident(fst_intr_rx),ident(card),ident(port)]],estmt[expr(N/H)]]]]]]],def[fname(fst_intr),funtype[fulltype[typec(N/H)],param[reg(),name(irq),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]],param[reg(),name(dev_id),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: spurious %d\n),ident(irq)]],st_return[ident(IRQ_NONE)]],estmt(NONE)],estmt[call[ident(dbg),ident(DBG_INTR),const_s(intr: %d %p\n),ident(irq),ident(card)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Interrupt received for card %d in a non running state (%d)\n),->expr[ident(card),ident(card_no)],->expr[ident(card),ident(state)]]],estmt[call[ident(fst_clear_intr),ident(card)]],st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_clear_intr),ident(card)]],estmt[assign[simple_assi(=),ident(do_card_interrupt),const_i(0)]],sel_if[expr(N/H),{}stmt[estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_CARD_INT)]],estmt[call[ident(FST_WRB),ident(card),ident(interruptHandshake),const_i(0xEE)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(dma_intcsr),call[ident(inl),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(INTCSR_9054)]]]],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00200000)],{}stmt[estmt[call[ident(dbg),ident(DBG_RX),const_s(DMA Rx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]],estmt[call[ident(fst_rx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_rx)],->expr[ident(card),ident(dma_len_rx)],->expr[ident(card),ident(dma_skb_rx)],->expr[ident(card),ident(dma_rxpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmarx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_RX_DMA_INT)]]],estmt(NONE)],sel_if[binary[aop(N/H),ident(dma_intcsr),const_i(0x00400000)],{}stmt[estmt[call[ident(dbg),ident(DBG_TX),const_s(DMA Tx xfer complete\n)]],estmt[call[ident(outb),const_i(0x8),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]],estmt[call[ident(fst_tx_dma_complete),ident(card),->expr[ident(card),ident(dma_port_tx)],->expr[ident(card),ident(dma_len_tx)],->expr[ident(card),ident(dma_txpos)]]],estmt[assign[simple_assi(=),->expr[ident(card),ident(dmatx_in_progress)],const_i(0)]],estmt[assign[op_assi(+=),ident(do_card_interrupt),ident(FST_TX_DMA_INT)]]],estmt(NONE)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(int_retry_count),call[ident(FST_RDL),ident(card),ident(interruptRetryCount)]]],sel_if[ident(int_retry_count),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Card %d int_retry_count is  %d\n),->expr[ident(card),ident(card_no)],ident(int_retry_count)]],estmt[call[ident(FST_WRL),ident(card),ident(interruptRetryCount),const_i(0)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[ident(IRQ_HANDLED)]],estmt(NONE)],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_intq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_int_task)]]],estmt[assign[simple_assi(=),ident(rdidx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(rdindex)]],const_i(0x1f)]]],estmt[assign[simple_assi(=),ident(wridx),binary[aop(N/H),call[ident(FST_RDB),ident(card),.expr[ident(interruptEvent),ident(wrindex)]],const_i(0x1f)]]],while[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(event),call[ident(FST_RDB),ident(card),array_a[.expr[ident(interruptEvent),ident(evntbuff)],ident(rdidx)]]]],estmt[assign[simple_assi(=),ident(port),&expr[array_a[->expr[ident(card),ident(ports)],binary[aop(N/H),ident(event),const_i(0x03)]]]]],estmt[call[ident(dbg),ident(DBG_INTR),const_s(Processing Interrupt event: %x\n),ident(event)]],statem(N/H),sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(rdidx),const_i(0)]],estmt(NONE)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(interruptEvent),ident(rdindex)],ident(rdidx)]],st_return[ident(IRQ_HANDLED)]]],def[fname(check_started_ok),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]]],{}stmt[statem(N/H),sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Bad shared memory version %d expected %d\n),call[ident(FST_RDW),ident(card),ident(smcVersion)],ident(SMC_VERSION)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Missing shared memory signature\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_BADVERSION)]],statem(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_RUNNING)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Firmware initialisation failed. Card halted\n)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_err),const_s(Unknown firmware status 0x%x\n),ident(i)]],estmt[assign[simple_assi(=),->expr[ident(card),ident(state)],ident(FST_HALTED)]],statem(N/H)],estmt(NONE)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(printk_warn),const(N/H),->expr[ident(card),ident(card_no)],call[ident(FST_RDL),ident(card),ident(numberOfPorts)],->expr[ident(card),ident(nports)]]]],estmt(NONE)]]],def[fname(set_conf_from_info),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(err),const_i(0)]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PROTO)],{}stmt[sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_RAW)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(mode)],ident(FST_GEN_HDLC)]]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_CABLE)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_SPEED)],estmt[assign[simple_assi(=),ident(err),expr(N/H)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_PHASE)],estmt[call[ident(FST_WRB),ident(card),.expr[array_a[ident(portConfig),->expr[ident(port),ident(index)]],ident(invertClock)],->expr[ident(info),ident(invertClock)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_MODE)],estmt[call[ident(FST_WRW),ident(card),ident(cardMode),->expr[ident(info),ident(cardMode)]]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(FST_WRL),ident(card),.expr[ident(suConfig),ident(dataRate)],->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(clocking)],->expr[ident(info),ident(clockSource)]]],estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_E1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_T1)]],estmt(NONE)],sel_if[expr(N/H),estmt[assign[simple_assi(=),ident(my_framing),ident(FRAMING_J1)]],estmt(NONE)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(framing)],ident(my_framing)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(structure)],->expr[ident(info),ident(structure)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(interface)],->expr[ident(info),ident(interface)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(coding)],->expr[ident(info),ident(coding)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)],->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(equalizer)],->expr[ident(info),ident(equalizer)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(transparentMode)],->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(loopMode)],->expr[ident(info),ident(loopMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(range)],->expr[ident(info),ident(range)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(txBufferMode)],->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)],->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(startingSlot)],->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(losThreshold)],->expr[ident(info),ident(losThreshold)]]],sel_if[->expr[ident(info),ident(idleCode)],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(1)]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)],const_i(0)]]],estmt[call[ident(FST_WRB),ident(card),.expr[ident(suConfig),ident(idleCode)],->expr[ident(info),ident(idleCode)]]],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_TE1)],{}stmt[estmt[call[ident(printk),const_s(Setting TE1 data\n)]],estmt[call[ident(printk),const_s(Line Speed = %d\n),->expr[ident(info),ident(lineSpeed)]]],estmt[call[ident(printk),const_s(Start slot = %d\n),->expr[ident(info),ident(startingSlot)]]],estmt[call[ident(printk),const_s(Clock source = %d\n),->expr[ident(info),ident(clockSource)]]],estmt[call[ident(printk),const_s(Framing = %d\n),ident(my_framing)]],estmt[call[ident(printk),const_s(Structure = %d\n),->expr[ident(info),ident(structure)]]],estmt[call[ident(printk),const_s(interface = %d\n),->expr[ident(info),ident(interface)]]],estmt[call[ident(printk),const_s(Coding = %d\n),->expr[ident(info),ident(coding)]]],estmt[call[ident(printk),const_s(Line build out = %d\n),->expr[ident(info),ident(lineBuildOut)]]],estmt[call[ident(printk),const_s(Equaliser = %d\n),->expr[ident(info),ident(equalizer)]]],estmt[call[ident(printk),const_s(Transparent mode = %d\n),->expr[ident(info),ident(transparentMode)]]],estmt[call[ident(printk),const_s(Loop mode = %d\n),->expr[ident(info),ident(loopMode)]]],estmt[call[ident(printk),const_s(Range = %d\n),->expr[ident(info),ident(range)]]],estmt[call[ident(printk),const_s(Tx Buffer mode = %d\n),->expr[ident(info),ident(txBufferMode)]]],estmt[call[ident(printk),const_s(Rx Buffer mode = %d\n),->expr[ident(info),ident(rxBufferMode)]]],estmt[call[ident(printk),const_s(LOS Threshold = %d\n),->expr[ident(info),ident(losThreshold)]]],estmt[call[ident(printk),const_s(Idle Code = %d\n),->expr[ident(info),ident(idleCode)]]]],estmt(NONE)]],estmt(NONE)],sel_if[binary[aop(N/H),->expr[ident(info),ident(valid)],ident(FSTVAL_DEBUG)],{}stmt[estmt[assign[simple_assi(=),ident(fst_debug_mask),->expr[ident(info),ident(debug)]]]],estmt(NONE)],st_return[ident(err)]]],def[fname(gather_conf_info),funtype[fulltype[ctype[btype(void)]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(info),fulltype[typec(N/H)]]],{}stmt[statem(N/H),estmt[call[ident(memset),ident(info),const_i(0),sizeoftype_expr[fulltype[typec(N/H)]]]],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(kernelVersion)],ident(LINUX_VERSION_CODE)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(nports)],->expr[ident(card),ident(nports)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(type)],->expr[ident(card),ident(type)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(state)],->expr[ident(card),ident(state)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(proto)],ident(FST_GEN_HDLC)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(index)],ident(i)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(debug)],ident(fst_debug_mask)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(valid)],binary[aop(N/H),condexpr3[expr(N/H),ident(FSTVAL_ALL),ident(FSTVAL_CARD)],ident(FSTVAL_DEBUG)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineInterface)],call[ident(FST_RDW),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineInterface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(internalClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(internalClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(invertClock)],call[ident(FST_RDB),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(invertClock)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24IpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24IpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(v24OpSts)],call[ident(FST_RDL),ident(card),array_a[ident(v24OpSts),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockStatus)],call[ident(FST_RDW),ident(card),array_a[ident(clockStatus),ident(i)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],call[ident(FST_RDW),ident(card),ident(cableStatus)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cardMode)],call[ident(FST_RDW),ident(card),ident(cardMode)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(smcFirmwareVersion)],call[ident(FST_RDL),ident(card),ident(smcFirmwareVersion)]]],sel_if[expr(N/H),{}stmt[sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]],{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(cableStatus)],binary[aop(N/H),->expr[ident(info),ident(cableStatus)],const_i(1)]]]]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),->expr[ident(info),ident(lineSpeed)],call[ident(FST_RDL),ident(card),.expr[ident(suConfig),ident(dataRate)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(clockSource)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(clocking)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framing)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(framing)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(structure)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(structure)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(interface)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(interface)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(coding)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(coding)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineBuildOut)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(lineBuildOut)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(equalizer)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(equalizer)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(loopMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(loopMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(range)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(range)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(txBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(txBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(rxBufferMode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(rxBufferMode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(startingSlot)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(startingSlot)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(losThreshold)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(losThreshold)]]]],sel_if[call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(enableIdleCode)]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],call[ident(FST_RDB),ident(card),.expr[ident(suConfig),ident(idleCode)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(idleCode)],const_i(0)]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveBufferDelay)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(receiveBufferDelay)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(framingErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(framingErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(codeViolationCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(codeViolationCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(crcErrorCount)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(crcErrorCount)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lineAttenuation)],call[ident(FST_RDL),ident(card),.expr[ident(suStatus),ident(lineAttenuation)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(lossOfSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(lossOfSignal)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(receiveRemoteAlarm)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(receiveRemoteAlarm)]]]],estmt[assign[simple_assi(=),->expr[ident(info),ident(alarmIndicationSignal)],call[ident(FST_RDB),ident(card),.expr[ident(suStatus),ident(alarmIndicationSignal)]]]]],estmt(NONE)]]],def[fname(fst_set_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[call[ident(copy_from_user),&expr[ident(sync)],.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],sel_if[.expr[ident(sync),ident(loopback)],st_return[expr(N/H)],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],statem(N/H),statem(N/H),estmt[call[ident(FST_WRL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)],.expr[ident(sync),ident(clock_rate)]]],st_return[const_i(0)]]],def[fname(fst_get_iface),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(card),fulltype[typec(N/H)]],param[reg(),name(port),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),ident(i),->expr[ident(port),ident(index)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_rate)],call[ident(FST_RDL),ident(card),.expr[array_a[ident(portConfig),ident(i)],ident(lineSpeed)]]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(clock_type)],condexpr3[expr(N/H),ident(CLOCK_INT),ident(CLOCK_EXT)]]],estmt[assign[simple_assi(=),.expr[ident(sync),ident(loopback)],const_i(0)]],sel_if[call[ident(copy_to_user),.expr[.expr[->expr[ident(ifr),ident(ifr_settings)],ident(ifs_ifsu)],ident(sync)],&expr[ident(sync)],sizeof_expr[ident(sync)]],{}stmt[st_return[expr(N/H)]],estmt(NONE)],estmt[assign[simple_assi(=),.expr[->expr[ident(ifr),ident(ifr_settings)],ident(size)],sizeof_expr[ident(sync)]]],st_return[const_i(0)]]],def[fname(fst_ioctl),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(ifr),fulltype[typec(N/H)]],param[reg(),name(cmd),fulltype[ctype[btype[itype[sgn(signed),base(int)]]]]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[call[ident(dbg),ident(DBG_IOCTL),const_s(ioctl: %x, %p\n),ident(cmd),->expr[ident(ifr),ident(ifr_data)]]],estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],statem(N/H)]],def[fname(fst_openport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(open: found port already running\n)]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]]],estmt(NONE)],estmt[call[ident(fst_rx_config),ident(port)]],estmt[call[ident(fst_tx_config),ident(port)]],estmt[call[ident(fst_op_raise),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STARTPORT)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(1)]],estmt[assign[simple_assi(=),ident(signals),call[ident(FST_RDL),->expr[ident(port),ident(card)],array_a[ident(v24DebouncedSts),->expr[ident(port),ident(index)]]]]],sel_if[binary[aop(N/H),ident(signals),condexpr3[expr(N/H),ident(IPSTS_INDICATE),ident(IPSTS_DCD)]],estmt[call[ident(netif_carrier_on),call[ident(port_to_dev),ident(port)]]],estmt[call[ident(netif_carrier_off),call[ident(port_to_dev),ident(port)]]]],estmt[assign[simple_assi(=),ident(txq_length),binary[aop(-),->expr[ident(port),ident(txqe)],->expr[ident(port),ident(txqs)]]]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(txqs)],const_i(0)]]],estmt(NONE)]]],def[fname(fst_closeport),funtype[fulltype[ctype[btype(void)]],param[reg(),name(port),fulltype[typec(N/H)]]],{}stmt[sel_if[expr(N/H),{}stmt[sel_if[->expr[ident(port),ident(run)],{}stmt[estmt[assign[simple_assi(=),->expr[ident(port),ident(run)],const_i(0)]],estmt[call[ident(fst_op_lower),ident(port),binary[aop(N/H),ident(OPSTS_RTS),ident(OPSTS_DTR)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(STOPPORT)]]],{}stmt[estmt[call[ident(dbg),ident(DBG_OPEN),const_s(close: port not running\n)]]]]],estmt(NONE)]]],def[fname(fst_open),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(err),call[ident(hdlc_open),ident(dev)]]],sel_if[ident(err),st_return[ident(err)],estmt(NONE)]],estmt(NONE)],estmt[call[ident(fst_openport),ident(port)]],estmt[call[ident(netif_wake_queue),ident(dev)]],st_return[const_i(0)]]],def[fname(fst_close),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[assign[simple_assi(=),ident(tx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR1)]]]],estmt[assign[simple_assi(=),ident(rx_dma_done),call[ident(inb),binary[aop(+),->expr[ident(card),ident(pci_conf)],ident(DMACSR0)]]]],estmt[call[ident(dbg),ident(DBG_OPEN),const_s(Port Close: tx_dma_in_progress = %d (%x) rx_dma_in_progress = %d (%x)\n),->expr[ident(card),ident(dmatx_in_progress)],ident(tx_dma_done),->expr[ident(card),ident(dmarx_in_progress)],ident(rx_dma_done)]],estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[call[ident(fst_closeport),call[ident(dev_to_port),ident(dev)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(hdlc_close),ident(dev)]]],estmt(NONE)],estmt[call[ident(module_put),ident(THIS_MODULE)]],st_return[const_i(0)]]],def[fname(fst_attach),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(dev),fulltype[typec(N/H)]],param[reg(),name(encoding),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]],param[reg(),name(parity),fulltype[ctype[btype[itype[sgn(unsigned),base(short)]]]]]],{}stmt[sel_if[expr(N/H),st_return[expr(N/H)],estmt(NONE)],st_return[const_i(0)]]],def[fname(fst_tx_timeout),funtype[fulltype[ctype[btype(void)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx timeout card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],estmt[call[ident(fst_issue_cmd),ident(port),ident(ABORTTX)]],estmt[assign[simple_assi(=),->expr[ident(dev),ident(trans_start)],ident(jiffies)]],estmt[call[ident(netif_wake_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(0)]]]],def[fname(fst_start_xmit),funtype[fulltype[ctype[btype[itype[sgn(signed),base(int)]]]],param[reg(),name(skb),fulltype[typec(N/H)]],param[reg(),name(dev),fulltype[typec(N/H)]]],{}stmt[statem(N/H),statem(N/H),statem(N/H),statem(N/H),statem(N/H),estmt[assign[simple_assi(=),ident(port),call[ident(dev_to_port),ident(dev)]]],estmt[assign[simple_assi(=),ident(card),->expr[ident(port),ident(card)]]],estmt[call[ident(dbg),ident(DBG_TX),const_s(fst_start_xmit: length = %d\n),->expr[ident(skb),ident(len)]]],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tried to transmit but no carrier on card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dbg),ident(DBG_ASS),const_s(Packet too large %d vs %d\n),->expr[ident(skb),ident(len)],ident(LEN_TX_BUFFER)]],estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[assign[simple_assi(=),ident(txq_length),binary[aop(+),ident(txq_length),ident(FST_TXQ_DEPTH)]]]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],sel_if[expr(N/H),{}stmt[estmt[call[ident(netif_stop_queue),ident(dev)]],estmt[assign[simple_assi(=),->expr[ident(port),ident(start)],const_i(1)]]],estmt(NONE)],sel_if[expr(N/H),{}stmt[estmt[call[ident(dev_kfree_skb),ident(skb)]],estmt[expr(N/H)],estmt[call[ident(dbg),ident(DBG_ASS),const_s(Tx queue overflow card %d port %d\n),->expr[ident(card),ident(card_no)],->expr[ident(port),ident(index)]]],st_return[const_i(0)]],estmt(NONE)],estmt[call[ident(spin_lock_irqsave),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[assign[simple_assi(=),array_a[->expr[ident(port),ident(txq)],->expr[ident(port),ident(txqe)]],ident(skb)]],estmt[expr(N/H)],sel_if[expr(N/H),estmt[assign[simple_assi(=),->expr[ident(port),ident(txqe)],const_i(0)]],estmt(NONE)],estmt[call[ident(spin_unlock_irqrestore),&expr[->expr[ident(card),ident(card_lock)]],ident(flags)]],estmt[call[ident(fst_q_work_item),&expr[ident(fst_work_txq)],->expr[ident(card),ident(card_no)]]],estmt[call[ident(tasklet_schedule),&expr[ident(fst_tx_task)]]],st_return[const_i(0)]]],NCP(N/H),NCP(N/H),NCP(N/H),NCP(N/H),decl(N/H),NCP(N/H),NCP(N/H),mtop(N/H),mtop(N/H)]
Before sorting list
{{{
call[ident(memcpy),meta(X0),->expr[meta(X1),ident(data)],meta(X2)] ==> call[ident(skb_copy_from_linear_data),meta(X1),meta(X0),meta(X2)]
 ¶ 
}}}
After sorting list
{{{
call[ident(memcpy),meta(X0),->expr[meta(X1),ident(data)],meta(X2)] ==> call[ident(skb_copy_from_linear_data),meta(X1),meta(X0),meta(X2)]
 ¶ 
}}}
